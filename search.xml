<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>邂逅vue-cli</title>
      <link href="/2020/05/05/vue-cli/"/>
      <url>/2020/05/05/vue-cli/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-cli-脚手架"><a href="#vue-cli-脚手架" class="headerlink" title="vue-cli 脚手架"></a>vue-cli 脚手架</h1><h2 id="1-vue-cli使用的前提-官网"><a href="#1-vue-cli使用的前提-官网" class="headerlink" title="1. vue-cli使用的前提  官网"></a>1. vue-cli使用的前提  <a href="https://cli.vuejs.org/zh/guide/">官网</a></h2><pre class="line-numbers language-js"><code class="language-js">使用前提<span class="token number">1</span><span class="token punctuation">.</span> 必须安装 node<span class="token number">2</span><span class="token punctuation">.</span> 必须安装 webpack<span class="token operator">*</span> 安装脚手架：在全局安装就行了npm install <span class="token operator">-</span>g @vue<span class="token operator">/</span>cli  <span class="token comment" spellcheck="true">// -g global 全局的意思</span><span class="token operator">*</span> 安装完vue <span class="token operator">-</span>V 查看一下版本<span class="token operator">*</span> 使用脚手架创建项目vue create my<span class="token operator">-</span>project  脚手架<span class="token number">3</span>创建项目的方式（我们上面那种安装脚手架的方式其实是安装的脚手架<span class="token number">3</span>）vue init webpack my<span class="token operator">-</span>project 脚手架<span class="token number">2</span>创建项目的方式（可以看官网 使用脚手架<span class="token number">3</span>拉取<span class="token number">2</span><span class="token punctuation">.</span>x的模板，就可以使用cli2的方式来创建项目）<span class="token keyword">package</span><span class="token punctuation">.</span>json中的 <span class="token operator">~</span><span class="token number">1.6</span><span class="token punctuation">.</span><span class="token number">2</span> 大于<span class="token number">1.6</span><span class="token punctuation">.</span><span class="token number">2</span> 并且后面两位都是可变的<span class="token operator">^</span><span class="token number">1.6</span><span class="token punctuation">.</span><span class="token number">2</span> 大于<span class="token number">1.6</span><span class="token punctuation">.</span><span class="token number">2</span> 小于等于<span class="token number">1.6</span><span class="token punctuation">.</span><span class="token number">9</span> 后面一位是可变的以上两种并不是指定具体版本 <span class="token operator">^</span>是代表末尾的数可变 <span class="token operator">~</span>代表末尾两位数可变 而是指定大概的版本所以就会产生 <span class="token keyword">package</span><span class="token punctuation">.</span>json里的版本和你真正安装的版本 node_modules里的版本不一致 <span class="token keyword">package</span><span class="token punctuation">.</span>lock<span class="token punctuation">.</span>json就是映射 代表真实安装的版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-vue-cli-2与vue-cli-3区别"><a href="#2-vue-cli-2与vue-cli-3区别" class="headerlink" title="2. vue-cli 2与vue-cli 3区别"></a>2. vue-cli 2与vue-cli 3区别</h2><pre class="line-numbers language-js"><code class="language-js">vue<span class="token operator">-</span>cli <span class="token number">3</span> 是基于webpack <span class="token number">4</span> 打造的vue<span class="token operator">-</span>cli <span class="token number">2</span> 是基于webpack <span class="token number">3</span> 打造的vue<span class="token operator">-</span>cli <span class="token number">3</span> 设计原则是<span class="token number">0</span>配置，移除配置文件根目录下的build和config等目录vue<span class="token operator">-</span>cli <span class="token number">3</span> 提供了vue ui 命令，提供可视化配置，更加人性vue<span class="token operator">-</span>cli <span class="token number">3</span> 移除了 <span class="token keyword">static</span>文件夹，新增<span class="token keyword">public</span>文件夹，并且index<span class="token punctuation">.</span>html移动到<span class="token keyword">public</span>文件夹中国<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邂逅vue-router</title>
      <link href="/2020/04/25/vue-router/"/>
      <url>/2020/04/25/vue-router/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-router的各个阶段"><a href="#Vue-router的各个阶段" class="headerlink" title="Vue-router的各个阶段"></a>Vue-router的各个阶段</h2><h2 id="1-后端路由阶段"><a href="#1-后端路由阶段" class="headerlink" title="1. 后端路由阶段"></a>1. 后端路由阶段</h2><ol><li>早期的网站开发整个HTML页面是由服务器渲染的，服务器直接生产渲染好的HTML页面，返回给客户端进行展示。<br>但是一个网站这么多页面，服务器如何处理呢？</li></ol><ul><li>一个页面有自己的对应的网址（URL）</li><li>在浏览器输入一个URL，首先URL会发送到服务器，服务器会通过正则对该URL进行匹配，并且最后交给一个Controller进行处理</li><li>Controller进行各种处理，最后生成HTML和数据返回给前端</li><li>这就完成了一个IO操作（input output）</li></ul><ol start="2"><li><p>上面这种操作，就是后端路由</p><ul><li>当我们页面需要请求不同的<strong>路径</strong>（URL）时，交给服务器来进行处理，服务器渲染好整个页面，并且将页面返回给客户端</li><li>这种情况下渲染好的页面，不需要加载任何的css和js，可以直接交给浏览器进行展示，这样也有利于SEO的优化。</li></ul></li><li><p>后端路由的缺点</p><ul><li>整个页面的模块由后端人员来编写和维护的</li><li>前端人员如果要开发页面需要通过java和PHP等语言来编写代码</li><li>HTML代码和数据以及相应逻辑会混在一起，编写和维护都是非常糟糕的事</li></ul></li></ol><p>最早期阶段都是这样开发的</p><h2 id="2-前后端分离阶段"><a href="#2-前后端分离阶段" class="headerlink" title="2. 前后端分离阶段"></a>2. 前后端分离阶段</h2><p>后端只负责提供数据，不负责任何阶段界面的内容</p><ol><li>随着AJAX的出现，有了前后端分离的开发模式。</li><li>后端只提供Api来返回数据，前端通过Ajax获取数据，并通过JavaScript将数据渲染到页面中</li><li>这样做的最大优点就是前后端责任清晰，后端专注于数据和逻辑，前端专注于交互和可视化。</li><li>并且当移动端ios/android出现后，后端不需要进行特殊处理，依然使用之前的一套Api就可以，也就是ios可以请求这个服务器接口，android也可以请求这个服务器的接口</li><li>目前很多网站依然采用这种模式开发</li><li>浏览器输入一个地址</li></ol><ul><li>浏览器会先去静态资源服务器将对应页面的html，css，js代码下载，（html，css，js都是存放在静态资源服务器里的）html和css浏览器可以直接渲染</li><li>然后浏览器会执行js代码，当遇到js中由ajax请求的时候，这时候浏览器会去提供API接口的服务器去请求数据</li><li>请求完数据 服务器会把数据返回给浏览器</li><li>一个url对应一套js ， html， css</li></ul><p>浏览器中显示的网页大部分内容都是由前端写的js代码在浏览器中执行，最终渲染出来的网页，以上的步骤就是前端渲染</p><h2 id="3-单页面富应用（SPA）阶段"><a href="#3-单页面富应用（SPA）阶段" class="headerlink" title="3. 单页面富应用（SPA）阶段"></a>3. 单页面富应用（SPA）阶段</h2><p>   SPA: simple page application</p><ol><li><p>其实SPA最主要的特点就是在前后端分离基础上加了一层前端路由</p></li><li><p>也就是前端来维护一套路由规则</p></li><li><p>整个网站只有一个HTML页面</p></li><li><p>浏览器会先去静态资源服务器将html(只有一个)，css，js全部资源，所有代码请求下来，但不会都执行，点击哪个按钮显示哪个页面这时候就需要前端路由，前端路由url和页面有映射关系，然后就会去执行全部资源中相应页面（组件）的代码</p></li><li><p>SPA必须有前端路由做支撑，前端路由就是用来映射，类似 <strong>/apron/login</strong> 这种url与页面的映射的关系，后端路由是服务器url和页面之间映射的关系，为什么要叫前端路由，url与页面这种映射关系是在前端管理的，就叫前端路由，例如vue-router会自动帮我们管理</p></li><li><p>前端路由的核心是什么呢？</p><ul><li><p>改变URL，但是页面不进行整体刷新。（因为刷新会去静态资源服务器重新请求一套新的资源）</p></li><li><p>那如何实现呢？</p></li><li><p>location.hash</p></li><li><p>history.pushState(state, title, url) </p><pre class="line-numbers language-js"><code class="language-js">类似进栈出栈的结构history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用pushState可以返回上一步</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回上一层</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'mine'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用replaceState不能返回上一步 这是替换 不是压栈 和出栈永远显示栈顶的url</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 与history.back()一样 返回上一步 但是不仅可以为负数也可以为正数</span>history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等价于history.go(1) 向前一步</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><p>以上就是前端的现在三个阶段</p><h2 id="4-安装vue-router"><a href="#4-安装vue-router" class="headerlink" title="4. 安装vue-router"></a>4. 安装vue-router</h2><ol><li><p>安装vue-router</p><ul><li>npm install vue-router –save</li><li>npm install vue-router -S</li></ul></li><li><p>创建vue-router 实例</p><ul><li><p><strong>导入</strong>路由对象，并且调用Vue.use(VueRouter)</p></li><li><p>创建<strong>路由实例</strong>，并且传入路由映射配置</p></li><li><p>在<strong>vue实例</strong>中<strong>挂载</strong>创建的路由实例</p><pre class="line-numbers language-vue"><code class="language-vue">import Vue from 'vue'import VueRouter from 'vue-router'Vue.use(VueRouter)因为是一个插件所有可以通过Vue.use()来安装路由功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>使用vue-router的具体步骤</p><ul><li>创建路由组件</li><li>配置路由映射，组件和路由映射关系</li><li>使用路由：通过<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code></li><li><code>&lt;router-view&gt;</code>路径变更的时候，去匹配显示的页面，当没有<router-view>的时候是不会显示的时候，<router-view>就相当于占位，页面显示在哪个位置，也就是该标签会根据当前的路径渲染出不同的组件</router-view></router-view></li><li>在路由切换的时候，切换的是<code>&lt;router-link&gt;</code>挂载的组件，其他内容不会改变</li><li>网页其他内容，比如顶部标题/导航，底部版权信息等和<code>&lt;router-view&gt;</code>处于同一个等级</li><li><code>&lt;router-link&gt;</code>标签是vue-router中已经内置的组件最终会被渲染<a>标签</a></li><a></a></ul><a></a></li><a><li><p>路由重定向</p><pre><code>routes: [{ path: '', redirect: Login }]</code></pre></li><li><p>hash值带#号的</p></li></a></ol><a><pre><code> new Router({  mode: 'history'  })  hash地址会带#号，history不带#号histor丢掉了丑陋的/#，但是它也有个问题：不怕前进，不怕后退，就怕刷新，f5，（如果后端没有准备的话）,因为刷新是实实在在地去请求服务器的,不玩虚的。在hash模式下，前端路由修改的是/#中的信息，而浏览器请求时是不带它玩的，所以没有问题.但是在history下，你可以自由的修改path，当刷新时，如果服务器中没有相应的响应或者资源，会分分钟刷出一个404来。</code></pre></a><h2 id="5-router-link的补充"><a></a><a href="#5-router-link的补充" class="headerlink" title="5. router-link的补充"></a>5. router-link的补充</h2><ol><li><p>to: 指定跳转的路径 </p><pre class="line-numbers language-vue"><code class="language-vue"><router-link to='/home'>HOME按钮</router-link><router-link to='/about'>ABOUT按钮</router-link><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>tag: 可以指定<router-link>之后渲染成什么组件，如果不指定默认会被渲染成一个<a>元素</a></router-link></p><a><pre class="line-numbers language-vue"><code class="language-vue"><router-link to='/home' tag='div'>HOME按钮</router-link> 渲染成div标签<router-link to='/about' tag='div'>ABOUT按钮</router-link> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></a></li><a><li><p>replace:</p><pre class="line-numbers language-vue"><code class="language-vue">默认使用history.pushState() 方法 来回切换可以使用浏览器的回退标志 但是 如果添加replace熟悉 不能使用浏览器的回退功能<router-link to='/home' tag='div' replace>HOME按钮</router-link> 渲染成div标签<router-link to='/about' tag='div' replace>ABOUT按钮</router-link> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></a></ol><a></a><ol start="4"><a></a><li><a></a><h3 id="active-class"><a></a><a href="#active-class" class="headerlink" title="active-class"></a>active-class</h3><ul><li><p>类型: <code>string</code></p></li><li><p>默认值: <code>"router-link-active"</code></p><p>设置链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 <code>linkActiveClass</code> 来全局配置。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;router-link to='/home' tag='div' active-class='active'>HOME按钮&lt;/router-link> // 也可以在路由的构造选项 linkActiveClass 来全局配置。如下const router = new VueRouter(</span><span class="token punctuation">{</span>  <span class="token property">mode</span><span class="token punctuation">:</span> <span class="token string">'history'</span>,  routes,  <span class="token property">linkActiveClass</span><span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="6-代码跳转路由"><a href="#6-代码跳转路由" class="headerlink" title="6. 代码跳转路由"></a>6. 代码跳转路由</h2><ul><li><p>每个组件里都有$router这个属性,是vue-router源码里，给每个组件都添加了一个$router这个属性</p></li><li><p>所以我们可以使用watch监听$router</p><ul><li>方式一：字符串路径  <code>this.$router.push('/user')</code></li><li>方式二：path对象  <code>this.$router.push({ path: '/user' })</code></li><li>方式三：路由名称  <code>this.$router.push({ name: 'user'})</code></li><li>如果提供了 <code>path</code>，<code>params</code> 会被忽略，query不会！！</li><li>不生效 <code>this.$router.push({ path: '/user', params: { id: 1 }})</code></li><li><code>params</code>生效 /user/1  <code>this.$router.push({ name: 'user', params: { id: 1 }})</code>// 使用name方式</li><li><code>this.$router.push({ path:</code>/user/1<code>})</code> 直接在path上扩充</li><li>query 不受影响 /user?id=1  <code>this.$router.push({ path: '/user', query: { id: 1 }})</code></li><li>注意如果你想传参，push的参数是对象哦！！！如果你不想传参只是为了跳转，那push参数就是一个字符串哦！！！</li></ul></li><li><p>总结 要想使用query 必须使用 path 如果使用params 必须使用 name进行跳转， 而且query跳转方式 会在地址栏拼接</p></li></ul><h2 id="7-动态路由"><a href="#7-动态路由" class="headerlink" title="7. 动态路由"></a>7. 动态路由</h2><ul><li><p>在某些情况下，一个页面的path路径可能是不确定的，比如我们进入用户页面希望展示的路径是 /user/用户id</p></li><li><p>/user/121 或者 /user/132</p></li><li><p>除了前面有/user之外，后面还跟上用户的id</p></li><li><p>这种path 和Component 匹配关系，我们称之为动态路由（也是路由传递数据的一种方式）</p></li><li><pre><code>routes: [ { path: '/user/:id', component: User }]&lt;router-link to='/user/121'&gt;用户&lt;/router-link&gt;&lt;div&gt;$route.params.id&lt;/div&gt;</code></pre></li><li><p>$router 是我们new VueRouter()的实例 $route 是哪个路由处于活跃哪个相当于<code>{ path: '/user/:id', component: User }</code></p></li></ul><ol start="8"><li><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2></li></ol><ul><li><p>当我们打包构建应用的时候，Javascript包会变得非常大，影响页面加载。</p></li><li><p>如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了</p></li><li><p>路由懒加载的主要作用就是将路由对应的组件打包成一个个的js代码块</p></li><li><p>只有在这个路由被访问到的时候才加载对应组件</p></li><li><p>传统路由配置 如下</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../views/Home.vue'</span><span class="token keyword">import</span> Slot <span class="token keyword">from</span> <span class="token string">'../components/Slot/Slot'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token string">'/home'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Home'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Home <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/Slot'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Slot'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Slot <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>路由懒加载配置</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/PracticeDrag'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'PracticeDrag'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/PracticeDrag'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/GridDrag'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'GridDrag'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/GridDrag'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router就是用到了 <span class="token string">'/GridDrag'</span>这个路径的时候，动态加载对应的组件，也就是刚开始他不会去服务器请求资源，等到用到了再去服务器请求，这样避免首次加载出现空白页的bug了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这两者有什么区别呢？</p><ul><li><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://i.bmp.ovh/imgs/2021/03/84298160179511cb.png" alt=""></li><li>上图是未使用懒加载 打包后的js文件 所有的 js文件都打包在了 一个app.js里了</li><li></li></ul><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://i.bmp.ovh/imgs/2021/03/78dcca0674cfe212.png" alt=""></p><ul><li>上图是使用路由懒加载后打包后的 js文件 写了两个路由懒加载 多打包了两个js文件</li></ul></li></ul><h2 id="8-懒加载的三种方式"><a href="#8-懒加载的三种方式" class="headerlink" title="8. 懒加载的三种方式"></a>8. 懒加载的三种方式</h2><ul><li><p>方式一：结合vue的异步组件和webpack的代码分析</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Home <span class="token operator">=</span> resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'../components/GridDrag'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../components/GridDrag'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>最早的写法（了解即可）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式二：AMD写法</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Home <span class="token operator">=</span> resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'../components/GridDrag'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>方式三：在ES6中，我们可以有更加简单的写法来组织Vue异步组件和webpack的代码分割</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/GridDrag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="9-路由嵌套"><a href="#9-路由嵌套" class="headerlink" title="9. 路由嵌套"></a>9. 路由嵌套</h2><ul><li><p>嵌套路由是一个很常见的功能</p><ul><li>比如在home页中，我们希望通过 /home/news 和 /home/message访问一些内容</li><li>一个路径映射一个组件，访问这两个路径也会分别渲染两个组件</li></ul></li><li><p>实现嵌套路由步骤</p><ul><li><p>创建对应的子组件，并在路由映射中，配置对应的子路由</p></li><li><p>在组件内部使用<router-view>标签</router-view></p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/user'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> User<span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token string">'profile'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 子路由中重定向</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 当 /user/profile 匹配成功，</span>          <span class="token comment" spellcheck="true">// UserProfile 会被渲染在 User 的 &lt;router-view> 中</span>          path<span class="token punctuation">:</span> <span class="token string">'profile'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 子路由的时候 不需要写 '/profile' 了 </span>          component<span class="token punctuation">:</span> UserProfile        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 当 /user/posts 匹配成功</span>          <span class="token comment" spellcheck="true">// UserPosts 会被渲染在 User 的 &lt;router-view> 中</span>          path<span class="token punctuation">:</span> <span class="token string">'posts'</span><span class="token punctuation">,</span>          component<span class="token punctuation">:</span> UserPosts        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="10-传参方式"><a href="#10-传参方式" class="headerlink" title="10. 传参方式"></a>10. 传参方式</h2><ul><li>传参主要类型：<code>params</code>和<code>query</code></li><li><code>params</code>的类型<ul><li>配置路由的格式： <code>/login/:userId</code></li><li>传递的方式：在path后面跟上对应的值  <code>&lt;router-link :to="'/login/' + userId/&gt;"</code></li><li>传递后形成的路径：<code>/login/123</code>, <code>/login/lisi</code></li><li>在组件中取值：<code>$route.params.userId</code> 注意 <code>userId</code>名必须要和<code>/login/:userId</code>定义的一样</li></ul></li><li>query 的类型<ul><li>配置路由格式：/login，也就是普通配置</li><li>传递方式：对象中使用query的key作为传递方式 <code>&lt;router-link :to=''{ path: '/login', query: {} }/&gt;</code></li><li>传递后形成的路径：<code>/login?id=123</code> 、<code>/login?id=lisi</code></li><li>query 就是查询的意思 类似 get请求参数那种 所以会用?=拼接，这样就懂了吧</li><li><code>url</code>: 协议://服务器地址:端口/路径?查询#片段（hash值）</li><li><code>url</code> scheme://host:port/path?query#fragment</li><li>协议：<code>http / https</code></li><li>服务器地址：<code>localhost</code></li><li>端口（port）：浏览器一般默认80端口，可省略</li><li>path：路径</li><li>查询：query</li></ul></li></ul><h2 id="11-router与route的区别"><a href="#11-router与route的区别" class="headerlink" title="11. router与route的区别"></a>11. router与route的区别</h2><ul><li>其实很简单 我们可以在<code>main.js</code>里打印一下router，在任意组件中打印this.$router发现这两个是一样的，其实router就是我们路由中<code>new VueRouter</code>的实例。</li><li>route就是当前活跃的路由，什么意思呢？就是你在<code>new VueRouter</code>实例中配置的各个路由，当前哪个路由活跃就指向哪个路由</li><li>所有的组件都继承自<code>Vue</code>类的原型，所以我们每个组件可以执行this.$router，和this.$route其实就是相当于在<code>vue</code>原型上挂在$router,和$route。<code>Vue.prototype.$router</code>, <code>Vue.prototype.$route</code></li><li>所以我们把<code>axios</code>实例挂在上<code>vue</code>的原型上<code>Vue.prototype.$api = api</code>各个组件就可以使用<code>this.$api</code>了</li></ul><h2 id="12-导航守卫"><a href="#12-导航守卫" class="headerlink" title="12. 导航守卫"></a>12. 导航守卫</h2><h3 id="一、-全局前置守卫"><a href="#一、-全局前置守卫" class="headerlink" title="一、 全局前置守卫"></a>一、 全局前置守卫</h3><ul><li><p>导航守卫有什么作用呢？</p></li><li><p>我先来科普下 在一个SPA应用中，如何改变网页的标题呢？ </p></li><li><p>网页的标题是通过title来显示的，但是SPA只有一个固定的html，切换不同页面时标题并不会改变</p></li><li><p>假设产品经理让我们要实现一个功能，什么功能呢？切换不同页面，更换网页的title，那我们如何实现呢，如果我们没学过路由，我们可能会在这么做，在每个组件的created或mounted中写一下<code>document.title = title</code>，如果一个项目非常大，我们组件也非常多，我们是不是想要打产品经理了。</p></li><li><p>但是，当你了解了导航守卫这个功能就简单了。</p></li><li><pre class="line-numbers language-vue"><code class="language-vue">router.beforeEach((to, from, next) => {  document.title = to.title;   next();})// next() 一定要写 要不然页面不会渲染的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>上面代码看似完美，但是我们发现to里面有title么？并没有，如果了解源码的同学就会发现，to其实就是route，没有title怎么办，我们在路由配置的时候加上就好了</p><ul><li><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/Draggable'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Draggable'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Draggable<span class="token punctuation">,</span> meta<span class="token punctuation">:</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'自定义title'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">;</span>   <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>上面的已经可以完成功能了，但是细心的同学会发现如果有路由嵌套的情况，有的title会显示undefined，所以我们将上面代码变一下，采取更加靠谱的写法</p><ul><li><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/Draggable'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Draggable'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Draggable<span class="token punctuation">,</span> meta<span class="token punctuation">:</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'自定义title'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 我们可以打印下to的结构，就是route this.$route的那个route</span><span class="token punctuation">{</span>     fullPath<span class="token punctuation">:</span> <span class="token string">"/GridDrag/111"</span><span class="token punctuation">,</span>    hash<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    matched<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        alias<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        beforeEnter<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">default</span><span class="token punctuation">:</span> ƒ<span class="token punctuation">}</span><span class="token punctuation">,</span>        enteredCbs<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        instances<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        matchAs<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>title<span class="token punctuation">:</span> <span class="token string">"111"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">"GridDrag"</span><span class="token punctuation">,</span>        parent<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>        path<span class="token punctuation">:</span> <span class="token string">"/GridDrag/:id"</span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        redirect<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>        regex<span class="token punctuation">:</span> <span class="token regex">/^\/GridDrag\/((?:[^\/]+?))(?:\/(?=$))?$/i</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>title<span class="token punctuation">:</span> <span class="token string">"111"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"GridDrag"</span><span class="token punctuation">,</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token string">"111"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> <span class="token string">"/GridDrag/111"</span><span class="token punctuation">,</span>    query<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 可以 使用下面这种写法</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 选取matched数组中元素的第一个 中的meta 这样保险</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 当然我们写代码要更靠谱一点 考虑各种情况 之前的项目经历说过 写正常的代码 都会 但你要考虑各种非正常的情况 这样写的代码才是好代码</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title <span class="token operator">||</span> <span class="token string">'默认标题'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断是否有第一个元素 如果有才去</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果同学们使用过lodash 可以使用lodash写</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token string">'matched[0].meta.title'</span><span class="token punctuation">,</span> <span class="token string">'默认标题'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="二、全局后置钩子"><a href="#二、全局后置钩子" class="headerlink" title="二、全局后置钩子"></a>二、全局后置钩子</h3><ul><li><p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 <code>next</code> 函数也不会改变导航本身</p></li><li><p>主要是表示 路由跳转完成后 执行 </p></li><li><pre class="line-numbers language-js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">from</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span><span class="token string">'matched[0].meta.title'</span><span class="token punctuation">,</span> <span class="token string">'默认标题'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span>与前置导航守卫一样 当然我们也可以在后置钩子里执行 更改网页标题的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="三、路由独享的守卫"><a href="#三、路由独享的守卫" class="headerlink" title="三、路由独享的守卫"></a>三、路由独享的守卫</h3><ul><li><p>你可以在路由配置上直接定义<code>beforeEnter</code> 守卫</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/foo'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Foo<span class="token punctuation">,</span>      beforeEnter<span class="token punctuation">:</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEnter'</span><span class="token punctuation">)</span>          <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>这些守卫与全局前置守卫的方法参数是一样的。注意执行顺序：先执行全局前置守卫，在执行路由独享守卫，最后在执行全局后置钩子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="四、组件内的守卫"><a href="#四、组件内的守卫" class="headerlink" title="四、组件内的守卫"></a>四、组件内的守卫</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Foo <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`...`</span></span><span class="token punctuation">,</span>      <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在渲染该组件的对应路由被 确认 前调用</span>    <span class="token comment" spellcheck="true">// 不！能！获取组件实例 `this`</span>    <span class="token comment" spellcheck="true">// 因为当守卫执行前，组件实例还没被创建</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在当前路由改变，但是该组件被复用时调用</span>    <span class="token comment" spellcheck="true">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>    <span class="token comment" spellcheck="true">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>    <span class="token comment" spellcheck="true">// 可以访问组件实例 `this`</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 导航离开该组件的对应路由时调用</span>    <span class="token comment" spellcheck="true">// 可以访问组件实例 `this`</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、完整的导航解析流程"><a href="#五、完整的导航解析流程" class="headerlink" title="五、完整的导航解析流程"></a>五、完整的导航解析流程</h3><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h2 id="13-keep-alive"><a href="#13-keep-alive" class="headerlink" title="13. keep-alive"></a>13. keep-alive</h2><ul><li><p><code>&lt;router-view&gt;也是一个组件</code>如果直接被包在keep-alive里面，所有的路径匹配到的视图组件都会被缓存</p></li><li><p><code>&lt;keep-alive&gt;</code>是vue的内置组件，可以使被包含的组件保留状态，或避免重新渲染</p></li><li><p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</p></li><li><p>当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行。</p></li><li><p>生命周期只会在第一次创建的时候执行，且执行一次。activated活跃状态下会执行，deactivate不活跃状态下会执行</p><ul><li><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>详情可以看官方文档 <a href="https://cn.vuejs.org/v2/api/#keep-alive">https://cn.vuejs.org/v2/api/#keep-alive</a></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邂逅Vuex</title>
      <link href="/2020/04/15/vuex/"/>
      <url>/2020/04/15/vuex/</url>
      
        <content type="html"><![CDATA[<h3 id="Vuex是什么"><a href="#Vuex是什么" class="headerlink" title="Vuex是什么"></a>Vuex是什么</h3><h3 id="1-Vuex-是什么？"><a href="#1-Vuex-是什么？" class="headerlink" title="1. Vuex 是什么？"></a>1. Vuex 是什么？</h3><ul><li>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。<ul><li>它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li><li>Vuex 也集成到 Vue 的官方调试工具 <a href="https://github.com/vuejs/vue-devtools">devtools extension (opens new window)</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</li></ul></li><li>什么是“状态管理模式”？<ul><li>其实你可以把他看成需要多个组件共享的变量全部存储在一个对象（管家）里</li><li>然后将这个对象放到顶层的vue实例中，让其他组件可以使用。</li><li>那么多个组件就可以共享这个对象中所有变量属性了</li><li>如果是这样的话，我们可以自己在Vue原型上添加这样一个对象，为什么官网还要专门出一个Vuex的插件呢</li><li>当然可以，只不过VueJs带给我们最大的便利是什么？响应式</li><li>我们自己在原先上挂载的对象能不能保证他里面所有的属性，都能做到响应式呢？当然可以，只是自己封装稍微麻烦一些</li><li>不用怀疑，Vuex就是为了提供这样一个在多个组件间共享状态的插件，用它就可以了，而且是响应式的</li></ul></li><li>管理什么状态呢？<ul><li>有什么状态需要我们在多个组件中共享呢？</li><li>位置信息、用户名、头像、购物车等</li></ul></li></ul><h3 id="2-安装vuex"><a href="#2-安装vuex" class="headerlink" title="2. 安装vuex"></a>2. 安装vuex</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vuex --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>创建store</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    count<span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    increment <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>安装步骤与vue<span class="token operator">-</span>router类似<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Vue部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邂逅webpack</title>
      <link href="/2020/03/15/webpack/"/>
      <url>/2020/03/15/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="了解webpack"><a href="#了解webpack" class="headerlink" title="了解webpack"></a>了解webpack</h1><h2 id="1-webpack打包"><a href="#1-webpack打包" class="headerlink" title="1. webpack打包"></a>1. webpack打包</h2><pre class="line-numbers language-js"><code class="language-js">如果我们在js文件打包 要先执行这个命令 webpack <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>main<span class="token punctuation">.</span>js <span class="token punctuation">.</span><span class="token operator">/</span>dist<span class="token operator">/</span>dist<span class="token punctuation">.</span>js 手动打包main<span class="token punctuation">.</span>js结果为dist<span class="token punctuation">.</span>js但是每次都输入太麻烦 能不能简单执行一个webpack 命令 让他自动就去打包我们的main<span class="token punctuation">.</span>js呢其实很简单 我们只需要新建一个文件 webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js就好了 webpack打包的时候会自动去找webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js 去找看看有没有入口和出口 新版本的vue cli 已经隐藏了<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会去node 包里去找这个path</span>如果一个单独项目 需要先npm init 之后会生成个<span class="token keyword">package</span><span class="token punctuation">.</span>js文件moudule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 如果</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// path: '/dist', // 路径（要写绝对路径）不要写死 动态获取路径</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// path: path.resolve(__dirname) 代表当前路径 加个'dist'代表当前路径拼接dist文件 拿到的是绝对路径</span>        filename<span class="token punctuation">:</span> <span class="token string">'dist.js'</span> <span class="token comment" spellcheck="true">// 文件名字</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>__dirname代表当前所在文件路径__filename代表当前所在文件名称devDependencies<span class="token punctuation">:</span> 开发时的依赖，只有开发时候才用到，上线就用不到dependencies<span class="token punctuation">:</span> 上线时候也能用到在westrom中的终端和 cmd里的终端 都是执行全局的命令 而你在npm run build 中写的执行脚本 他首先执行的是本地的也就是node_modules里的 找不到才会执行全局的 由于不懂上述的原因 所以有时候有些人很疑惑  我明明在webstrom里安装了这个插件 为什么还报命令不存在的错误呢 是因为 你在webstrom的终端里去找 会先找全局 当然是找不到的了 因为你只是在本地装的插件 如果你使用<span class="token operator">-</span>g安装那可能不会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-webpack中的loader"><a href="#2-webpack中的loader" class="headerlink" title="2. webpack中的loader"></a>2. webpack中的loader</h2><pre class="line-numbers language-js"><code class="language-js">loader用于对模块的源代码进行转换。它可以将，图片，css，typeScript<span class="token punctuation">,</span>es6<span class="token punctuation">,</span>jsx文件，vue文件转化为es5等打包的时候会入口文件一般是main<span class="token punctuation">.</span>js去找 相关依赖 将其打包 所以一些样式没有在入口文件main<span class="token punctuation">.</span>js里引入那么他就不会被打包，所以要在main<span class="token punctuation">.</span>js里引入 然后你兴高采烈的打包 突然发现报错了 如下图所示 这就是因为我么webpack没法对css进行处理 那么我们就需要对应的loader来处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>初学这可以去搜 <a href="https://webpack.docschina.org/">webpack官网</a></p><p>普及一个小知识 一般已org结尾的域名都是非盈利组织 比如<a href="cn.vuejs.org">vue官网 </a>、<a href="https://webpack.docschina.org/">webpack官网</a></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b1ebbd3c-ca49-405b-957b-effe60782276/65505823-da93-4631-a5f0-b98b81123205.png" alt=""></p><p>根据webpack的官网我们先安装css的loader 然后在配置这下就搞定了 我们在npm run build来试试 这次虽然打包成功但是样式没有显示，这是为什么呢，我们继续看下官网怎么说，原来呀 css-loader只是解析，并没有渲染，如果要渲染我们还需要安装style-loader<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b1ebbd3c-ca49-405b-957b-effe60782276/003086eb-f3c5-4673-99c0-6cc7444e954f.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b1ebbd3c-ca49-405b-957b-effe60782276/c3b9d002-58d4-4ed2-87f5-a974b43ff126.png" alt=""></p><p>这里不知道大家有没有疑问  [“style-loader”, “css-loader”] 不应该是先解析 在渲染么 [“css-loader”, “style-loader”] 按理说应该是这样的呀，这里我给大家普及个小知识，webpack在读取使用loader过程中，是按照从右到左的顺序读取的。</p><h2 id="3-webpack中图片的加载"><a href="#3-webpack中图片的加载" class="headerlink" title="3. webpack中图片的加载"></a>3. webpack中图片的加载</h2><pre><code>图片加载要先安装url-loader 然后配置 默认图片一般小于8kb webpack会把图片转为base64 大于8kb会使用file-loader模块进行加载编译所以这时候就会出现问题 当你的图片大小小于默认的8kb 是可以正常显示的 当图片大小大于8kb就不能正常显示 他会使用file-loader模块进行加载编译 等你安装好了之后 在我们平时练习的时候 打包的dist文件不包含index.html文件 这是后引入图片就会有问题 因为打包后的大于8kb图片会重新放到dist文件下 并以hash命名防止命名重复 这时候index.html会找不到这个图片就会报错 是因为图片的路径是不对的 我们就会用到下面publicPath的属性来配置 是所有涉及到图片的就会 默认情况下webpack会把生成的路径直接返回给使用者 但是我们练习的时候 没有打包index.html和dist在同一级别 所以就找不到图片了所以我们要将路径拼接dist/ 使用下面这个属性publicPath 所有关于url的路径最后都要拼接上这个module.exports = {  publicPath: 'dist/',}注意：正常项目中我们打包后都会有 index.html所以其实不用配置publicPath这个属性也是没有问题的 或者像下面这样配置都可以module.exports = {  publicPath: './',}上面我们说到 打包后的图片 命名是是以hash来命名的 但是图片很多的时候 就会看着很乱 不知道哪个图片是啥 在真实开发中我们可能对打包后的图片有一定要求 比如将所以图片放到一个文件夹中 名称采用原来的名称 当然还是要防止重复注意：如果使用vue cli 2 那么静态资源static 如果使用vue cli 3 静态资源放到public 放到这里的图片 打包的时候不管是否大于 8kb都会原封不动 复制到dist文件中 上面那种情况说的是 放到src下的图片</code></pre><h2 id="4-webpack打包后的图片命名"><a href="#4-webpack打包后的图片命名" class="headerlink" title="4. webpack打包后的图片命名"></a>4. webpack打包后的图片命名</h2><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpg|gif)$/i</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>              name<span class="token punctuation">:</span> <span class="token string">'img/[name].[hash:8].[ext]'</span> <span class="token comment" spellcheck="true">//原来叫什么名字就叫什么名字 [name] 把name当作变量 [hash:8]取八位的hash值默认32位 [ext]原来的扩展名 我的理解就是扩展名就是原来的后缀</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-es6语法处理babel-loader"><a href="#5-es6语法处理babel-loader" class="headerlink" title="5.  es6语法处理babel-loader"></a>5.  es6语法处理babel-loader</h2><pre class="line-numbers language-js"><code class="language-js">如果你仔细阅读webpack打包后的js文件 发现写的es6代码并没有转为es5 那就意味着那些对es6不支持的浏览器 没有办法运行我们的代码前面我们说过要将es6转为es5就需要babel 而在webpack中 我们直接使用babel对应的loader就可以了安装：npm install <span class="token operator">-</span>D babel<span class="token operator">-</span>loader @babel<span class="token operator">/</span>core @babel<span class="token operator">/</span>preset<span class="token operator">-</span>env webpackenv<span class="token punctuation">:</span> environment 环境的意思配置：module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.m?js$/</span><span class="token punctuation">,</span>      exclude<span class="token punctuation">:</span> <span class="token regex">/(node_modules|bower_components)/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 排除node_modules文件</span>      use<span class="token punctuation">:</span> <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 会去找.babelrc的文件</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-webpack引入相关流程"><a href="#6-webpack引入相关流程" class="headerlink" title="6. webpack引入相关流程"></a>6. webpack引入相关流程</h2><pre><code>在vue中使用 import vue from 'vue'; // 其实是引入的node_modules里的其次 当我们 在webpack中配置下面这个 其实是为vue起别名 会去node_modules 下的 vue/dist/vue.esm.js当我们这样写的话 就相当于选择 runtime-compilerresolve: {  alias: {    vue$: "vue/dist/vue.esm.js"   // assets: path.join(__dirname, 'src/assets')  }}</code></pre><h2 id="7-webpack中省略后缀"><a href="#7-webpack中省略后缀" class="headerlink" title="7. webpack中省略后缀"></a>7. webpack中省略后缀</h2><pre><code>resolve: {  alias: {}，  extensions: ['.js', '.vue', '.css'] // 与alias并列属性 }当我们配置上述属性那么我们在引入的时候就可以省略后缀import Notice from './Notice.vue' // 原先的引入方式import Notice from './Notice' // 配置完可以这样写</code></pre><h2 id="8-webpack中plugin-插件"><a href="#8-webpack中plugin-插件" class="headerlink" title="8. webpack中plugin(插件)"></a>8. webpack中plugin(插件)</h2><pre><code>1.什么是插件？对现有的框架进行扩展 扩展的东西 就是插件2.loader与plugin区别？loader主要用于转换某些类型的模块，比如css，vue，图片等，他是一个转换器plugin是插件，它是对webpack本身的扩展，是一个扩展器3.plugin的使用过程？步骤一：通过npm安装需要使用的plugins，某些webpack已经内置的插件不需要安装步骤二：在webpack.config.js中配置插件</code></pre><h2 id="9-webpack中添加版权的plugin"><a href="#9-webpack中添加版权的plugin" class="headerlink" title="9. webpack中添加版权的plugin"></a>9. webpack中添加版权的plugin</h2><pre><code>const webpack = require('webpack');plugins: [  new webpack.BannerPlugin('最终版权归zcy所有')],配置完之后 在打包的dist文件就能看到相关信息了</code></pre><h2 id="10-HtmlWebpackPlugin"><a href="#10-HtmlWebpackPlugin" class="headerlink" title="10. HtmlWebpackPlugin"></a>10. HtmlWebpackPlugin</h2><pre class="line-numbers language-js"><code class="language-js">在真实发布项目时 发布的是dist文件夹中的内容，但是dist文件中没有index<span class="token punctuation">.</span>html文件的话，那么打包的js等文件也毫无意义。所以我们需要将index<span class="token punctuation">.</span>html文件打包到dist文件夹中，这个时候就可以使用HtmlWebpackPlugin插件HtmlWebpackPlugin 可以为我们做的事情<span class="token number">1</span><span class="token punctuation">.</span>自动生成一个index<span class="token punctuation">.</span>html文件（可以指定模板来生成）<span class="token number">2</span><span class="token punctuation">.</span>将打包的js文件，自动通过script标签插入到body中<span class="token number">3</span><span class="token punctuation">.</span>这将会生成一个包含以下内容的 dist<span class="token operator">/</span>index<span class="token punctuation">.</span>html 文件：安装HtmlWebpackPluginnpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin使用plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>我们打包后发现 果然有 index<span class="token punctuation">.</span>html 并且也嵌入了相应的js 但是我们发现少了个东西 拿vue举例子少了这个 因为我们后续模板要替换掉这个<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>但是HtmlWebpackPlugin 并没有给我们生成这个 我们该怎么办呢我们只需要下面配置就可以    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>     <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span>     template<span class="token punctuation">:</span> <span class="token string">'index.html'</span> <span class="token comment" spellcheck="true">// 按照指定的模板来生产 他会找当前配置文件下有没有index.html文件</span>     <span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-webpack压缩js之UglifyjsWebpackPlugin"><a href="#11-webpack压缩js之UglifyjsWebpackPlugin" class="headerlink" title="11. webpack压缩js之UglifyjsWebpackPlugin"></a>11. webpack压缩js之UglifyjsWebpackPlugin</h2><pre class="line-numbers language-js"><code class="language-js">我们对打包后的js进行打包压缩 会把空格都去掉 压缩体积 一些变量名 使用简单的字符来替换安装npm install uglifyjs<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin <span class="token operator">--</span>save<span class="token operator">-</span>dev配置<span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  optimization<span class="token punctuation">:</span> <span class="token punctuation">{</span>    minimizer<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>在打包后 我们会发现js文件就变得丑化了 就是压缩了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-搭建本地服务器-webpack-dev-server"><a href="#12-搭建本地服务器-webpack-dev-server" class="headerlink" title="12. 搭建本地服务器 webpack-dev-server"></a>12. 搭建本地服务器 <a href="https://github.com/webpack/webpack-dev-server">webpack-dev-server</a></h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    contentBase<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当前文件拼接dist </span>    compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 实时监听</span>    port<span class="token punctuation">:</span> <span class="token number">9000</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 例如当前文件路径是 D:\study</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 代表当前文件的下一级添加dist文件   D:\study\dist</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 代表当前文件的同一级添加dist文件  D:\dist 与 D:\study同级</span>在<span class="token keyword">package</span><span class="token punctuation">.</span>json 里的script里配置 脚本serve<span class="token punctuation">:</span> <span class="token string">'webpack-dev-serve'</span>本地服务器：http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">9000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-配置文件指定修改"><a href="#13-配置文件指定修改" class="headerlink" title="13. 配置文件指定修改"></a>13. 配置文件指定修改</h2><pre class="line-numbers language-js"><code class="language-js">正常如果在<span class="token keyword">package</span><span class="token punctuation">.</span>json的script脚本中 不默认指定配置文件的话 默认配置文件为webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js如果不想使用webpack<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js那么可以重新指定js文件 例如像下面serve中的这样我们为什么要添加个node 因为node可以直接直接js文件 以前没有node的时候 必须浏览器才能执行js 后来有了node node为js提供运行环境不依赖浏览器就可以直接执行js 可以在终端里 直接node js文件就可以执行了 就是这么牛逼哈哈<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b1ebbd3c-ca49-405b-957b-effe60782276/4b535abb-dbd4-4311-9f0f-20e07eb7f342.png" alt=""></p><h2 id="14-runtime-compiler-与runtime-only"><a href="#14-runtime-compiler-与runtime-only" class="headerlink" title="14. runtime-compiler 与runtime-only"></a>14. runtime-compiler 与runtime-only</h2><pre><code>runtime-compiler 代码中可以有template 因为compiler 可以用来编译template  el + template + components (el + template直接替换app) runtime-only 代码中不可有任何的template rander函数1. runtime-compiler的流程解析template -&gt; 编译ast(抽象语法树) -&gt; 将所有template转为render函数 -&gt; virtual dom 虚拟dom -&gt; 真实dom2. runtime-only的流程(性能高 轻6kb)render函数 -&gt; virtual dom 虚拟dom -&gt; 真实dom所有我们项目尽量选择runtime-only 因为代码少 所以轻了6kb</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-b1ebbd3c-ca49-405b-957b-effe60782276/ae0a72e3-8e4c-4b67-9786-07664da691cf.png" alt=""></p><h2 id="15-render函数"><a href="#15-render函数" class="headerlink" title="15. render函数"></a>15. render函数</h2><pre class="line-numbers language-js"><code class="language-js">render函数<span class="token function">render</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 项目中createElement 一般叫h 实际是createElement 但是他只是个形参 无所谓 让大家明白原来参数意思就好</span> <span class="token comment" spellcheck="true">// createElement('标签', '标签的属性', ['标签里的内容']);</span> <span class="token comment" spellcheck="true">// createElement('div'); // 创建div标签</span> <span class="token comment" spellcheck="true">// createElement('div', { id: 'app' }); //创建id为app的div</span> <span class="token comment" spellcheck="true">// createElement('div', { id: 'app' }, ['hello word'])</span><span class="token punctuation">}</span>我们可以巧用如下render函数<span class="token function">render</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">'app'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'hello word'</span><span class="token punctuation">,</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'这是內部div'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果不想穿第二个参数 标签的属性 那么可以省略 直接传数组</span><span class="token punctuation">}</span>以上是基本用法 当然我们可以用高级的用法传入的参数是一个组件比如你定义一个组件叫App <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{{ message }}&lt;/div>'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            message<span class="token punctuation">:</span> <span class="token string">'这是一条消息'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span>createElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">createElement</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>妙啊，实在是妙啊 这样main<span class="token punctuation">.</span>js里是怎么实现的知道不了<span class="token punctuation">.</span>vue组件里的template是谁帮我们处理的呢 原来是 vue<span class="token operator">-</span>template<span class="token operator">-</span>compiler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> webpack部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邂逅正则</title>
      <link href="/2019/11/15/zhengze/"/>
      <url>/2019/11/15/zhengze/</url>
      
        <content type="html"><![CDATA[<h2 id="字面量创建正则表达式"><a href="#字面量创建正则表达式" class="headerlink" title="字面量创建正则表达式"></a>字面量创建正则表达式</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token punctuation">;</span><span class="token regex">/a/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 检查字符串中时是否包含a</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'f'</span><span class="token punctuation">;</span><span class="token regex">/a/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 检查字符串中是否包含a,并不是检查a的变量</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token function">使用eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 大部分情况不会在正则表达式中放变量，如果放就是用eval，计算字符串中的js语法的<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'f'</span><span class="token punctuation">;</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token regex">/${a}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 检查字符串中时分包含f,是检查a的变量,不是检查a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用对象创建正则表达式"><a href="#2-使用对象创建正则表达式" class="headerlink" title="2. 使用对象创建正则表达式"></a>2. 使用对象创建正则表达式</h2><pre class="line-numbers language-js"><code class="language-js">第一个参数为正则表达式的语句，但是不需要写 <span class="token comment" spellcheck="true">//</span>相当于<span class="token operator">/</span>a<span class="token operator">/</span>中的a，第二个参数是模式，后面会讲到<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false str中是否包含a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-或选择符的使用"><a href="#3-或选择符的使用" class="headerlink" title="3. 或选择符的使用"></a>3. 或选择符的使用</h2><pre class="line-numbers language-js"><code class="language-js">【<span class="token operator">|</span>】 或者 与逻辑或 相同 只不过是一个<span class="token operator">|</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span><span class="token regex">/a|b/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 检测str中是否包含a或b </span><span class="token regex">/b|z/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 检查str中是否包含z或b </span><span class="token regex">/b|az/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 检车str是否包含b或az且az相邻</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原子表与原子组中的选择符"><a href="#4-原子表与原子组中的选择符" class="headerlink" title="4. 原子表与原子组中的选择符"></a>4. 原子表与原子组中的选择符</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 原子表 代表或的意思，<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span>与 <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span>是一个意思<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span><span class="token regex">/[abc]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>等同于<span class="token regex">/a|b|c/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span>代表原子组 就是组在一起的意思<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token regex">/(abc)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 是否包含abc且顺序一致</span><span class="token regex">/(abc)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>等同于<span class="token regex">/abc/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'&lt;h1>abcdefghijk,1234&lt;/h1>'</span><span class="token punctuation">;</span><span class="token regex">/^&lt;(h[1-6])>.*&lt;\/\1>$/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 原子组(h[1-6]) 而后面的\1是代表和第几个原子组一样</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^&lt;(h[1-6])>.*&lt;\/\1>$/i</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["&lt;h1>abcdefghijk,1234&lt;/h1>", "h1"]</span>为什么会有两个？ 因为（h1）就是原子组str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^&lt;(h[1-6])>.*&lt;\/\1>$/ig</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["&lt;h1>abcdefghijk,1234&lt;/h1>"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-正则表达式的转义"><a href="#5-正则表达式的转义" class="headerlink" title="5. 正则表达式的转义"></a>5. 正则表达式的转义</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>未转义的<span class="token punctuation">.</span>代表除换行外任何字符 未转义就是直接写点<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12.34</span><span class="token punctuation">;</span><span class="token regex">/\d+.\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这样写看着没什么问题</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token string">'12#34'</span><span class="token punctuation">;</span><span class="token regex">/\d+.\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 这样就有问题</span><span class="token number">2</span><span class="token punctuation">.</span>转义的点 \<span class="token punctuation">.</span> 加个斜杠 代表只能匹配<span class="token punctuation">.</span> 普通的点<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12.34</span><span class="token punctuation">;</span><span class="token regex">/\d+\.\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token string">'12#34'</span><span class="token punctuation">;</span><span class="token regex">/\d+\.\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false </span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12.34</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\d+\.\d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 放到对象里就不行</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token regex">/\d+\.\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 在字面量里可以</span>其实我们可以打印下<span class="token string">'d'</span> <span class="token operator">===</span> <span class="token string">'d'</span><span class="token string">'d'</span> <span class="token operator">===</span> <span class="token string">'\d'</span>这两个都是<span class="token boolean">true</span>说明\d和d没啥区别所以其实在对象中<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\d+\.\d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>上面的写法相当于下面的<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'d+.d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表一个或多个d然后.代表任意字符在连接上多个d</span>我们测试下对不对<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'dddd@ddd'</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>所以我们的猜想是正确的我们打印下console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'\d+\.\d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'd+.d'</span>我们在打印下console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'\\d+\\.\\d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// \d+\.\d</span>这样就符合使用对象创建正则表达式的结构了<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\\d+\\.\\d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12.34</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>但是上面我们写的不严谨没有做边界处理，后续我们会说<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token string">'aaa12.34'</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 如果想匹配【/】那么也需要转义，因为/作为开始和结束的符合</span><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'https?://www.baidu.com'</span><span class="token punctuation">;</span><span class="token regex">/http:\/\/\w+\.\w+\.\w+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-字符边界约束"><a href="#6-字符边界约束" class="headerlink" title="6. 字符边界约束"></a>6. 字符边界约束</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcdefg8hijk'</span><span class="token punctuation">;</span><span class="token regex">/\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 代表从头查找找到数字就行 \d是匹配数字</span><span class="token operator">^</span>代表开头边界<span class="token regex">/^\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 代表字符串是以数字开头</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token string">'3abasa'</span><span class="token punctuation">;</span><span class="token regex">/^\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>$代表结束边界<span class="token regex">/^\d$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 代表开头位数字 结束也为数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-数值-d与空白-s元字符"><a href="#7-数值-d与空白-s元字符" class="headerlink" title="7. 数值\d与空白\s元字符"></a>7. 数值\d与空白\s元字符</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> \d  代表数值<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'1a2b3c4d'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['1']</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["1", "2", "3", "4"]</span>不加g的时候匹配完一个就不继续匹配了，加上g之后匹配完还继续匹配<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'123abc456'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["123", "456"] + 匹配一个或多个 这时候就匹配4个数字 </span><span class="token number">2</span><span class="token punctuation">.</span> \D  代表除了数字任何字符<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'1a2b3c4d'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\D+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ["a", "b", "c", "d"]</span><span class="token number">3</span><span class="token punctuation">.</span> \s 代表匹配空白 换行 制表tab<span class="token regex">/\s/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token regex">/\s/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a\nb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// \n 代表换行符 true</span><span class="token number">4</span><span class="token punctuation">.</span> \S 代表 匹配除了空白以外的字符str <span class="token operator">=</span> <span class="token string">'1a2b'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表匹配数字  ["1", "2"]</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[\d]/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[\D]/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["a", "b"]</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[^\d]/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表匹配非数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-w与W元字符"><a href="#8-w与W元字符" class="headerlink" title="8. w与W元字符"></a>8. w与W元字符</h2><pre class="line-numbers language-js"><code class="language-js">\w 代表匹配字母数字下划线<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'abcd12345efg678'</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["12345", "678"]</span>a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\w+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["abcd12345efg678"]</span>\W 匹配除了字母数字下划线<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'abcd12$345efg678%'</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\W+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["$", "%"]</span>自定义匹配密码，字母开头后跟字母数组下划线<span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token string">'a1233789_'</span><span class="token punctuation">;</span><span class="token regex">/^[a-z]\w{6,8}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-点元字符的使用"><a href="#9-点元字符的使用" class="headerlink" title="9. 点元字符的使用"></a>9. 点元字符的使用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 【<span class="token punctuation">.</span>】 匹配除了换行符外的任何字符<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'aA1#_'</span><span class="token punctuation">;</span><span class="token regex">/.+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/.+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["aA1#_", index: 0, input: "aA1#_", groups: undefined]</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'aA1#_'</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> \<span class="token punctuation">.</span> 匹配点<span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^https?:\/\/\w+\.\w+\.\w+$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["https://www.baidu.com"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-匹配所有字符"><a href="#10-匹配所有字符" class="headerlink" title="10. 匹配所有字符"></a>10. 匹配所有字符</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`a1@#$%^&amp;*()_+.A`</span></span><span class="token punctuation">;</span><span class="token regex">/[\d\D]+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token regex">/[\s\S]+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token regex">/[\w\W]+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-i与g模式"><a href="#11-i与g模式" class="headerlink" title="11.  i与g模式"></a>11.  i与g模式</h2><pre class="line-numbers language-js"><code class="language-js">i 不区分大小写<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'WwW.BAI.du.com'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/w/ig</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["w", "W", "W"] 既想匹配不区分大小写，又不限制数量</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/w/ig</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-m多行匹配修正符实例"><a href="#12-m多行匹配修正符实例" class="headerlink" title="12. m多行匹配修正符实例"></a>12. m多行匹配修正符实例</h2><pre class="line-numbers language-js"><code class="language-js">对于有很多行的字符串，我们要想每一行单独对待使用 m 模式<span class="token keyword">let</span> lesson <span class="token operator">=</span> <span class="token template-string"><span class="token string">`#1 css: 100元 ##2 html: 200元 ##3 js: 300元 # 300元#4 vue: 400元 #`</span></span>lesson<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^\s*#\d+\s+.*\s+#$/mg</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> item<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s*#\d+\s+/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+#/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>lesson<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^\s*#\d+\s+.*\s+#$/mg</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> price<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s*#\d+\s+/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+#/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> price <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-汉字与字符属性"><a href="#13-汉字与字符属性" class="headerlink" title="13. 汉字与字符属性"></a>13. 汉字与字符属性</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> \p<span class="token punctuation">{</span>L<span class="token punctuation">}</span> 检测每一个字符的属性是否有字母  \p<span class="token punctuation">{</span>L<span class="token punctuation">}</span>对于Unicode字母<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'I Love You'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\p{L}/gu</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["I", "L", "o", "v", "e", "Y", "o", "u"]</span><span class="token number">2</span><span class="token punctuation">.</span> \p<span class="token punctuation">{</span>N<span class="token punctuation">}</span>检测每一个字符的属性是否有字母 \p<span class="token punctuation">{</span>N<span class="token punctuation">}</span>对于Unicode数字<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'I 1 Love 2 You3'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\p{N}/gu</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 来返回一个数组  ["1", "2", "3"]</span><span class="token number">3</span><span class="token punctuation">.</span> \p<span class="token punctuation">{</span>P<span class="token punctuation">}</span> 只匹配标点符号<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"I don't know!"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\p{P}/gu</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ["'", "!"]</span><span class="token number">4</span><span class="token punctuation">.</span> \p<span class="token punctuation">{</span>sc<span class="token operator">=</span>Han<span class="token punctuation">}</span>  \p<span class="token punctuation">{</span>sc<span class="token operator">=</span>Han<span class="token punctuation">}</span> 只匹配匹配中文sc就是script简写 语言 Han代表汉语<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'我喜欢你!'</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\p{sc=Han}/gu</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["我", "喜", "欢", "你"]</span><span class="token regex">/\p{sc=Han}/gu</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 检测是否有汉字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-正则的lastIndex属性的作用"><a href="#14-正则的lastIndex属性的作用" class="headerlink" title="14. 正则的lastIndex属性的作用"></a>14. 正则的lastIndex属性的作用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'suming'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\w/g</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">let</span> res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以获取每次一执行的序号，也可以获取其属性</span><span class="token comment" spellcheck="true">// 使用g全局模式的时候lastIndex会变化，lastIndex是从上次查找的位置的下标，下次查找是从上次查找的位置下继续查找 如果不使用g那么会一直在同一个位置，会卡死</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-有效率的y模式"><a href="#15-有效率的y模式" class="headerlink" title="15. 有效率的y模式"></a>15. 有效率的y模式</h2><pre class="line-numbers language-js"><code class="language-js">叫做“粘连”（sticky）修饰<span class="token punctuation">,</span> y修饰符的作用与g修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。<span class="token number">1</span><span class="token punctuation">.</span> g首先找到与之匹配的，然后在往后继续找是否还有与之匹配的，直到找不到与之匹配的为止<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcda'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/a/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// g首先找到a然后在往后继续找是否有啊</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 找不到的时候下标为0</span><span class="token number">2</span><span class="token punctuation">.</span> y会一直匹配符合条件，如果不符合就停止<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcda'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/a/y</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'aaaaa'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/a/y</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>总结：其实就是g会忽略不符合正则表达式要求的字符，再继续寻找下一个符合要求的，而y就是不忽略每一个字节都要去满足正则表达式<span class="token number">4</span><span class="token punctuation">.</span> 利用y模式提取有用的数字<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'爱丁堡上课时，1760135477，2457518079，1756760988,abcdefg，'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d+，?/y</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-区间匹配"><a href="#16-区间匹配" class="headerlink" title="16. 区间匹配"></a>16. 区间匹配</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token string">'2020'</span><span class="token punctuation">;</span>year<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["2020", index: 0, input: "2020", groups: undefined]</span>year<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[0-9]+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["2020", index: 0, input: "2020", groups: undefined]</span>这两种是一样的<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>name<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["zcy"] [a-z]就是匹配26个字母，但是只是一个，因为使用+所以是贪婪模式</span>name<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["z", "c", "y"]</span><span class="token operator">+</span> 就是贪婪，匹配到符合要求之后，就一直往下匹配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-排除匹配"><a href="#17-排除匹配" class="headerlink" title="17. 排除匹配"></a>17. 排除匹配</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token operator">^</span><span class="token punctuation">]</span> 除了  都匹配<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'sm and zcy'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[^a, ]/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 除了a 和 空格都匹配 在原子表里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="18-原子表里的字符不解析"><a href="#18-原子表里的字符不解析" class="headerlink" title="18. 原子表里的字符不解析"></a>18. 原子表里的字符不解析</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'(1234)-5678'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[()]/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ()放到[]里面就是代表括号的意思，放到外面代表原子组</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/()/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["", "", "", "", "", "", "", "", "", "", "", ""]</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[.+]/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在原子表里就代表. 和 + 号 不在原子表里. + 代表元字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-嵌套分组与不记录组"><a href="#19-嵌套分组与不记录组" class="headerlink" title="19. 嵌套分组与不记录组"></a>19. 嵌套分组与不记录组</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/^https:\/\/\w{3}\.\w+\.(com|cn|net)$/</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>    <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"https://www.baidu.com"</span>    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"com"</span>    groups<span class="token punctuation">:</span> undefined    index<span class="token punctuation">:</span> <span class="token number">0</span>    input<span class="token punctuation">:</span> <span class="token string">"https://www.baidu.com"</span>    length<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 数组的第一个元素代表匹配的成功的元素，第二个代表第一个原子表中的匹配的元素，如有多个原子表则依次类推</span><span class="token number">2</span><span class="token punctuation">.</span> 如果我们想要 【www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com】 不想要【<span class="token punctuation">.</span>com】我们需要把想要的用原子组括起来<span class="token punctuation">,</span>不想要的原子组使用【<span class="token operator">?</span><span class="token punctuation">:</span><span class="token function">】括起来也就是不记录分组，但是需要在原子组里面写</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">:</span><span class="token punctuation">)</span>在外面写就不一样了<span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/^https:\/\/(\w{3}\.\w+\.(com|cn|net))$/</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [ "https://www.baidu.com", "www.baidu.com", "com" ]</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/^https:\/\/(\w{3}\.\w+\.(?:com|cn|net))$/</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ["https://www.baidu.com","www.baidu.com"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结一波：</p><p>?：匹配0个到一个，贪婪的，如果同时满足0和1就匹配1</p><p>*：匹配0个到任意，贪婪的，如果同时满足0和任意个就匹配任意个</p><p>+：匹配1个到任意，贪婪的，如果同时满足1和任意个就匹配任意个</p><p>同时以上都对一个字符起作用，如果需要对多个字符起作用，需要用原子组</p><h2 id="20-批量使用正则完成密码验证"><a href="#20-批量使用正则完成密码验证" class="headerlink" title="20. 批量使用正则完成密码验证"></a>20. 批量使用正则完成密码验证</h2><pre class="line-numbers language-js"><code class="language-js">有时候我们会遇到各种情况，比如最少一个大写字母，包括字母数字等，这时候一个正则无法满足，我们需要写多个正则<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'ab123Ddna'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token regex">/[A-Z]+/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 至少一个大写字母</span>    <span class="token regex">/\d+/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 至少一个数字</span>    <span class="token regex">/^[a-z\d]{6,9}$/i</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// </span><span class="token punctuation">]</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>等等还有至少包括下划线和数字，字母等都很简单的，可以自己练习哈<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-禁止贪婪"><a href="#21-禁止贪婪" class="headerlink" title="21. 禁止贪婪"></a>21. 禁止贪婪</h2><pre class="line-numbers language-js"><code class="language-js">我们在<span class="token operator">*</span>，<span class="token operator">+</span>，<span class="token operator">?</span>号的后面加上<span class="token operator">?</span>就代表禁止贪婪，其实很好理解<span class="token operator">?</span>本身代表<span class="token number">0</span>和<span class="token number">1</span><span class="token punctuation">,</span>而<span class="token operator">*</span>代表<span class="token number">0</span>和多，那肯定就取<span class="token number">0</span>个，而<span class="token operator">+</span>号代表<span class="token number">1</span>和多，那就取<span class="token number">1</span>，我们看例子<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'ddddd'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]??/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 禁止?贪婪就取0个 ['']</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["ddddd"]</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]+?/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['d']</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['adddd']</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]*?/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['']</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]{2,5}?/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 禁止贪婪就取少的2 ['ad']</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]{2,}?/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 原本意思是2到无限大个 现在禁止贪婪就取两个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-标签替换"><a href="#22-标签替换" class="headerlink" title="22. 标签替换"></a>22. 标签替换</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>2222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>3333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> divList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/&lt;div>([\s\S]+?)&lt;\/div>/gi</span><span class="token punctuation">;</span>divList<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> divList<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;h2 style="color: cyan"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h2>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="23-符在正则替换中的使用"><a href="#23-符在正则替换中的使用" class="headerlink" title="23.  $符在正则替换中的使用"></a>23.  $符在正则替换中的使用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>不使用$符合<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'2020/12/3'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\//g</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2020-12-3"</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'(010)-123456 (010)-789012'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\((\d{3,4})\)-(\d{5,10})/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>使用$<span class="token number">1</span>，$<span class="token number">2</span>等符号<span class="token comment" spellcheck="true">// 如果使用函数则，里面的第一个参数为匹配到的字符串，第二个参数就是第一个原子表里的内容，第三个参数代表第二个原子表里的内容</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>$<span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>$<span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">'$1-$2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $1 代表第一个原子表(括号)里的内容，$2代表第二个原子表(括号)里的内容以此类型</span>例子：<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"2020-11-24 09:30:00·2020-11-24 10:00:00;2020-11-24 11:00:00·2020-11-24 11:30:00"</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/(?:\d{4}-(?:\d{2}-(\d{2}))) (\d{2}:\d{2}):\d{2}/g</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 参数str代表原来字符串</span><span class="token keyword">let</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>$<span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "0930[24]·1000[24];1100[24]·1130[24]"</span>newStr<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">'·'</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ["0930[24]-1000[24]", "1100[24]-1130[24]"]</span><span class="token number">3</span><span class="token punctuation">.</span>使用<span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">></span>起原子组别名<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'180abc370&amp;&amp;&amp;9999'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?&lt;rewrite>\d+)/g</span><span class="token punctuation">,</span> <span class="token string">'$&lt;rewrite>~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span> $<span class="token operator">&amp;</span>符号代表符合条件的<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'a banana 123 of tree!'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/[a-z]+ ?/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["a ", "banana ", "of ", "tree"]</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\D/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 提取数字 123</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\D/g</span><span class="token punctuation">,</span> <span class="token string">'-$&amp;-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "-a-- --b--a--n--a--n--a-- -123- --o--f-- --t--r--e--e--!-"</span><span class="token number">5</span><span class="token punctuation">.</span> '$<span class="token template-string"><span class="token string">`'代表匹配的元素的前的那个字符let str = '￥1234';let reg = /\d+/g;str.replace(reg, '$`</span></span>'<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将匹配的元素用匹配前面的那个元素来替换</span><span class="token string">"￥￥"</span>将匹配到的元素替换到 匹配元素的前面<span class="token string">'￥'</span>的字符<span class="token number">6</span><span class="token punctuation">.</span> <span class="token string">"$'"</span>  代表匹配的元素的后面所有不匹配的字符<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'12a'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">"$'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'aa'</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'12ab'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">"$'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "abab"</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'12ab34'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">"$'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "ab34ab" 将12替换成12后面的'ab34' 将34替换为''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-正则exec方法和字符串match的区别"><a href="#24-正则exec方法和字符串match的区别" class="headerlink" title="24. 正则exec方法和字符串match的区别"></a>24. 正则exec方法和字符串match的区别</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 不使用g两者其实没什么区别<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'12345678'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d/</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["1", index: 0, input: "12345678", groups: undefined]</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["1", index: 0, input: "12345678", groups: undefined]</span><span class="token number">2</span><span class="token punctuation">.</span> 不使用g两者其实没什么区别<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'1234a5678'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ["1", "2", "3", "4", "5", "6", "7", "8"] 没有 index, input， groups的属性了</span><span class="token keyword">while</span><span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个打印的包括 index, input， groups的属性 这是两者的区别</span><span class="token punctuation">}</span>该方法可以统计符合正则要求的内容，在一个字符串中重复出现的次数<span class="token punctuation">,</span> 我们将其封装一个函数<span class="token keyword">function</span> <span class="token function">total</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> reg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-零宽先行断言"><a href="#25-零宽先行断言" class="headerlink" title="25. 零宽先行断言"></a>25. 零宽先行断言</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token function">语法</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">)</span> 不是一个组 只是一个条件 <span class="token number">0</span>宽就是不占位置 后面是谁 不在返回的结果中 <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'余生再无倾城色，一草一木皆相思！莫为儿孙役，余生能几何。'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/余生(?=能)/g</span><span class="token punctuation">,</span><span class="token string">'love'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 就是替换【能】字前面的【余生】</span><span class="token comment" spellcheck="true">// 余生再无倾城色，一草一木皆相思！莫为儿孙役，love能几何。"</span><span class="token comment" spellcheck="true">// 将在元前面，没有.00的后面添加.00</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`js, 100元，css, 200.00元，1.002vue, 300元`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/(\d+)(\.00)?(?=元)/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token operator">...</span>arg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>    arg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">'.00'</span><span class="token operator">+</span>    <span class="token keyword">return</span> arg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> arg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// "js, 100.00元，css, 200.00元，1.002vue, 300.00元"</span>注意：先行断言的执行步骤是这样的先从要匹配的字符串中的最左边找到第一个元 <span class="token punctuation">(</span>也就是先行断言中的表达式<span class="token punctuation">)</span>然后 再匹配其前面的表达式，若无法匹配则继续查找第二个 元 再匹配第二个 元 前面的字符串，若能匹配则匹配，符合正则的贪婪性，先执行断言，在执行匹配字符串，因为断言总是先于正则匹配先执行，那么就是必须要放在正则后面<span class="token operator">/</span>\<span class="token function">d</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">/</span> 也就是先找到a然后在匹配a前面的\d也就是数字返回结果就是a前面为数字的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26-零宽后行断言"><a href="#26-零宽后行断言" class="headerlink" title="26.  零宽后行断言"></a>26.  零宽后行断言</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;=</span><span class="token punctuation">)</span> 后行断言就是先执行匹配字符串，然后在去查看 匹配字符串的断言 那么后行断言就必须要放在正则前面<span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;=</span>a<span class="token punctuation">)</span>\d<span class="token operator">/</span> 多了个小于号 我们可以把【<span class="token operator">&lt;=</span>】看成箭头，正常的是 【<span class="token operator">=</span><span class="token operator">></span>】 现在执行顺序是箭头向右的 <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy123zcy456'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/(?&lt;=zcy)\d+/</span><span class="token punctuation">;</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["123", "456"]</span>注意：后行断言跟先行断言恰恰相反 它的执行步骤是这样的：先从要匹配的字符串中的最左端找到第一个 zcy <span class="token punctuation">(</span>也就是断言中的表达式<span class="token punctuation">)</span>然后 再匹配其后面的表达式，若无法匹配则继续查找第二个 zcy 再匹配第二个 zcy 后面的字符串，若能匹配则匹配。<span class="token keyword">let</span> tel <span class="token operator">=</span> <span class="token string">'18203709912'</span><span class="token punctuation">;</span>tel<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?&lt;=\d{7})\d{4}/</span><span class="token punctuation">,</span> <span class="token string">'****'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "1820370****"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27-零宽负向先行断言"><a href="#27-零宽负向先行断言" class="headerlink" title="27. 零宽负向先行断言"></a>27. 零宽负向先行断言</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">)</span> 后面不是什么我想取后面不是数字的字母<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy18203709912abc'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/[a-z]+(?!\d+)/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["zc", "abc"]</span><span class="token comment" spellcheck="true">// 我们想去后面不是数字的字母，且以字母结尾的</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy18203709912abc'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/[a-z]+(?!\d+)$/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个$限制的是前面条件</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["abc"]</span>限制用户名不能输入某些关键字<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcyaaaa'</span><span class="token punctuation">;</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/^(?!.*zcy.*)\w+/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从开始往后面内容不能包括'zcy'</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="28-零宽负向后行断言"><a href="#28-零宽负向后行断言" class="headerlink" title="28. 零宽负向后行断言"></a>28. 零宽负向后行断言</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">)</span> 前面不是谁  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcdefghigklmn'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/(?&lt;!i)[a-z]/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前面不是i的字母 </span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["a", "b", "c", "d", "e", "f", "g", "h", "i", "k", "l", "m", "n"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>0宽先行断言就是 后面是谁</p><p>0宽负向先行断言就是 后面不是谁</p><p>0宽后行断言 前面是谁</p><p>0宽负向后行断言 前面不是谁</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JS部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>走进JS</title>
      <link href="/2019/10/15/gotojs/"/>
      <url>/2019/10/15/gotojs/</url>
      
        <content type="html"><![CDATA[<h1 id="走进JS对象"><a href="#走进JS对象" class="headerlink" title="走进JS对象"></a>走进JS对象</h1><h2 id="1-属性的基本操作方法"><a href="#1-属性的基本操作方法" class="headerlink" title="1. 属性的基本操作方法"></a>1. 属性的基本操作方法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>①<span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 使用【.】读取属性，一般推荐使用【.】语法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>②<span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 使用【[]】读取属性,中括号里填字符的形式</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    <span class="token string">"my-age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"a b"</span><span class="token punctuation">:</span> <span class="token string">'ab'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'sm'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这种特殊字符作为属性，只能用[]来访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问不到,报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这种数字作为属性，只能用[]来访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>a b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问不到,报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'a b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这种数字作为属性，只能用[]来访问</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// index是属性名</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这时候取得是user里的index属性</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'user[index]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这时候把index当成变量，获取对象里变量的值</span><span class="token punctuation">}</span><span class="token number">4</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 给对象添加属性</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新增属性</span>user<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 新增属性，值为函数</span><span class="token number">5</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 删除对象属性</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">delete</span> user<span class="token punctuation">.</span>age <span class="token comment" spellcheck="true">// 返回true删除成功</span>user<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断当前对象是否有这个属性 返回false</span><span class="token keyword">delete</span> user <span class="token comment" spellcheck="true">// 不能删除对象 只能删除属性 返回false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-对象的引用传址"><a href="#2-对象的引用传址" class="headerlink" title="2.  对象的引用传址"></a>2.  对象的引用传址</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> user2 <span class="token operator">=</span> user1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是将user1的内存地址传给user2，并不是传值，此时user1和user2共用一个内存地址</span><span class="token comment" spellcheck="true">// 所以 将其中一个改变，另一个也会改变</span>user1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 18</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会改变a的值么</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 其实是不会的，基本类型是传值</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>   payload<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'xm'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会改变a的值么</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 其实是会的，引用类型是传址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-展开语法在对象中使用"><a href="#3-展开语法在对象中使用" class="headerlink" title="3. 展开语法在对象中使用"></a>3. 展开语法在对象中使用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 对象合并<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'zzz'</span><span class="token punctuation">}</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>user <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ...obj取得里面的结构</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> 如果两个对象中有同名属性合并之后怎么算呢<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'zzz'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">}</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>user <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {name: "zzz", age: 18}</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 如果我们调换顺序呢</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'zzz'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">}</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>user<span class="token punctuation">,</span> <span class="token operator">...</span>obj <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {age: 26, name: "zzz"}</span>总结：因为一个对象中如果存在同名属性，那么后面的会覆盖掉前面属性，所以谁在后面显示谁的属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-解构赋值新增特性"><a href="#4-解构赋值新增特性" class="headerlink" title="4. 解构赋值新增特性"></a>4. 解构赋值新增特性</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token function">如果是展开语法是对数组和对象的批量处理，那么解构语法就是对</span><span class="token punctuation">(</span>元素<span class="token punctuation">)</span>数组和对象的结构的分解和处理<span class="token punctuation">,</span> 对结构进行分解<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">.</span>  我们可以把name属性的值赋值给其他变量<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> a<span class="token punctuation">,</span> age<span class="token punctuation">:</span> b <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将name属性的值赋值给a变量，age属性的值赋值给b变量</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'z' 18</span><span class="token number">2</span><span class="token punctuation">.</span>  我们也可以把name属性的值赋值给name，age属性的值赋值给age属性<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> age<span class="token punctuation">:</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'z' 18</span>对象属性，和赋值是一样的，可以简写如下<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span> 只要你是一个对象就可以对其进行解构<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回值是对象可以解构</span><span class="token number">4</span><span class="token punctuation">.</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'z' 18</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">.</span> 我们可以接收其中几个，不用接收全部，其实就是你用哪个接收哪个<span class="token keyword">let</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'z'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>我们只接收name属性，不接收age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-严格模式中解构的差异"><a href="#5-严格模式中解构的差异" class="headerlink" title="5. 严格模式中解构的差异"></a>5. 严格模式中解构的差异</h2><pre class="line-numbers language-js"><code class="language-js">不使用严格模式的情况下<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token string">'use'</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们不用var，let，const声明会报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token function">我们使用</span><span class="token punctuation">(</span><span class="token punctuation">)</span>包起来<span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> a<span class="token punctuation">,</span> age<span class="token punctuation">:</span> b <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'z' 18 可以打印出来</span><span class="token number">3</span><span class="token punctuation">.</span>我们试试使用严格模式呢<span class="token string">"use strict"</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> a<span class="token punctuation">,</span> age<span class="token punctuation">:</span> b <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 还是会报错</span># 其实在写程序时<span class="token punctuation">,</span>最好都用严格模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-多层对象的解构操作"><a href="#6-多层对象的解构操作" class="headerlink" title="6. 多层对象的解构操作"></a>6. 多层对象的解构操作</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span>    lesson<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">'css'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> lesson <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'xm'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lesson<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { content: 'css' }</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> lesson<span class="token punctuation">:</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lesson赋值给{ content }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'xm'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'css'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-数组解构与对象解构"><a href="#7-数组解构与对象解构" class="headerlink" title="7. 数组解构与对象解构"></a>7. 数组解构与对象解构</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 正常的数组结构<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token operator">></span> <span class="token number">19</span>b<span class="token operator">=</span><span class="token operator">></span> <span class="token number">20</span><span class="token number">2</span><span class="token punctuation">.</span> 取其中某个值<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token operator">></span> <span class="token number">10</span><span class="token number">3</span><span class="token punctuation">.</span>取其中某个值<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token operator">></span> <span class="token number">11</span><span class="token number">4</span><span class="token punctuation">.</span> 数组个数，少于变量个数<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">></span> <span class="token number">19</span> <span class="token number">20</span> undefined<span class="token number">5</span><span class="token punctuation">.</span> 数组个数，少于变量个数，且赋值默认值<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">></span> <span class="token number">19</span> <span class="token number">20</span> <span class="token number">1</span><span class="token number">6</span><span class="token punctuation">.</span> 对象解构<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    character<span class="token punctuation">:</span> <span class="token string">'气人'</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> character <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> character<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'sm' '气人'</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> character<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> character<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'sm' '气人' undefined</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> character<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> character <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有值的时候取默认值，有值的时候就不取默认值了</span><span class="token comment" spellcheck="true">// 'sm' '气人' 18</span>注意对象解构和数组解构不同的是，数组换位置值会变，对象换位置不会<span class="token keyword">let</span> <span class="token punctuation">{</span> character<span class="token punctuation">,</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> character<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'sm' '气人'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-解构默认值实现配置项合并"><a href="#8-解构默认值实现配置项合并" class="headerlink" title="8. 解构默认值实现配置项合并"></a>8. 解构默认值实现配置项合并</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">creatElement</span><span class="token punctuation">(</span>option <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> backgroundColor <span class="token operator">=</span> <span class="token string">'cyan'</span> <span class="token punctuation">}</span> <span class="token operator">=</span> option<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> backgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> creatDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    creatDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    creatDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> height <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    creatDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> backgroundColor<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>creatDiv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">creatElement</span><span class="token punctuation">(</span><span class="token punctuation">{</span> width <span class="token punctuation">:</span> <span class="token number">300</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-函数参数的解构特性使用技巧"><a href="#9-函数参数的解构特性使用技巧" class="headerlink" title="9. 函数参数的解构特性使用技巧"></a>9. 函数参数的解构特性使用技巧</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 函数参数为数组<span class="token keyword">function</span> show <span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['sm', 18] = [name, age]</span><span class="token punctuation">}</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sm'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>函数参数为对象<span class="token keyword">function</span> show <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {name: 'sm', age: 18} = { name, age }</span><span class="token punctuation">}</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span> 部分解构<span class="token keyword">function</span> show <span class="token punctuation">(</span>sex<span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sex<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//sex = '女' {name: 'sm', age: 18} = { name, age }</span><span class="token punctuation">}</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-对象与原型链属性检测实例"><a href="#10-对象与原型链属性检测实例" class="headerlink" title="10. 对象与原型链属性检测实例"></a>10. 对象与原型链属性检测实例</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 使用hasOwnProperty()检测当前对象是否有这个属性(不包括原型)</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// arr中有length属性</span> arr<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span> arr<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'concat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 使用in检测当前对象是否有这个属性(包括原型)</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'length'</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'concat'</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token function">改变原型</span><span class="token punctuation">(</span>原型可以理解父亲<span class="token punctuation">)</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span> Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 为obj2设置obj1新的父亲</span> obj1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span> obj1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age'</span> <span class="token keyword">in</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-Object-assign-对象合并"><a href="#11-Object-assign-对象合并" class="headerlink" title="11. Object.assign()对象合并"></a>11. Object.assign()对象合并</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 合并两个对象，且两个对象没有相同属性的</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 往obj1里合并obj2,会改变obj1，不会改变obj2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "sm", age: 18 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// { age: 18 }</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 合并两个对象，且两个对象有相同属性的</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 往obj1里合并obj2,会改变obj1，不会改变obj2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "sm", age: 18 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// { age: 18 }</span>也就是说如果对象存在相同属性，后面的对象属性会覆盖前面的对象的属性，这和我们前面说的也是符合的，同名属性后者会覆盖前面的<span class="token number">3</span><span class="token punctuation">.</span>其实Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的参数可以很多的，并不只是局限于合并两个对象，可以合并多个对象<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>    sex<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 往obj1里合并obj2,会改变obj1，不会改变obj2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "sm", age: 18, sex: '女' }</span><span class="token number">4</span><span class="token punctuation">.</span>上面我们也可以这样来写<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>    sex<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> sex<span class="token punctuation">:</span> 女 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 往obj1里合并obj2,会改变obj1，不会改变obj2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "sm", age: 18, sex: '女' }</span><span class="token number">5</span><span class="token punctuation">.</span>我们也可以使用【<span class="token operator">...</span>】展开运算符合并对象<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>    sex<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>obj1<span class="token punctuation">,</span>    <span class="token operator">...</span>obj2<span class="token punctuation">,</span>    <span class="token operator">...</span>obj3<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// {name: "sm", age: 18, sex: "女"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-获取对象的值与属性"><a href="#12-获取对象的值与属性" class="headerlink" title="12. 获取对象的值与属性"></a>12. 获取对象的值与属性</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">.</span> 获取对象的所有键Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>返回来一个对象中所有【键】组成的数组<span class="token keyword">let</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["name", "age"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "xm", age: 18 },不会改变原对象</span><span class="token number">2</span><span class="token punctuation">.</span>获取对象的所有【属性值】，Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>返回来一个对象中所有【属性值】组成的【数组】<span class="token keyword">let</span> values <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["xm", 18]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "xm", age: 18 },不会改变原对象</span><span class="token number">3</span><span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>返回来一个数组，数组元素是由对象中【属性】与【属性值】组成的数组，属于一个二维数组<span class="token keyword">let</span> entries <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [["name", "xm"], ["age", 18]]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>entries<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以自己去控制台打印下</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "xm", age: 18 },不会改变原对象</span>总结：以上三个方法返回来的值都有迭代属性【iterator】，所以可以使用<span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span>来循环，<span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span>可以迭代对象<span class="token number">1</span><span class="token punctuation">.</span> 之前已经介绍过了，<span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span>不能遍历字面量对象<span class="token punctuation">,</span>因为没有迭代属性【iterator】# Uncaught TypeError<span class="token punctuation">:</span> obj is not iterable<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span>遍历对象属性<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// name age</span><span class="token punctuation">}</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span>遍历对象属性值<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'xm' 18</span><span class="token punctuation">}</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span>遍历对象<span class="token punctuation">,</span>属性与属性值<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// name xm,  age 18</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-对象的浅拷贝多种操作方法"><a href="#13-对象的浅拷贝多种操作方法" class="headerlink" title="13. 对象的浅拷贝多种操作方法"></a>13. 对象的浅拷贝多种操作方法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xm'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {name: "zcy"} {name: "zcy"}</span><span class="token comment" spellcheck="true">// 此时我们改变obj1的name，obj2也会跟着变（第二节讲过了，不懂回看下)</span># 那么我想只改变其中的一个不想改变另一个怎么办呢？看下面例子<span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xm'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj4 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> obj3<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时是把obj1的值给复制了</span>那我们改变其中obj3中的name，obj会变么obj3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "zcy"}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "xm" }</span><span class="token comment" spellcheck="true">// 这两个对象看起来值一样，但是确是不同的对象，因为obj4是重新声明的，会在内存中重新开辟一块内存空间</span><span class="token number">2</span><span class="token punctuation">.</span> 上面对象是只有一个属性我们可以直接那样写，但是如果属性值很多我们还要一个一个写显然是不更灵活的，那么我们采用循环<span class="token keyword">let</span> obj5 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'女'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj6 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们先定义一个空对象，会在内存中重新开辟一块空间</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj5<span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj6<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj5<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "xm", age: 18, sex: "女" }</span>那么我们现在改变其中一个对象属性，另一个对象属性还会变么<span class="token punctuation">,</span>并没有变obj5<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "xm", age: 18, sex: "女" }</span><span class="token number">3</span><span class="token punctuation">.</span>我们也可以使用Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> obj7 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'女'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj8 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj7<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj8<span class="token punctuation">)</span><span class="token punctuation">;</span>obj7<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj7被改变了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj8没被改变</span><span class="token number">4</span><span class="token punctuation">.</span>我们也可以使用展开运算符<span class="token keyword">let</span> obj9 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'女'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj10 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj9 <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj10<span class="token punctuation">)</span><span class="token punctuation">;</span>obj9<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj9<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj9被改变了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj10<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj10没被改变</span>总而言之浅拷贝就是复制的值不能有对象，比如说name属性不能是个对象<span class="token keyword">let</span> obj11 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj12 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj11 <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj12<span class="token punctuation">)</span><span class="token punctuation">;</span>obj11<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj11<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj11被改变了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj12<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj12没被改变</span>obj11<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们改变了Obj11的user的name属性，我们看看obj12的name属性会不会变</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj11<span class="token punctuation">,</span> obj12<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "zcy", age: 18, sex: "女", user: { name: "aaa" } };</span><span class="token function">事实证明是两个对象的值是会变得，那么也就是说，如果使用以上的任何一种方式来，进行复制对象，那么都是浅拷贝，比如对象里的属性值还为对象这种</span><span class="token punctuation">(</span>多层次的对象<span class="token punctuation">)</span>，复制值的时候就是传地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-深拷贝多层次分析"><a href="#14-深拷贝多层次分析" class="headerlink" title="14. 深拷贝多层次分析"></a>14. 深拷贝多层次分析</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>深拷贝函数<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> tempObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tempObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>  obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tempObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只改变了自己</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有改变</span><span class="token number">2</span><span class="token punctuation">.</span>但是我们改写一下obj<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> tempObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tempObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>  obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tempObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 克隆之后的a就不是一个数组的，而是一个对象这样就不对了</span>我们需要改进一下<span class="token number">3</span><span class="token punctuation">.</span> 改进区分数组与对象<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> tempObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tempObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>  obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tempObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>现在我们打印结果发现里面的值是一样的<span class="token number">4</span><span class="token punctuation">.</span> 改进保持顺序一致<span class="token punctuation">,</span>使用 <span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span><span class="token comment" spellcheck="true">//因为Object.entries(obj)返回来的顺序是根据原来的对象顺序是一致的，所以我们使用这个保持和原来的对象顺序一致</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// let tempObj = Array.isArray(obj) ? [] : {};</span>    <span class="token keyword">let</span> tempObj <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">:</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tempObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-使用构造函数创建数据"><a href="#15-使用构造函数创建数据" class="headerlink" title="15. 使用构造函数创建数据"></a>15. 使用构造函数创建数据</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 构造函数创建对象<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>对象的constructor指向它的构造函数为Object，也可以看对象原型上的方法哦<span class="token number">2</span><span class="token punctuation">.</span>构造函数创建数字<span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对象，可以查看number类型上面的所有方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1我们字面量创建的时候就是相当于，使用构造函数创建在使用valueOf获取数值的</span><span class="token number">3</span><span class="token punctuation">.</span>构造函数创建字符串<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'啦啦啦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对象，可以查看string类型上面的所有方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span>构造函数创建boolean值<span class="token keyword">let</span> F <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>F<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 可以打印查看boolean所有的方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>F<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'false' 字符串false</span>可以看到boolean只有两个方法<span class="token number">5</span><span class="token punctuation">.</span>构造函数创建日期<span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 时间戳</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-获取对象的属性特征"><a href="#16-获取对象的属性特征" class="headerlink" title="16. 获取对象的属性特征"></a>16. 获取对象的属性特征</h2><pre class="line-numbers language-js"><code class="language-js"># <span class="token number">1</span><span class="token punctuation">.</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span>obj为需要获取的特征对象，attr为该对象属性该方法可以获取，对象某一属性特征的描述obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">"sm"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 该属性的值</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 属性是否可以重新配置特征，比如删除,新增属性</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 属性是否可以遍历，或者是可以理解使用Object.keys()能不能读取出来内容</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 是否可写，也就是是否可以修改，为true代表可以修改</span><span class="token punctuation">}</span># <span class="token number">2</span><span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>obj为需要获取的特征对象该方法可以获取，对象所有属性特征的描述obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-灵活的控制属性的特征"><a href="#17-灵活的控制属性的特征" class="headerlink" title="17.  灵活的控制属性的特征"></a>17.  灵活的控制属性的特征</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Object.defineProperty(obj, attr, option)</span>obj为需要设置的对象，attr为该对象的属性，option为设置该属性的特征对象该方法可以改变，对象某一属性的特征obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 修改属性特征【writable: false】属性值不能修改</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    writable<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 设置不可修改</span><span class="token punctuation">}</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>我们设置name属性特征为不可修改，设置完之后，我们在修改name属性<span class="token punctuation">,</span>在打印obj发现没有修改成功<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 修改属性特征【enumerable: false】属性值不能被遍历</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 设置不可被遍历</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ["age"]</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [18]</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ [ "age", 18 ] ]</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 修改属性特征【configurable: false】属性值不能被删除</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 设置不能被删除</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>我们发现，并没有删除成功当我们把configurable设置为<span class="token boolean">false</span>，我们不能在重新配置也就是重新使用，下面方法，否则会报错<span class="token punctuation">,</span>如下图Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 设置不能重新配置</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​                                     <a href="https://imgbed.cn"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/638671f5-b5d7-49f7-b3c3-5ed8e3e4da35.png" alt="imgbed.cn图床"></a></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Object.defineProperties(obj,option);</span>obj为需要设置属性特征的对象，option为各个属性组成的配置，该方法为对多个属性进行设置特征Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> <span class="token string">'ll'</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        writable<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-阻止向对象中添加属性"><a href="#18-阻止向对象中添加属性" class="headerlink" title="18. 阻止向对象中添加属性"></a>18. 阻止向对象中添加属性</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. Object.preventExtensions(obj);  </span>英文意思：prevent Extensions 阻止扩展使用该方法设置对象后，则该对象不允许添加新的属性<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们企图添加sex属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {name: "sm", age: 18} 没有添加成功，</span><span class="token comment" spellcheck="true">// 2. Object.isExtensible(obj);</span>该方法返回boolean值，判断是否能够添加属性，如果为真则能添加属性，如果为假添加不了属性例如<span class="token punctuation">:</span> 我们可以使用下面这样进行判断<span class="token punctuation">,</span>如果返回<span class="token boolean">true</span>，则说明，对象没有被保护则可扩展（进行添加属性）<span class="token keyword">if</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们添加sex属性 </span><span class="token punctuation">}</span># 注意：使用Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法只是不能添加，但是可以修改和删除obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>以上方法方法，对象是会改变的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-Object-seal"><a href="#19-Object-seal" class="headerlink" title="19. Object.seal()"></a>19. Object.seal()</h2><pre class="line-numbers language-js"><code class="language-js">该方法为封闭对象，所谓封闭对象，就是不允许添加，删除对象属性，也不可以修改对象特征，但可以修改对象值<span class="token keyword">let</span> user<span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用此操作相当于改变了对象的特征【configurable】为【false】不信的话可打印对象特征查</span>obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>当我么使用Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>之后，我们添加和删除对象对象属性，对象是不会改变的<span class="token punctuation">,</span>相当于把【configurable】变为<span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-Object-isSealed"><a href="#20-Object-isSealed" class="headerlink" title="20. Object.isSealed()"></a>20. Object.isSealed()</h2><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">isSealed</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断对象是否是封闭对象</span>该方法返回boolean值，如果为<span class="token boolean">true</span>则说明该对象已经被封闭，为<span class="token boolean">false</span>则说明该对象没有被封闭<span class="token keyword">let</span> user<span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">isSealed</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 如果对象没封闭我们添加属性</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Object<span class="token punctuation">.</span><span class="token function">isSealed</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    user<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'女'</span>；<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-Object-freeze"><a href="#21-Object-freeze" class="headerlink" title="21. Object.freeze()"></a>21. Object.freeze()</h2><pre class="line-numbers language-js"><code class="language-js">冻结对象<span class="token keyword">let</span> user<span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">.</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印下未冻结前的对象特征</span><span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token punctuation">{</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        writable<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token punctuation">{</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> <span class="token string">"sm"</span><span class="token punctuation">,</span>        writable<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印下冻结后的对象特征</span><span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token punctuation">{</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token punctuation">{</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> <span class="token string">"sm"</span><span class="token punctuation">,</span>        writable<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>其实就是改变了【configurable】，【writable】属性，所以冻结之后就是不能修改属性值，和不能删除属性，不能重新配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-Object-isFrozen"><a href="#22-Object-isFrozen" class="headerlink" title="22. Object.isFrozen()"></a>22. Object.isFrozen()</h2><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>返回boolean，<span class="token boolean">true</span> 说明该对象被冻结了 <span class="token boolean">false</span>说明该对象没被冻结<span class="token keyword">let</span> user<span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="23-使用访问器保护数据set-get"><a href="#23-使用访问器保护数据set-get" class="headerlink" title="23. 使用访问器保护数据set get"></a>23. 使用访问器保护数据set get</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">let</span> user<span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">!==</span> number <span class="token operator">||</span> number <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> number <span class="token operator">></span> <span class="token number">110</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age    <span class="token punctuation">}</span><span class="token punctuation">}</span>user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token number">2</span><span class="token punctuation">.</span> 访问器与普通赋值方式的的优先级比较<span class="token keyword">let</span> user<span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'sm' } 最终发现返回user丢失了age属性，说明访问器比普通赋值方式的的优先级高</span><span class="token number">3</span><span class="token punctuation">.</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>给属性定义<span class="token keyword">get</span>， <span class="token keyword">set</span>obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-使用Proxy代理控制对象"><a href="#24-使用Proxy代理控制对象" class="headerlink" title="24. 使用Proxy代理控制对象"></a>24. 使用Proxy代理控制对象</h2><pre class="line-numbers language-js"><code class="language-js">代理相当于中介<span class="token punctuation">,</span><span class="token number">1</span>其实还是访问原对象，只不过多了中介，比属性访问器多了两个参数<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> game<span class="token punctuation">:</span> <span class="token string">'LOL'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>property<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>property<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>property<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        object<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> valuue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proxy<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-使用代理Proxy控制函数"><a href="#25-使用代理Proxy控制函数" class="headerlink" title="25. 使用代理Proxy控制函数"></a>25. 使用代理Proxy控制函数</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> num <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>factorial<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> argus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> argus<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>factorial<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">bind</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> argus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> argus<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// func 代表原函数 argus， obj 代表上下文对象就是this， 代表传过来的参数不过是以数组形式存在,因为apply是数组传参所以就是数组形式</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proxy<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果这样使用这时的obj就是window了，不传默认undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26-数组使用代理拦截操作"><a href="#26-数组使用代理拦截操作" class="headerlink" title="26. 数组使用代理拦截操作"></a>26. 数组使用代理拦截操作</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> array<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">'你所获取得值暂时没有定义哦！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>proxy<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>proxy<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27-JSON数据"><a href="#27-JSON数据" class="headerlink" title="27. JSON数据"></a>27. JSON数据</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token function">转为JSON格式语法：任何格式</span><span class="token punctuation">(</span>数组，对象，字符串等<span class="token punctuation">)</span>都可以变为JSON格式JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> movie<span class="token punctuation">:</span> <span class="token string">'调音师'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "{"movie":"调音师"}"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string 字符串类型</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解析JSON对象</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转为对象</span><span class="token comment" spellcheck="true">// 第二个参数可以为回调函数</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="28-JSON序列化"><a href="#28-JSON序列化" class="headerlink" title="28. JSON序列化"></a>28. JSON序列化</h2><pre class="line-numbers language-js"><code class="language-js">序列化 <span class="token punctuation">(</span>Serialization<span class="token punctuation">)</span>是将对象的状态信息转换为可以存储或传输的形式的过程<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> job<span class="token punctuation">:</span> <span class="token string">'teacher'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> movie<span class="token punctuation">:</span> <span class="token string">'调音师'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'job'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示只留一个job属性</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'job'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第三个参数表示Tab字表位，格式</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第二个参数为null或者不写就是保留全部</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JS部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex布局</title>
      <link href="/2019/09/28/flex/"/>
      <url>/2019/09/28/flex/</url>
      
        <content type="html"><![CDATA[<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><h1 id="一、flex-container的属性"><a href="#一、flex-container的属性" class="headerlink" title="一、flex container的属性"></a>一、flex container的属性</h1><h2 id="1-flex-items"><a href="#1-flex-items" class="headerlink" title="1. flex items"></a>1. flex items</h2><ul><li>默认沿着主轴方向从 main start 到main end方向 依次排列</li></ul><h2 id="2-justify-content"><a href="#2-justify-content" class="headerlink" title="2. justify-content"></a>2. justify-content</h2><ul><li>决定了flex item在main axis上的对齐方式</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> // 默认值 与main start对齐<span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> // 与main end对齐<span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> // 居中对齐<span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span> // space空间的意思 flex item 靠main start 和main end两边 剩下的<span class="token number">0</span>或多个平均在中间显示<span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span> // flex item 距离main start， main end两边的间隔 等于 flex item之间的间隔的一半<span class="token property">justify-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span> // flex item均匀的间隔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-flex-direction"><a href="#3-flex-direction" class="headerlink" title="3. flex-direction"></a>3. flex-direction</h2><ul><li>决定了主轴的方向</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span> // 默认值row 水平方向从左到右<span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span> // 垂直方向从上到下<span class="token property">flex-direction</span><span class="token punctuation">:</span> row-reverse<span class="token punctuation">;</span> // 水平方向从右到左<span class="token property">flex-direction</span><span class="token punctuation">:</span> column-reverse<span class="token punctuation">;</span> // 垂直方向从下到上 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-align-items"><a href="#4-align-items" class="headerlink" title="4. align-items"></a>4. align-items</h2><ul><li>决定了flex items在cross axis上的对齐方式</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">align-items</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span> // 默认值 在弹性布局在和stretch（拉紧）效果一样 <span class="token property">aligin-items</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span> // 当flex items在cross axis方向的size为auto时，会自动拉伸至填充flexcontainer类似一柱擎天效果。其实就是不设置flex item的高度会引起这个效果<span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> // 与cross start对齐<span class="token property">align-items</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> // 与cross end对齐<span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> // cross中心点对齐<span class="token property">align-items</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span> // 与基准线对齐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-flex-wrap"><a href="#5-flex-wrap" class="headerlink" title="5. flex-wrap"></a>5. flex-wrap</h2><ul><li>决定了flex container是单行还是多行</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 默认情况下，所有的flex items都会在同一行显示 */</span><span class="token property">flex-wrap</span><span class="token punctuation">:</span> no-wrap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 默认值no-wrap 单行 */</span><span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 多行 */</span><span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap-reverse<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 多行 对比 wrap,cross start 与cross end相反 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-flex-flow"><a href="#6-flex-flow" class="headerlink" title="6. flex-flow"></a>6. flex-flow</h2><ul><li>flex-direction || flex-wrap的缩写</li></ul><pre class="line-numbers language-css"><code class="language-css">可以省略，顺序任意<span class="token property">flex-flow</span><span class="token punctuation">:</span> flex-end wrap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-align-content"><a href="#7-align-content" class="headerlink" title="7. align-content"></a>7. align-content</h2><ul><li>决定多行flex items在cross axis 上的对齐方式用法与justifiy-content类似</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">align-content</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span> // <span class="token punctuation">(</span>默认值<span class="token punctuation">)</span> 与align-items的stretch类似<span class="token property">align-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> // 与cross start对齐<span class="token property">align-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> // 与cross end对齐 相当于沿着cross axis轴 平移到cross start<span class="token property">align-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> // 居中对齐<span class="token property">align-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span> // space空间的意思 flex item 靠cross start 和cross end两边 剩下的<span class="token number">0</span>或多个平均在中间显示<span class="token property">align-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span> // flex item cross start， cross end两边的间隔 等于 flex item之间的间隔的一半<span class="token property">align-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span> // flex item均匀的间隔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-开启flex布局"><a href="#8-开启flex布局" class="headerlink" title="8. 开启flex布局"></a>8. 开启flex布局</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token number">1.</span> <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> // 开启之后是块级元素<span class="token number">2.</span> <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span> // 开启之后是行内元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="二、flex-item的属性"><a href="#二、flex-item的属性" class="headerlink" title="二、flex item的属性"></a>二、flex item的属性</h1><h2 id="1-order"><a href="#1-order" class="headerlink" title="1. order"></a>1. order</h2><ul><li>order 决定了 flex items 的排布顺序</li><li>默认值是 0 </li><li>可以设置任意整数（正整数、负整数、0），值越小就越排在前面</li></ul><h2 id="2-align-self"><a href="#2-align-self" class="headerlink" title="2. align-self"></a>2. align-self</h2><ul><li>可以通过 <strong>aligin-self</strong> 覆盖 <strong>flex container</strong>设置的align-items属性</li><li>auto(默认值) 遵循 <strong>flex container</strong>设置的align-items属性</li><li>stretch、flex-start、flex-end、center、baseline、效果跟align-items一致，只不够是单独设置某一个item的排列方式</li></ul><h2 id="3-flex-grow"><a href="#3-flex-grow" class="headerlink" title="3. flex-grow"></a>3. flex-grow</h2><ul><li>grow 生长、成长的意思</li><li>flex-grow决定了<strong>flex items</strong>如何扩展</li><li>可以设置任意非负数字（正小数、正整数、0），默认值是0</li><li>当flex container在main axis方向上有剩余size时后，flex-grow属性才会生效</li><li>如果所有flex items的flex-grow总和sum 超过 1，每个flex item扩展 size 为 *<em>flex container *</em> 剩余的size / sum * flex-grow 其实就是平分暂几份</li><li>如果所有flex items的flex-grow总和sum 小于 1，每个flex item扩展 size 为  *<em>flex container *</em> 剩余的size * flex-grow</li><li>flex items 扩展后的最终size不能超过 max-width \ max-height</li></ul><h2 id="4-flex-shrink"><a href="#4-flex-shrink" class="headerlink" title="4. flex-shrink"></a>4. flex-shrink</h2><ul><li>shrink 收缩的意思</li><li>flex-shrink决定了flex items 如何收缩</li><li>可以设置任意非负数字（正小数、正整数、0），默认值是1</li><li>当flex items 在main axis方向上超过了flexcontainer的size， flex-shrink属性才会生效</li><li>如果所有flex items 的flex-shrink总和超过1，每个 flex item 收缩的size为 flex items超出flex container的 <strong>(size / sum)* flex-shrink</strong></li><li>如果所有flex items 的flex-shrink总和小与1， 每个 flex item 收缩的size为 flex items超出flex container的size * flex-shrink会收缩不完</li><li>flex items 收缩后的最终size 不能小于 min-width / min-height</li></ul><h2 id="5-flex-basis"><a href="#5-flex-basis" class="headerlink" title="5. flex-basis"></a>5. flex-basis</h2><ul><li>设置flex items在main axis方向上的base size</li><li>auto (默认值) 、具体的宽度数值 原来的宽度是多少就是多少<ul><li>flex-basis: auto;</li></ul></li><li>同时设置 width 和flex-basis flex-basis起作用<ul><li>flex-basis: 200px;</li><li>width: 100px;</li><li>最终flex-items宽度为200px</li></ul></li><li>决定flex items最终size（大小）因素的优先级<ul><li>max-width / max-height / min-width/ min-height</li><li>flex-basis</li><li>width / height</li><li>内容撑起的宽度，高度</li></ul></li></ul><h2 id="6-flex"><a href="#6-flex" class="headerlink" title="6. flex"></a>6. flex</h2><ul><li>flex是一个缩写属性，flex-grow || flex-shrink || flex-basis的简写，flex属性可以指定1个，2个，或3个值</li><li>单值语法：值必须为以下其中一个：<ul><li>一个无单位数（number类型）会被当成<strong>flex-grow</strong>的值</li><li>一个有效的宽度（width）值 带单位的例如px 会被当成<strong>flex-basis</strong>的值</li><li>关键字none，auto或initial</li></ul></li><li>双值语法：<ul><li>第一个值必须为无单位的值，并且第一个值会被当作<strong>flex-grow</strong>属性的值</li><li>第二个值必须为以下之一：<ul><li>一个无单位数会被当作<strong>flex-shrink</strong>的值</li><li>一个有效宽度值，带单位的，当作<strong>flex-basis</strong>的值</li></ul></li></ul></li><li>三值语法：<ul><li>第一个值必须是无单位的，当作<strong>flex-grow</strong>属性的值</li><li>第二个值必须是无单位的，当作<strong>flex-shrink</strong>属性的值</li><li>第三个之必须是有单位的有效值，当作<strong>flex-basis</strong>属性的值</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CSS部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2019/09/28/promise/"/>
      <url>/2019/09/28/promise/</url>
      
        <content type="html"><![CDATA[<h1 id="十二-异步编程之Promise-async-await"><a href="#十二-异步编程之Promise-async-await" class="headerlink" title="十二. 异步编程之Promise/async/await"></a>十二. 异步编程之Promise/async/await</h1><h1 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h1><h2 id="1-区分实例对象与函数对象"><a href="#1-区分实例对象与函数对象" class="headerlink" title="1. 区分实例对象与函数对象"></a>1. 区分实例对象与函数对象</h2><ul><li>实例对象：new 关键字产生的对象，成为实例对象，简称对象</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> Person <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个peroson1 就是构造函数Person的实例对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>函数对象：将函数作为对象使用时，简称为函数对象</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token function">我们知道一般小括号</span><span class="token punctuation">(</span><span class="token punctuation">)</span>左边就是函数<span class="token keyword">function</span> Person <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person是一个函数Person<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// 对象才可以使用点【.】点的左边是对象 此时Person的角色是对象 这代表Person也是个对象</span><span class="token comment" spellcheck="true">// 所以Person既是对象也是函数 所以Person是函数对象</span>所以我们平时叫对象都是实例对象，因为实例对象简称对象。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-两种类型的回调函数"><a href="#2-两种类型的回调函数" class="headerlink" title="2. 两种类型的回调函数"></a>2. 两种类型的回调函数</h2><ul><li><p>同步回调</p><ul><li><p>理解：立即执行，完全执行完了才结束，不会放入回调队列中</p></li><li><p>例子：数组遍历相关的回调函数，Promise的excutor函数</p></li><li><pre class="line-numbers language-js"><code class="language-js">回调函数：<span class="token number">1</span><span class="token punctuation">.</span> 我自己定义的 <span class="token number">2</span><span class="token punctuation">.</span>并且我没有调用 <span class="token number">3</span><span class="token punctuation">.</span> 但是最后还是执行了<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 遍历回调</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'回调函数后执行'</span><span class="token punctuation">)</span>上面执行打印结果就是 <span class="token number">1</span>、<span class="token number">3</span>、<span class="token number">5</span> <span class="token string">'回调函数后执行'</span> 说明forEach里的回到函数 是同步回调<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li><p>异步回调</p><ul><li><p>理解：不会立即执行，会放到回调队列中执行</p></li><li><p>例子：定时器回调、ajax回调、Promise成功与失败回调</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout 回调函数'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout之后执行'</span><span class="token punctuation">)</span>上面执行打印结果就是 <span class="token string">'setTimeout之后执行'</span> <span class="token string">'setTimeout 回调函数'</span> 说明setTimeout里的回到函数 是异步回调<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="3-js里的error处理"><a href="#3-js里的error处理" class="headerlink" title="3. js里的error处理"></a>3. js里的error处理</h2><ul><li><p>错误的类型</p><ul><li><p>Error: 所有错误的父类型</p></li><li><p>ReferenceError: 引用变量不存在 </p><ul><li><pre class="line-numbers language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印一个未定义的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>TypeError：数据类型不正确的错误</p><ul><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Cannot read property 'name' of null</span>说明要写读取这个属性 必须是一个对象 而你不是对象是<span class="token keyword">null</span> 类型错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>RangeErroe：数据值不允许在其所允许的范围内</p><ul><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> show <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 无限制递归调用</span><span class="token punctuation">}</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Uncaught RangeError: Maximum call stack size exceeded</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>SystaxError：语法错误</p></li></ul></li><li><p>错误处理</p><ul><li><p>捕获错误：try…catch</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// TypeError: Cannot read property 'name' of undefined</span>    <span class="token comment" spellcheck="true">// at &lt;anonymous>:3:19</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 如果没有对错误进行捕获处理 那么此行代码不会执行 我们上面对错误进行处理了所以 可以执行此行代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>抛出错误：throw error</p><ul><li>我们自己可以去抛出异常</li><li>throw.error(message)</li></ul></li></ul></li></ul><h1 id="二、什么是Promise？"><a href="#二、什么是Promise？" class="headerlink" title="二、什么是Promise？"></a>二、什么是Promise？</h1><h2 id="1-promise是什么？"><a href="#1-promise是什么？" class="headerlink" title="1. promise是什么？"></a>1. promise是什么？</h2><ul><li>抽象表达<br>promise是js进行异步编程新的解决方案</li><li>具体表达<ul><li>从语法上来说Promise是一个构造函数</li><li>从功能上来说promise对象(这里的对象是实例对象)封装一个异步操作，并可以获取其结果</li></ul></li></ul><h2 id="2-promise相比旧的方案的好处"><a href="#2-promise相比旧的方案的好处" class="headerlink" title="2. promise相比旧的方案的好处?"></a>2. promise相比旧的方案的好处?</h2><ul><li>指定回调函数的方式更灵活</li><li>旧的: 启动<code>异步任务前</code>(执行器函数里的异步任务)指定回调函数(then，catch回调函数)</li><li>promise: 启动异步任务，返回promise对象，给promise对象绑定回调函数(甚至可以在异步任务结束后指定回调函数) 数据不会丢掉</li><li>支持链式调用，链式调用可以解决回调地狱问题。<ul><li>什么是回调地狱?<br>回调函数嵌套调用，外部回调函数异步执行的结果是嵌套的回调函数执行的条件。</li><li>回调地狱的特点?<ul><li>不便于阅读/不便于异常处理</li><li>解决方案promise链式调用。</li></ul></li><li>终极解决方案?<br>async，await</li></ul></li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* executor执行器 立即执行这个函数 这个函数接收两个参数 */</span>Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then方法<span class="token punctuation">:</span> <span class="token punctuation">(</span>onResolved<span class="token punctuation">,</span>onRejected<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>onResolved函数<span class="token punctuation">:</span><span class="token function">成功的回调函数</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>onRejected函数<span class="token punctuation">:</span><span class="token function">失败的回调函数</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">的语法糖，相当于then</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>注意：<span class="token template-string"><span class="token string">`then方法返回一个新的Promise 且这个Promise 相当于内部new了一个Promise.resolve(params) params就是then方法里面的返回值 默认返回值undefined 可以手动return 返回值`</span></span>Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">catch</span>方法                                    onRejected函数<span class="token punctuation">:</span><span class="token function">失败的回调函数</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  产生一个成功的值为2promise对象Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  产生一个失败的值为<span class="token number">3</span>的promise对象<span class="token keyword">const</span> pAll <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p1,p2,p3代表promise对象, pAll是返回一个新的promise对象</span><span class="token keyword">const</span> pRace <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回第一个完成请求的promise(race比赛的意思谁先完成返回那个promise，不管请求成功还是失败返回那个第一名)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-如何改变promise状态"><a href="#3-如何改变promise状态" class="headerlink" title="3. 如何改变promise状态?"></a>3. 如何改变promise状态?</h2><ul><li>promise的状态改变<ul><li>resolve(value)如果当前是<code>pending(即将发生的,在等待，未确定)</code>变为<code>resolved</code></li><li>reject(reason)如果当前是<code>pending(即将发生的,在等待，未确定)</code>变为<code>rejected</code></li><li>只有这两种状态改变，状态改变不可逆，一个promise对象只能改变一次，无论成功与失败，都会有一个结果数据，成功数据一般vulue（或res/result）,失败的结果一般是reason（err）</li><li>抛出异常 throw new Error（’出错了’）如果当前是pending就会变成rejected，那么reason就是error，也可以抛3，throw 3</li></ul></li></ul><p>一个Promise可以绑定多个then成功或者失败的回调，可以做不同的事情<br>.then也是同步任务.then里的函数是异步</p><h2 id="4-promise-then-返回的新promise的结果状态由什么决定"><a href="#4-promise-then-返回的新promise的结果状态由什么决定" class="headerlink" title="4. promise.then() 返回的新promise的结果状态由什么决定"></a>4. promise.then() 返回的新promise的结果状态由什么决定</h2><ul><li><p>简单表达: 由then()指定的回调函数执行的结果决定</p></li><li><p>详细表达:</p><ul><li>如果抛出异常 新promise变为rejected，reason为抛出的异常如果返回的是非promise的任意值，新promise变为resolved value为返回的值。</li><li>如果返回的是另一个新promise，此promise的结果就会变成新promise的结果</li></ul></li><li><p>总结: 就是说，由调用.then的promise对象决定.then指定的回调函数到底执行哪个函数（resolve，reject），.then返回的promise由函数执行的结果来决定。</p></li></ul><h2 id="5-promise如何串连多个操作任务"><a href="#5-promise如何串连多个操作任务" class="headerlink" title="5. promise如何串连多个操作任务?"></a>5. promise如何串连多个操作任务?</h2><ul><li><p>promise的<code>.then()</code>返回一个新的promise，可以看成then()的链式调用。</p></li><li><p>通过.then的链式调用串连多个同步/异步任务（异步需要return一个promise里）</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="6-什么是promise异常传透"><a href="#6-什么是promise异常传透" class="headerlink" title="6. 什么是promise异常传透?"></a>6. 什么是promise异常传透?</h2><ul><li><p>当使用promise<code>.then</code>链式调用时，可以在最后指定失败的回调。</p></li><li><p>前面任何操作出了异常，都会传到最后失败的回调中，处理未写的失败的回调函数（onRejected）相当于默认写了  reason =&gt; { throw reason }括号不能去，去了相当于return throw reason</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 失败的回调 他会一直向下查找 是否有 处理异常的回调</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 大家会有个疑问 为什么会一直向下传递呢</span><span class="token comment" spellcheck="true">// 正常情况下 如果某一个.then里写了处理 异常的回调函数，那么就不会继续往下传</span><span class="token comment" spellcheck="true">// 其实如果不写then的第二个参数，也就是onRejected 内部会自动处理的，相当于下面</span><span class="token comment" spellcheck="true">// 依次向下逐级传递</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token punctuation">,</span>      err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> err <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> err <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">'err'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="7-如何中断promise链"><a href="#7-如何中断promise链" class="headerlink" title="7. 如何中断promise链?"></a>7. 如何中断promise链?</h2><ul><li><p>当使用promise的then链式调用时，在中间中断，不在调用后面回调函数。</p></li><li><p>方法: 在回调函数中返回一个pending状态的promise对象 return Promise (()=&gt;{})这个就属于处于pending状态的promise</p></li><li><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">'err'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 打印上面代码我们会发现 执行catch里的回调函数之后，还会执行下面的then方法，我们不想这样，我们期待的是，当执行catch里的回调函数之后，不想执行下面的then了，那么该怎么办</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">'err'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 我们只需要返回一个pending状态的promise就可以终止</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul><h1 id="三、Promise详解"><a href="#三、Promise详解" class="headerlink" title="三、Promise详解"></a>三、Promise详解</h1><h2 id="1-图片加载之任务队列【宏任务】"><a href="#1-图片加载之任务队列【宏任务】" class="headerlink" title="1. 图片加载之任务队列【宏任务】"></a>1. 图片加载之任务队列【宏任务】</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    image<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>    image<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    image<span class="token punctuation">.</span>onerror <span class="token operator">=</span> reject<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 放入相对路径 要在html文件中运行哦，在控制台会报错找不到图片</span><span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">'../image/star.jfif'</span><span class="token punctuation">,</span>           image <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'图片加载完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'图片加载失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开始执行加载图片函数'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>先把这个函数交给文件处理模块，等处理完，再放到任务队列中，主线程代码（从上到下执行完代码后），再去任务队列执行任务，不断地轮询所以说先打印的【开始执行加载图片函数】在打印图片加载成功或失败# 执行顺序在定时器前面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-定时器之任务队列【宏任务】"><a href="#2-定时器之任务队列【宏任务】" class="headerlink" title="2. 定时器之任务队列【宏任务】"></a>2. 定时器之任务队列【宏任务】</h2><pre class="line-numbers language-js"><code class="language-js">js有专门处理定时器的模块（定时器管理模块），先执行主线程任务，如果遇到定时器任务，放入专门处理定时器任务的模块，等定时器时间到了，再放入任务队列中，等到主线程任务执行完之后，再去任务队列里面找轮询执行任务<span class="token punctuation">,</span>在此期间如果定时器设置500ms之后执行，但是主线程执行代码时间超过500ms，这时候定时器任务会被放入到任务队列（把console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>放到任务对立里），那么也要等主线程执行完毕之后，才会去轮询任务队列<span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'先执行主线程'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行顺序是先执行主线程代码</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'先执行主线程'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>在执行定时器任务<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是后执行的'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是先执行的'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如果有多个定时器执行顺序也是，等谁先加载完，谁放入任务队列，如果时间相同那么就看执行的先后顺序<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是先执行的'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是后执行的'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-文件依赖之任务队列"><a href="#3-文件依赖之任务队列" class="headerlink" title="3. 文件依赖之任务队列"></a>3. 文件依赖之任务队列</h2><pre class="line-numbers language-js"><code class="language-js">我们先定义两个js文件内容第一个js文件内容：<span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>第二个js文件内容：<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个函数依赖第一个js文件里的函数</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 我们来定义一个加载js文件的函数</span><span class="token keyword">function</span> loadScript <span class="token punctuation">(</span>src<span class="token punctuation">,</span> reslove<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    script<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>    script<span class="token punctuation">.</span>onload <span class="token operator">=</span> reslove<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">'./1.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">'./2.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>由于加载js的顺序是不一定的，也就是说，谁加载完毕之后，谁就放入到任务队列中，并不适用代码执行顺序来放入到任务队列中。所有有时候会报错# 所有我们只能等<span class="token number">1</span><span class="token punctuation">.</span>js加载完再去加载<span class="token number">2</span><span class="token punctuation">.</span>js修改如下<span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">'./1.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token string">'./2.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>这样的弊端就是需要大量的嵌套，如果有其他函数害依赖run函数那么就需要一直嵌套下去，嵌套关系越来越复杂，我们后面会讲到promise会解决这个问题。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-ajax请求之任务队列"><a href="#4-ajax请求之任务队列" class="headerlink" title="4. ajax请求之任务队列"></a>4. ajax请求之任务队列</h2><pre class="line-numbers language-js"><code class="language-js">这里我们暂时无法模拟，但是，ajax请求也是会放到任务队列中，也是需要等待主线程执行完毕，才放入主线程里去执行。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-Promise之任务队列【微任务】"><a href="#5-Promise之任务队列【微任务】" class="headerlink" title="5. Promise之任务队列【微任务】"></a>5. Promise之任务队列【微任务】</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 我们需要使用new 关键字来创建 一个promise </span>例如下面这样属于pending 【准备状态】<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>但是一个回调必须有成功 或者 失败状态<span class="token number">1</span><span class="token punctuation">.</span> 成功状态 <span class="token function">执行resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>Promise <span class="token punctuation">{</span><span class="token operator">&lt;</span>resolved<span class="token operator">></span><span class="token punctuation">:</span> <span class="token string">"成功了"</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 由pending 状态 变为 resolved 代表成功状态 </span><span class="token number">2</span><span class="token punctuation">.</span> 失败状态 <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行resolve()函数代表成功</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Promise <span class="token punctuation">{</span><span class="token operator">&lt;</span>rejected<span class="token operator">></span><span class="token punctuation">:</span> <span class="token string">"失败了"</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 由pending 状态 变为 rejected 代表失败状态</span><span class="token number">3</span><span class="token punctuation">.</span> 当状态由pending状态 变为 成功或者失败的状态 的时候执行成功或失败的回调第一种方法是使用<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>回调函数。<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span>接收两个参数第一个是resolve成功的回调函数，第二个是reject失败的回调函数<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行resolve()函数代表成功</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功的回调函数'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败的回调函数'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">.</span> 我们可以不写<span class="token punctuation">.</span>then的第二个参数，直接改为<span class="token punctuation">.</span><span class="token keyword">catch</span>这样就是<span class="token punctuation">.</span>then只处理成功的回到函数，<span class="token punctuation">.</span><span class="token keyword">catch</span>只处理失败的回调函数这样分工明确看着不累<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行resolve()函数代表成功</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功的回调函数'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'失败的回调函数'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>也是当执行到Promise的时候放入到任务队列，任务队列分两种一种是微任务队列，一种是宏任务队列，Promise属于微任务队列，微任务会先执行，宏任务会后执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-宏任务与微任务执行顺序"><a href="#6-宏任务与微任务执行顺序" class="headerlink" title="6. 宏任务与微任务执行顺序"></a>6. 宏任务与微任务执行顺序</h2><pre class="line-numbers language-js"><code class="language-js"># 先执行同步任务 在执行异步任务 异步任务分为宏任务和微任务，先执行微任务，在执行宏任务<span class="token number">1</span><span class="token punctuation">.</span>在Promise构造函数中的代码是同步执行的<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注意这里是不会执行的 因为他必须要等到一个成功的通知 才会执行 这时候是没有通知的所以不会执行</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出内容为 1 2</span><span class="token comment" spellcheck="true">// () => { console.log(1)} 这个函数是执行器函数 在这函数里执行异步任务</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这时候我们得到了一个成功的通知我们会把这个任务【.then()这个任务】放到任务队列的微任务中</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出内容为  1 2 '成功了'</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这时候我们得到了一个成功的通知我们会把这个任务【.then()这个任务】放到任务队列的微任务中</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出内容为  1 2 '成功了' 'setTimeout'</span><span class="token number">4</span><span class="token punctuation">.</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这两行代码顺序调换其实输出结果是一样的，没有影响</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这两行代码顺序调换其实输出结果是一样的，没有影响</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>上面是先执行定时器的宏任务才发现微任务，此时的定时器宏任务已经拿到主线程去执行了，就算遇到微任务，会先放到微任务中，等待主线程执行完毕在去轮询任务队列。<span class="token comment" spellcheck="true">// 输出内容为  1 2 'setTimeout' '成功了' </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-Promise状态不可更改"><a href="#7-Promise状态不可更改" class="headerlink" title="7. Promise状态不可更改"></a>7. Promise状态不可更改</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 由pending变更为resolved状态</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 再次改变状态是不生效的 不可以更改的</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> resolve<span class="token punctuation">,</span>reject传递promise<span class="token number">1</span><span class="token punctuation">.</span> 成功的状态<span class="token keyword">const</span> promise1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 其实返回的成功的状态</span><span class="token number">2</span><span class="token punctuation">.</span>失败的状态<span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span> 准备的状态<span class="token keyword">const</span> promise3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// resolve(promise1); // 其实传递的是一个promise的状态</span>   <span class="token comment" spellcheck="true">// reject(promise2);  // 其实传递的是一个promise的状态</span>   <span class="token comment" spellcheck="true">// resolve(promise3);</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>promise2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用成功的状态传递一个失败的状态 那么由传递的状态为主</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-Promise-then（onResolved）"><a href="#8-Promise-then（onResolved）" class="headerlink" title="8. Promise.then（onResolved）"></a>8. Promise.then（onResolved）</h2><pre class="line-numbers language-js"><code class="language-js">on 当<span class="token operator">...</span>时候 一般有on 基本上是回调函数<span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> 不需要成功的回调传入一个<span class="token keyword">null</span>就行了<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span> 多个then 如果上个then返回状态为resolved 会接着执行下面的then 如果返回 rejected会执行<span class="token keyword">catch</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token punctuation">.</span>Promise<span class="token punctuation">.</span>then也是一个Promise<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Promise {&lt;resolved>: "1"} resloved状态</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Promise {&lt;pending>} pending状态</span>先执行同步 在去任务队列轮询<span class="token number">6</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 别看他是reject 但是执行完之后的状态还是resolved是成功的,所以还是会执行 下个then()方法</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>如果then里面<span class="token keyword">return</span> 一个普通值 会传入下一个then里面，这时候状态会变为resolved，如果返回的是一个promise那么会传递这个promise的状态到下一个then<span class="token operator">/</span><span class="token keyword">catch</span>中，如果是pending状态则不会传递到，注意必须【<span class="token keyword">return</span>】一个promise才行，下一个then才是对这个<span class="token keyword">return</span>的promise状态进行处理，要不然不会对这个promise进行处理<span class="token punctuation">,</span>后面的then就是对前面返回的promise状态进行处理<span class="token number">7</span><span class="token punctuation">.</span> <span class="token keyword">return</span> 一个promise<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'return promise'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// return promise</span><span class="token number">8</span><span class="token punctuation">.</span> 不<span class="token keyword">return</span>一个promise<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'return promise'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// undefined</span><span class="token number">9</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 模拟 我们需要一个接口返回来的数据 去请求另一个接口 </span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token function">ajax2</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">'数据'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-Promise-catch（onRejected）"><a href="#9-Promise-catch（onRejected）" class="headerlink" title="9. Promise.catch（onRejected）"></a>9. Promise.catch（onRejected）</h2><pre class="line-numbers language-js"><code class="language-js">用来捕获失败状态的回调<span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>上面写法，then的第二个参数，可以简写下面这样<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>多个<span class="token keyword">catch</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">'then里面的回调'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catch执行完后执行'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 失败了 then里面的回调 catch执行完后执行</span>会执行第一个<span class="token keyword">catch</span> 如果<span class="token keyword">catch</span>里面没有在抛出rejected的状态 那么状态会变为resolved状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-Promise-finally"><a href="#10-Promise-finally" class="headerlink" title="10. Promise.finally"></a>10. Promise.finally</h2><pre class="line-numbers language-js"><code class="language-js">无论是成功状态还是失败状态都会执行，一般用于完成关闭loading加载<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// reject('失败了');</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'执行完毕,永远会执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-Promise封装setTimeout定时器"><a href="#11-Promise封装setTimeout定时器" class="headerlink" title="11. Promise封装setTimeout定时器"></a>11. Promise封装setTimeout定时器</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span>delay <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-构建扁平化的setInterval"><a href="#12-构建扁平化的setInterval" class="headerlink" title="12.  构建扁平化的setInterval"></a>12.  构建扁平化的setInterval</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">interval</span><span class="token punctuation">(</span>delay <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> timerCode <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">callback</span><span class="token punctuation">(</span>timerCode<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token punctuation">(</span>timerCode<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'循环开始'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// clearInterval(timerCode);</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'成功了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-Promise-resolve-缓存后台数据"><a href="#13-Promise-resolve-缓存后台数据" class="headerlink" title="13. Promise.resolve()缓存后台数据"></a>13. Promise.resolve()缓存后台数据</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的promise'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 其实就是对这个的简写</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的promise'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Promise {&lt;resolved>: "成功的promise"}</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的promise'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 成功的promise</span><span class="token keyword">function</span> <span class="token function">getTableData</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> cache <span class="token operator">=</span> getTableData<span class="token punctuation">.</span>cache <span class="token operator">||</span> <span class="token punctuation">(</span>getTableData<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"走缓存了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          cache<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"没走缓存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> res<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">getTableData</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-Promise-reject"><a href="#14-Promise-reject" class="headerlink" title="14. Promise.reject()"></a>14. Promise.reject()</h2><pre class="line-numbers language-js"><code class="language-js">以前的写法：<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>简写Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-Promise-all批量获取数据"><a href="#15-Promise-all批量获取数据" class="headerlink" title="15. Promise.all批量获取数据"></a>15. Promise.all批量获取数据</h2><pre class="line-numbers language-js"><code class="language-js">所有的promise返回成功，才是成功的状态，有一个返回失败就是失败的状态，属于并行完成<span class="token number">1</span><span class="token punctuation">.</span> 全部成功<span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    p1<span class="token punctuation">,</span>    p2<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["成功的promise1", "成功的promise2"]</span><span class="token number">2</span><span class="token punctuation">.</span> 有一个失败的<span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'成功的promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    p1<span class="token punctuation">,</span>    p2<span class="token punctuation">,</span>    p3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 失败的promise1</span><span class="token number">3</span><span class="token punctuation">.</span> 多个失败的 返回第一个失败的<span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'成功的promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    p1<span class="token punctuation">,</span>    p2<span class="token punctuation">,</span>    p3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 失败的promise1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-Promise-allSettled-使用"><a href="#16-Promise-allSettled-使用" class="headerlink" title="16. Promise.allSettled()使用"></a>16. Promise.allSettled()使用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 返回所有状态 不管成功 失败</span><span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'成功的promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    p1<span class="token punctuation">,</span>    p2<span class="token punctuation">,</span>    p3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">'res'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  [</span><span class="token comment" spellcheck="true">// {status: "fulfilled", value: "成功的promise1"},</span><span class="token comment" spellcheck="true">// {status: "rejected", reason: "失败的promise1"}, </span><span class="token comment" spellcheck="true">// {status: "rejected", reason: "成功的promise2"}</span><span class="token comment" spellcheck="true">// ]</span># 成功的返回成功状态 和 请求成功的结果的值，失败的返回失败的原因和失败的值永远返回是成功的状态也就是说走then妙用：筛选出成功的 回调<span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'成功的promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    p1<span class="token punctuation">,</span>    p2<span class="token punctuation">,</span>    p3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">'fulfilled'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">'res'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-Promise-race后台请求超时处理"><a href="#17-Promise-race后台请求超时处理" class="headerlink" title="17. Promise.race后台请求超时处理"></a>17. Promise.race后台请求超时处理</h2><pre class="line-numbers language-js"><code class="language-js">批量获取多个Promise<span class="token punctuation">,</span>只取返回最快的那个race： 竞赛#： 使用<span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'成功的promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    p1<span class="token punctuation">,</span>    p2<span class="token punctuation">,</span>    p3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">.</span>实际应用 如果所有请求都超过两秒 那么我们自定义一个请求超时的promise返回去<span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败的promise1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'成功的promise2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'请求超时'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    p1<span class="token punctuation">,</span>    p2<span class="token punctuation">,</span>    p3<span class="token punctuation">,</span>    p4<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-async函数"><a href="#18-async函数" class="headerlink" title="18. async函数"></a>18. async函数</h2><ul><li><p>async函数</p></li><li><p>之所以称async函数 是因为async后面接的是一个函数</p></li><li><p>async函数的返回值为Promise对象</p></li><li><p>Promise对象的结果由async函数执行的结果决定</p></li><li><pre class="line-numbers language-js"><code class="language-js">我们首先定义一个函数 getName， 毫无疑问返回值是字符串 <span class="token string">'法外狂徒张三'</span><span class="token keyword">function</span> getName <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'法外狂徒张三'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>我们使用<span class="token keyword">async</span>在定义一个函数 返回值将是一个Promise对象 具体是resolved，还是rejected 由函数执行结果来决定 很明显下面是resolved<span class="token keyword">async</span> <span class="token keyword">function</span> getAge <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul><h2 id="19-await-表达式"><a href="#19-await-表达式" class="headerlink" title="19. await 表达式"></a>19. await 表达式</h2><ul><li><p>await右侧表达式<code>一般</code>为Promise对象，但也可以是其他的值</p></li><li><p>如果表达式是Promise对象，await返回的是<code>Promise成功的值</code></p></li><li><p>如果表达式是其他的值，直接将此值作为await的返回值</p><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">const</span> reason <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 报错 因为await返回的是`Promise成功的值` 失败就报错</span><span class="token number">3</span><span class="token punctuation">.</span>我们继续看下个例子<span class="token keyword">function</span> f1 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 我们期待的结果是2 但是报错了 如果在函数中使用await 那么这个函数必须要是有async</span><span class="token template-string"><span class="token string">`Uncaught SyntaxError: await is only valid in async functions and the top level bodies of modules`</span></span><span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token keyword">function</span> f1 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 2</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 这回正确打印 老铁 没毛病！！！学废了么</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 上面我们测试的await 后面都是Promise对象 假如张三这个同学调皮捣蛋，await后面就不跟个Promise对象，怎么办呢？打印的是什么呢？我们来看下</span><span class="token keyword">async</span> <span class="token keyword">function</span> f1 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token string">'法外狂徒张三'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// '法外狂徒张三'</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>我们发现了如果表达式是其他的值，直接将此值作为<span class="token keyword">await</span>的返回值<span class="token number">6</span><span class="token punctuation">.</span> 进阶之路最后一步我们发现个问题，<span class="token keyword">await</span>返回是一个成功Promise的值 但是如果是失败Promise的呢我们该怎么获取到失败的值<span class="token keyword">async</span> <span class="token keyword">function</span> f1 <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> reason <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败了'</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// '法外狂徒张三'</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 失败了</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="18-async与await语法糖"><a href="#18-async与await语法糖" class="headerlink" title="18. async与await语法糖"></a>18. async与await语法糖</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们打印执行run方法其实是个Promise  </span><span class="token comment" spellcheck="true">// 状态为已完成【resolved】</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// await就是then的语法糖 then(res => resolve(1))</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$api<span class="token punctuation">.</span>scheduleDispatch<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-async错误处理"><a href="#19-async错误处理" class="headerlink" title="19. async错误处理"></a>19. async错误处理</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>在外面处理<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// resolve(1);</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token string">'res'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token string">'err'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> reject模拟网络请求出错（在内部处理）<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span> 系统内部自动抛错<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印一个未定义的变量 </span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JS部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grid布局</title>
      <link href="/2019/09/25/grid/"/>
      <url>/2019/09/25/grid/</url>
      
        <content type="html"><![CDATA[<h1 id="grid布局-网格布局"><a href="#grid布局-网格布局" class="headerlink" title="grid布局(网格布局)"></a>grid布局(网格布局)</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="1-grid布局作用"><a href="#1-grid布局作用" class="headerlink" title="1. grid布局作用"></a>1. grid布局作用</h3><ul><li><strong>grid</strong>布局将容器划分为行和列，产生单元格</li><li>指定 item 所在的单元格（二位布局）</li></ul><h3 id="2-grid布局基本概念"><a href="#2-grid布局基本概念" class="headerlink" title="2. grid布局基本概念"></a>2. grid布局基本概念</h3><ul><li>采用网格布局的元素成为容器，容器内部采用网格定位的直接子元素 称为<strong>item</strong><ul><li>开启grid布局</li><li>display: grid；</li><li>display: inline-grid;</li><li>作用与 flex、inline-flex一样</li><li>设为网格布局以后，容器子元素（项目）的<code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code>和<code>column-*</code>等设置都将失效。</li></ul></li></ul><h2 id="二、容器（container）属性"><a href="#二、容器（container）属性" class="headerlink" title="二、容器（container）属性"></a>二、容器（container）属性</h2><h3 id="1-gird-template-columns、grid-template-rows"><a href="#1-gird-template-columns、grid-template-rows" class="headerlink" title="1. gird-template-columns、grid-template-rows"></a>1. gird-template-columns、grid-template-rows</h3><p>容器指定了网格布局以后，接着就要划分行和列。<code>grid-template-columns</code>属性定义每一列的列宽，<code>grid-template-rows</code>属性定义每一行的行高。</p><h4 id="1-gird-template-columns"><a href="#1-gird-template-columns" class="headerlink" title="1. gird-template-columns"></a>1. gird-template-columns</h4><ul><li>定义每一列的宽</li></ul><h4 id="2-grid-template-rows"><a href="#2-grid-template-rows" class="headerlink" title="2. grid-template-rows"></a>2. grid-template-rows</h4><ul><li>定义每一行的行高</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 除了使用绝对单位，也可以使用百分比。**/</span><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">33.33%</span> <span class="token number">33.33%</span> <span class="token number">33.33%</span><span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">33.33%</span> <span class="token number">33.33%</span> <span class="token number">33.33%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-repeat-函数"><a href="#3-repeat-函数" class="headerlink" title="3. repeat()函数"></a>3. repeat()函数</h4><ol><li>有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用repeat()函数，简化重复的值。上面的代码用repeat()改写如下。</li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">33.33%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">33.33%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>repeat()接受两个参数:</li></ol><ul><li>第一个参数是重复的次数（上例是3）</li><li>第二个参数是所要重复的值。</li></ul><ol start="3"><li><p>repeat()重复某种模式也是可以的。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">100</span>px <span class="token number">20</span>px <span class="token number">80</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>上面代码定义了<span class="token number">6</span>列，第一列和第四列的宽度为<span class="token number">100</span>px，第二列和第五列为<span class="token number">20</span>px，第三列和第六列为<span class="token number">80</span>px。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="4-auto-fill-关键字"><a href="#4-auto-fill-关键字" class="headerlink" title="4. auto-fill 关键字"></a>4. <strong>auto-fill 关键字</strong></h4><p>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用<code>auto-fill</code>关键字表示自动填充。</p><ul><li><p>auto 自动</p></li><li><p>fill 填充</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill, <span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>表示每列宽度<span class="token number">100</span>px，然后自动填充，直到容器不能放置更多的列。<span class="token punctuation">(</span>比flex智能点<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5-fr-关键字"><a href="#5-fr-关键字" class="headerlink" title="5. fr 关键字"></a>5. <strong>fr 关键字</strong></h4><ol><li>为了方便表示比例关系，网格布局提供了<code>fr</code>关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为<code>1fr</code>和<code>2fr</code>，就表示后者是前者的两倍</li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">1</span>fr <span class="token number">1</span>fr<span class="token punctuation">;</span><span class="token punctuation">}</span>上面代码表示两个相同宽度的列。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>fr</code>可以与绝对长度的单位结合使用，这时会非常方便。</li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">150</span>px <span class="token number">1</span>fr <span class="token number">2</span>fr<span class="token punctuation">;</span><span class="token punctuation">}</span>上面代码表示，第一列的宽度为<span class="token number">150</span>像素，第二列的宽度是第三列的一半。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-minmax"><a href="#6-minmax" class="headerlink" title="6. minmax()"></a>6. <strong>minmax()</strong></h4><p><code>minmax()</code>函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">grid-template-columns: 1fr 1fr minmax(100px, 1fr);我的理解：1.我们假设容器的宽度 900px先算1fr 等于多少px 900px / 3fr = 300px  1fr = 300px所以分三列 300px 300px 300px2. 我们假设容器宽度270px先算 1fr 等于 多少 270px / 3fr = 90px 1fr = 90px然后 90px 小于最小的100px 我们选100px270px - 100px = 170px 我们重新计算1fr = 170px / 2fr= 85px所以列的宽度85px 85px 100px带着这个猜想我去验证了下 果然没错 将width 改为270 和900 分别验证下 代码如下&lt;style>        <span class="token class">.grid</span> </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#aaaaaa</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">270</span>px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>            <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">1</span>fr <span class="token number">1</span>fr <span class="token function">minmax</span><span class="token punctuation">(</span><span class="token number">100</span>px, <span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid-item</span> </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid-item-1</span> </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> cadetblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid-item-2</span> </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid-item-3</span> </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;div class=<span class="token string">"grid"</span>>    &lt;div class=<span class="token string">"grid-item grid-item-1"</span>><span class="token number">1</span>&lt;/div>    &lt;div class=<span class="token string">"grid-item grid-item-2"</span>><span class="token number">2</span>&lt;/div>    &lt;div class=<span class="token string">"grid-item grid-item-3"</span>><span class="token number">3</span>&lt;/div>&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-auto"><a href="#7-auto" class="headerlink" title="7. auto"></a>7. auto</h4><ul><li><code>auto</code>关键字表示由浏览器自己决定长度。</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto <span class="token number">100</span>px<span class="token punctuation">;</span>上面代码中，第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了min-width，且这个值大于最大宽度。一般可以用于两头固定 中间自适应<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto auto <span class="token number">100</span>px<span class="token punctuation">;</span>也可以设置多个auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-网格线的名称"><a href="#8-网格线的名称" class="headerlink" title="8. 网格线的名称"></a>8. <strong>网格线的名称</strong></h4><p><code>grid-template-columns</code>属性和<code>grid-template-rows</code>属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> [c<span class="token number">1</span>] <span class="token number">100</span>px [c<span class="token number">2</span>] <span class="token number">100</span>px [c<span class="token number">3</span>] auto [c<span class="token number">4</span>]<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> [r<span class="token number">1</span>] <span class="token number">100</span>px [r<span class="token number">2</span>] <span class="token number">100</span>px [r<span class="token number">3</span>] auto [r<span class="token number">4</span>]<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">上面代码指定网格布局为3行 x 3列，因此有4根垂直网格线和4根水平网格线。方括号里面依次是这八根线的名字。网格布局允许同一根线有多个名字，比如<span class="token attribute">[c1 r1]</span>。<span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> [c<span class="token number">1</span> r<span class="token number">1</span>] <span class="token number">100</span>px [c<span class="token number">2</span>] <span class="token number">100</span>px [c<span class="token number">3</span>] auto [c<span class="token number">4</span>]<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> [r<span class="token number">1</span>] <span class="token number">100</span>px [r<span class="token number">2</span>] <span class="token number">100</span>px [r<span class="token number">3</span>] auto [r<span class="token number">4</span>]<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-布局实例"><a href="#9-布局实例" class="headerlink" title="9. 布局实例"></a>9. <strong>布局实例</strong></h4><p><code>grid-template-columns</code>属性对于网页布局非常有用。两栏式布局只需要一行代码。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrapper</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">70%</span> <span class="token number">30%</span><span class="token punctuation">;</span><span class="token punctuation">}</span>上面代码将左边栏设为<span class="token number">70%</span>，右边栏设为<span class="token number">30%</span>。传统的十二网格布局，写起来也很容易<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">12</span>, <span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-grid-row-gap和grid-column-gap"><a href="#2-grid-row-gap和grid-column-gap" class="headerlink" title="2. grid-row-gap和grid-column-gap"></a>2. grid-row-gap和grid-column-gap</h3><ul><li><p>gap: 开口; 豁口; 缺口</p></li><li><p><code>grid-row-gap</code>属性设置行与行的间隔（行间距），<code>grid-column-gap</code>属性设置列与列的间隔（列间距）。</p></li><li><p>最新标准，属性名的grid-前缀已经删除，写为row-gap、  column-gap</p></li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-row-gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">grid-column-gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>grid-row-gap</code>用于设置行间距，<code>grid-column-gap</code>用于设置列间距。</p><h3 id="3-grid-gap"><a href="#3-grid-gap" class="headerlink" title="3. grid-gap"></a>3. grid-gap</h3><ul><li><p><code>grid-gap</code>属性是<code>grid-column-gap</code>和<code>grid-row-gap</code>的合并简写形式，语法如下。</p></li><li><p>最新标准，属性名的grid-前缀已经删除，写为gap</p></li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">grid-gap: &lt;grid-row-gap> &lt;grid-column-gap>;因此，上面一段 CSS 代码等同于下面的代码。<span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">如果grid-gap省略了第二个值，浏览器认为第二个值等于第一个值。<span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-grid-template-areas"><a href="#4-grid-template-areas" class="headerlink" title="4. grid-template-areas"></a>4. grid-template-areas</h3><ul><li>网格布局允许指定<strong>区域</strong>（area），一个区域由单个或多个单元格组成。<code>grid-template-areas</code>属性用于定义区域。</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">1.<span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">'a b c'</span>                       <span class="token string">'d e f'</span>                       <span class="token string">'g h i'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>上面代码先划分出<span class="token number">9</span>个单元格，然后将其定名为a到i的九个区域，分别对应这九个单元格。多个单元格合并成一个区域的写法如下。<span class="token number">2.</span><span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">'a a a'</span>                     <span class="token string">'b b b'</span>                     <span class="token string">'c c c'</span><span class="token punctuation">;</span>上面代码将<span class="token number">9</span>个单元格分成a、b、c三个区域。<span class="token number">3.</span>下面是一个布局实例。<span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">"header header header"</span>                     <span class="token string">"main main sidebar"</span>                     <span class="token string">"footer footer footer"</span><span class="token punctuation">;</span>上面代码中，顶部是页眉区域header，底部是页脚区域footer，中间部分则为main和sidebar。<span class="token number">4.</span>如果某些区域不需要利用，则使用<span class="token string">"点"</span>（<span class="token number">.</span>）表示。<span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">'a . c'</span>                     <span class="token string">'d . f'</span>                     <span class="token string">'g . i'</span><span class="token punctuation">;</span>上面代码中，中间一列为点，表示没有用到该单元格，或者该单元格不属于任何区域。<span class="token number">5.</span>注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为区域名-start，终止网格线自动命名为区域名-end。比如，区域名为header，则起始位置的水平网格线和垂直网格线叫做header-start，终止位置的水平网格线和垂直网格线叫做header-end。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-grid-auto-flow"><a href="#5-grid-auto-flow" class="headerlink" title="5. grid-auto-flow"></a>5. grid-auto-flow</h3><ul><li><p>主要用于排序方式</p></li><li><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。</p></li><li><p>默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行。</p></li><li><p>这个顺序由<code>grid-auto-flow</code>属性决定，默认值是<code>row</code>，即”先行后列”。</p></li><li><p>也可以将它设成<code>column</code>，变成”先列后行”。</p></li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>grid-auto-flow</code>属性除了设置成<code>row</code>和<code>column</code>，还可以设成<code>row dense</code>和<code>column dense</code>。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。    </p></li><li><p><code>row</code> 默认值 先行后列</p></li><li><p><code>column</code> 先列后行</p></li><li><p><code>row dense</code>，表示”先行后列”，并且尽可能紧密填满，尽量填满空格。 dense 密集的</p></li><li><p><code>column dense</code>, 表示”先列后行”，并且尽可能紧密填满，尽量填满空格。</p></li></ul><h3 id="6-justify-items-，-align-items-，-place-items"><a href="#6-justify-items-，-align-items-，-place-items" class="headerlink" title="6. justify-items ， align-items ， place-items"></a>6. justify-items ， align-items ， place-items</h3><ul><li><p><code>justify-items</code>属性设置单元格内容的水平位置（左中右）。</p></li><li><p><code>align-items</code>属性设置单元格内容的垂直位置（上中下）。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这两个属性的写法完全相同，都可以取下面这些值。</p><ul><li><p>start：对齐单元格的起始边缘。</p></li><li><p>end：对齐单元格的结束边缘。</p></li><li><p>center：单元格内部居中。</p></li><li><p>stretch：拉伸，占满单元格的整个宽度（默认值）。（参照flex里的）</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>place-items</code>属性是<code>align-items</code>属性和<code>justify-items</code>属性的合并简写形式。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token property">place-items</span><span class="token punctuation">:</span> &lt;align-items> &lt;justify-items><span class="token punctuation">;</span>例如：<span class="token property">place-items</span><span class="token punctuation">:</span> start end<span class="token punctuation">;</span>如果省略第二个值，则浏览器认为与第一个值相等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="7-justify-content，-align-content，-place-content"><a href="#7-justify-content，-align-content，-place-content" class="headerlink" title="7. justify-content， align-content， place-content"></a>7. justify-content， align-content， place-content</h3><ul><li><code>justify-content</code>属性是整个内容区域在容器里面的水平位置（左中右）。</li><li><code>align-content</code>属性是整个内容区域的垂直位置（上中下）。</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> start | end | center | stretch | space-around | space-between | space-evenly<span class="token punctuation">;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> start | end | center | stretch | space-around | space-between | space-evenly<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这两个属性的写法完全相同，都可以取下面这些值。</p></li><li><p>start - 对齐容器的起始边框。</p></li><li><p>end - 对齐容器的结束边框。</p></li><li><p>center - 容器内部居中。</p></li><li><p>stretch - 项目大小没有指定时，拉伸占据整个网格容器。(默认值)</p></li><li><p>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</p></li><li><p>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。</p></li><li><p>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</p></li><li><p><code>place-content</code>属性是<code>align-content</code>属性和<code>justify-content</code>属性的合并简写形式。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token property">place-content</span><span class="token punctuation">:</span> &lt;align-content> &lt;justify-content><span class="token property">place-content</span><span class="token punctuation">:</span> space-around space-evenly<span class="token punctuation">;</span>如果省略第二个值，浏览器就会假定第二个值等于第一个值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="8-grid-auto-columns，-grid-auto-rows"><a href="#8-grid-auto-columns，-grid-auto-rows" class="headerlink" title="8. grid-auto-columns， grid-auto-rows"></a>8. grid-auto-columns， grid-auto-rows</h3><p>有时候，一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目</p><ul><li><p><code>grid-auto-columns</code>属性和<code>grid-auto-rows</code>属性用来设置，浏览器自动创建的多余网格的列宽和行高。</p></li><li><p>它们的写法与<code>grid-template-columns</code>和<code>grid-template-rows</code>完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-auto-rows</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span>指定新增的行高统一为<span class="token number">50</span>px（原始的行高为<span class="token number">100</span>px）划分好的网格是<span class="token number">3</span>行 x <span class="token number">3</span>列，但是，<span class="token number">8</span>号项目指定在第<span class="token number">4</span>行，<span class="token number">9</span>号项目指定在第<span class="token number">5</span>行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意 行超出了 设置行才有用，列超出了设置列才有用</p></li></ul><h3 id="9-grid-template"><a href="#9-grid-template" class="headerlink" title="9. grid-template"></a>9. grid-template</h3><p><code>grid-template</code>属性是<code>grid-template-columns</code>、<code>grid-template-rows</code>和<code>grid-template-areas</code>这三个属性的合并简写形式。</p><h3 id="10-grid-属性"><a href="#10-grid-属性" class="headerlink" title="10. grid 属性"></a>10. grid 属性</h3><ul><li><code>grid</code>属性是<code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、 <code>grid-auto-rows</code>、<code>grid-auto-columns</code>、<code>grid-auto-flow</code>这六个属性的合并简写形式。</li><li>从易读易写的角度考虑，还是建议不要合并属性。</li></ul><h2 id="三、项目（item）属性"><a href="#三、项目（item）属性" class="headerlink" title="三、项目（item）属性"></a>三、项目（item）属性</h2><h3 id="1-grid-column-start、grid-column-end、grid-row-start-、-grid-row-end"><a href="#1-grid-column-start、grid-column-end、grid-row-start-、-grid-row-end" class="headerlink" title="1. grid-column-start、grid-column-end、grid-row-start 、 grid-row-end"></a>1. grid-column-start、grid-column-end、grid-row-start 、 grid-row-end</h3><ul><li><p>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p></li><li><pre class="line-numbers language-css"><code class="language-css">grid-column-start属性：左边框所在的垂直网格线grid-column-end属性：右边框所在的垂直网格线grid-row-start属性：上边框所在的水平网格线grid-row-end属性：下边框所在的水平网格线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">1</span>号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线上面代码 只指定了<span class="token number">1</span>号项目的左右边框，没有指定上下边框，所以会采用默认位置，即上边框是第一根水平网格线，下边框是第二根水平网格线。除了<span class="token number">1</span>号项目以外，其他项目都没有指定位置，由浏览器自动布局，这时它们的位置由容器的grid-auto-flow属性决定，这个属性的默认值是row，因此会<span class="token string">"先行后列"</span>进行排列。大家可以把这个属性的值分别改成column、row dense和column dense，看看其他项目的位置发生了怎样的变化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">"header header header"</span>                         <span class="token string">"main main sidebar"</span>                         <span class="token string">"footer footer footer"</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> [c<span class="token number">1</span>] <span class="token number">100</span>px [c<span class="token number">2</span>] <span class="token number">100</span>px [c<span class="token number">3</span>] auto [c<span class="token number">4</span>]<span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> header-start<span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> header-end<span class="token punctuation">;</span><span class="token punctuation">}</span>左边框和右边框的位置，都指定为网格线的名字。 配合grid-template-areas 或者 grid-template-columns 来给网格命名一起来使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这四个属性的值还可以使用<code>span</code>关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> span <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">1号项目的左边框距离右边框跨越2个网格这与下面的代码效果完全一样。<span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> span <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用这四个属性，如果产生了项目的重叠，则使用<code>z-index</code>属性指定项目的重叠顺序。</p></li></ul><h3 id="2-grid-column-grid-row"><a href="#2-grid-column-grid-row" class="headerlink" title="2. grid-column  grid-row"></a>2. grid-column  grid-row</h3><ul><li><p><code>grid-column</code>属性是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式。</p></li><li><p><code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> &lt;start-line> / &lt;end-line><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> &lt;start-line> / &lt;end-line><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">上面代码中，项目item-1占据第一行，从第一根列线到第三根列线。这两个属性之中，也可以使用span关键字，表示跨越多少个网格。<span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#b03532</span><span class="token punctuation">;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#b03532</span><span class="token punctuation">;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>斜杠以及后面的部分可以省略，默认跨越一个网格。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-grid-area"><a href="#3-grid-area" class="headerlink" title="3. grid-area"></a>3. grid-area</h3><ul><li><p><code>grid-area</code>属性指定项目放在哪一个区域。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span>指定<span class="token number">1</span>号项目位于e区域<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>grid-area</code>属性还可用作<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code>的合并简写形式，直接指定项目的位置。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> &lt;row-start> / &lt;column-start> / &lt;row-end> / &lt;column-end><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">1</span> / <span class="token number">3</span> / <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-justify-self、-align-self、place-self"><a href="#4-justify-self、-align-self、place-self" class="headerlink" title="4. justify-self、 align-self、place-self"></a>4. justify-self、 align-self、place-self</h3><ul><li><p><code>justify-self</code>属性设置单元格内容的水平位置（左中右），跟<code>justify-items</code>属性的用法完全一致，但只作用于单个项目。</p></li><li><p><code>align-self</code>属性设置单元格内容的垂直位置（上中下），跟<code>align-items</code>属性的用法完全一致，也是只作用于单个项目。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>start：对齐单元格的起始边缘。</p></li><li><p>end：对齐单元格的结束边缘。</p></li><li><p>center：单元格内部居中。</p></li><li><p>stretch：拉伸，占满单元格的整个宽度（默认值）。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span>  </span><span class="token punctuation">{</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>place-self</code>属性是<code>align-self</code>属性和<code>justify-self</code>属性的合并简写形式。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token property">place-self</span><span class="token punctuation">:</span> &lt;align-self> &lt;justify-self><span class="token punctuation">;</span><span class="token property">place-self</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span>如果省略第二个值，place-self属性会认为这两个值相等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="四、相关资料引用"><a href="#四、相关资料引用" class="headerlink" title="四、相关资料引用"></a>四、相关资料引用</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CSS部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心灵驿站</title>
      <link href="/2019/09/15/wenzhang/"/>
      <url>/2019/09/15/wenzhang/</url>
      
        <content type="html"><![CDATA[<pre><code>    人生越是艰难处，越要往前多走几步</code></pre><p>表弟大鹏刚工作那段时间，总是吐槽自己的实习工作太没意思。每天都是处理一堆乱七八糟的小事和杂事，工资不高、加班不少，这让他感觉看不到未来。</p><p>我安慰他说，与其浪费时间抱怨，不如好好总结一下自己的工作如何能更有效率，好好想想你在现在的工作中能够得到什么样的经验。又或者，你考虑考虑这份工作是否真的适合自己。一味地吐槽，于自身成长而言并无益处。只有迈开脚步往前多走几步，你才会发现，那些你以为过不去的难关都会过去。</p><p>在那之后，表弟不再那么纠结了，而是认真努力地完成所有交予他的工作。半年后，他顺利转正，因为成绩突出，他申请转岗，去了自己喜欢的部门。</p><p>很多时候，出现不顺心的事情时，我们容易困在不好的情绪里。带着不爽的心情工作，自然什么都做不好。其实真的静下心来面对，很多事情也没那么难了。如果碰到一点挫折就陷入负面情绪中止步不前，那才是得不偿失。</p><p>遇到困难，千万别停滞不前，要勇敢迈出脚步，一步不行，就多走几步。人生就如开花结果，努力生长，丰盈自我，就不会白忙一场。</p><p>我在乡下支教时曾经遇到一位大姐。大姐姓张，早些年她丈夫外出打工后便杳无音讯，家里上有婆婆，下有两个小娃，一家老小全指着她赚钱养家。于是，她去了县里的一家服装厂打工。但因为一次意外，她的右手被卷入裁断机，失去了3根手指。</p><p>很多人都为她的遭遇难过，张大姐自己却是那个最快接受现实的人。打不了工，她就回了老家，开始每天去集上卖山货。后来，村里的大学生村官教她做直播卖货，她认真研究其他主播的直播技巧，学习销售方法，还苦练普通话。</p><p>张大姐说，自己有时候也会难过，但人这一生只能抬头看、往前走，没有过不去的坎，不能因为难走就不走了啊，路照走、活照干、日子照过。</p><p>大姐的话虽然朴实，却让我动容：对啊，人生艰难处，为什么不多走几步试试呢？世上本没有那么多圆满，各种艰难曲折的考验都真实存在着，这就是人生。俗话说，车到山前必有路。前提是，你要走到山前，才能发现路。如果远眺山峰就被吓住而退缩，那么一辈子都不可能登顶。</p><p>朋友梓风是个宝妈，去年参加了考研。走出校园已七年的她，重拾书本考研，这一路的艰辛不言而喻。</p><p>她说那段时间，除了吃饭睡觉就是看书刷题，枯燥又重复、孤独且煎熬。每当学习遇上瓶颈，尤其是专业术语背了又忘，那种挫败感更是铺天盖地而来。</p><p>可无论上一刻是多么焦虑，冷水洗把脸后，她又开始投入到学习中。最终，顶着质疑与压力，她成功上岸，收到了目标院校的录取通知书。<br>人生在世，谁都会有艰难的时候。人生不易，得过且过太容易。但我想说的是，如果身处沙漠，更不要放弃寻找绿洲。朴素的执着往往能解开人生困境，越是难走的时候，越要坚持往前多走几步。</p><p>在经历中成长，在困境中前行，人生自会渐入佳境，最终收获更好的自己。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 深度好文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘选好文</title>
      <link href="/2019/08/30/index/"/>
      <url>/2019/08/30/index/</url>
      
        <content type="html"><![CDATA[<pre><code>                    人可以平凡，但不可以平庸</code></pre><p>很喜欢这样一句话，“人可以平凡，但不可以平庸。”平凡是努力过后的坦然，平庸是随意过后的必然。平凡的人知道自己平凡但依旧热爱生活、脚踏实地，平庸的人则容易随波逐流、得过且过。</p><p>　　袁枚的诗中有这样一句：“苔花如米小，也学牡丹开。”如米粒般微小的苔花依然像牡丹一样热烈绽放，所以人更该积极向上地活着。想要告别平庸，获得有意义的人生，需要做好3件事。</p><p>　　第一，善于规划是前提。</p><p>　　规划就是人生的指向标，有了这个指向标，我们才能知道自己要去哪里，人生才不会迷失方向。很多时候，人与人之间的差距就在于是否对未来有规划。</p><p>　　上大学时，我们宿舍的乐乐每天都过得很“潇洒”，晚上不是熬夜打游戏就是刷剧、刷短视频，凌晨三点还不睡，白天上课听一会儿就趴桌子上睡觉了。只有快期末考试那几天，我们才能看到她熬夜突击学习。可想而知，她每学期都挂科补考。</p><p>　　跟乐乐不一样，同学小君从大一开始就立志要靠优异成绩拿到保研名额。除了上课外，她喜欢泡在图书馆看书，还积极参加科研项目。毕业时，乐乐海投简历却总是石沉大海，小君则如愿以偿、成功保研。</p><p>　　有人说，“没规划的人生叫拼图，有规划的人生才叫蓝图；没目标的人生叫流浪，有目标的人生叫航行。”深以为然。没规划的人漫无目的地生活，有规划的人从容坚定地前行。有无规划，人生大不一样。规划决定你的人生走向，你的未来就藏在你的人生规划里。</p><p>　　第二，勇于行动是基础。</p><p>　　有了规划，接下来要做的就是行动起来。如果不行动，再好的规划也是纸上谈兵。</p><p>　　我叔叔是一所学校的保安，薪水不高，每月还要上半个月夜班。我经常听他念叨对这份工作不满意，不想长干，想换个工作。他曾经是驾驶员，听周围人说开网约车能挣钱，他也想试试。但成为网约车司机需要考取资格证，如果平时多做做题，考试是能过关的。可他总说自己小学文化，肯定考不下来。直到今天，他做保安已经好几年了，尽管不满意，却还在做着。</p><p>　　生活中，像我叔叔这样的人不在少数。有的人一边喊着减肥，一边又抵抗不了美味的诱惑；有的人一边说要自律，一边睡到日上三竿；有的人一边踌躇满志，一边沉迷手机。</p><p>　　没有行动，理想再美也只是远方的风景。很多时候打败你的不是能力问题，而是犹豫不决。如果想要成长，就一定要勇于行动。</p><p>　　第三，敢于坚持是关键。</p><p>　　朋友小丽最近和我抱怨：“为什么我报了这么多培训班，依旧一无所长？”小丽是个好学上进的人，为了提高自己的英语口语，她早上6点起床晨读，白天一有空闲时间就听音频，一句一句地模仿。</p><p>　　过了一段时间，她听别人说学钢琴能提升气质，果断报了钢琴培训班。没几天，培训室旁边的瑜伽馆做活动，她又报了瑜伽培训。钢琴和口语都不练了，她说自己喜欢上了瑜伽。然而，瑜伽练了不到三个月，她又不喜欢了……</p><p>　　凡事贵在坚持，即使你能力再强，如果做事一曝十寒、半途而废，那同样什么也做不成。</p><p>　　有人说，“生活不能等待别人来安排，要自己去争取和奋斗；而不论其结果是喜是悲，但可以慰藉的是，你总不枉在这世界上活了一场。”</p><p>　　一个人的生活可以平凡，但不可以平庸。不甘平庸的人生，始于规划，成于行动，终于坚持。余生，愿你眼眸有星辰，心中有山海；愿你韶华不负，未来可期。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 深度好文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZhaoJinWuuuu</title>
      <link href="/2019/08/27/blog-open-source/"/>
      <url>/2019/08/27/blog-open-source/</url>
      
        <content type="html"><![CDATA[<ul><li>修改了原主题的一些很多<code>bug</code>   2019.08.05</li><li>加入图片懒加载功能，在根目录配置文件开启和关闭    2019.08.09</li><li>增加<code>留言板</code>功能          2019.08.05</li><li>在关于板块,加入<code>简历</code>功能页   2019.08.05</li><li>增加视听[视觉听觉影音]板块       2019.08.10</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。  2019.08.10</li><li>增加网站运行时间显示  2019.08.10</li><li>增加<code>动漫模型</code>     2019.08.10</li><li>整体替换Banner图片和文章特色图片   2019.08.10</li><li>增加分类<code>相册</code>功能         2019.08.29</li><li>去掉标签页,将其合并至<code>分类</code>页中                2019.09.01</li><li>修改了一些控件的参数   2019.09.01</li><li>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观          2019.09.01</li><li>解决首页文章列表卡片上方 <code>border-radius</code>圆角失效的bug  2019.09.01</li><li>添加页面樱花飘落动效            2019.09.09</li><li>添加鼠标点击烟花爆炸动效   2019.09.09</li><li>加入天气接口控件   2019.09.09</li><li>加入鼠标点击文字特效   2019.09.10</li><li>添加页面雪花飘落动效            2019.09.10</li><li>添加在线聊天插件            2019.09.12</li><li>持续更新…</li><li>运行命令<code>hexo  clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo  s</code>（本地预览），<code>hexo d</code>（部署）</li></ul><hr><blockquote><p><strong>最后，如果项目和教程对你有所帮助或者你看见了还算比较喜欢，欢迎给我<code>star</code>，谢谢您！</strong></p></blockquote><p><strong>持续更新中…，如果遇到问题欢迎联系我，在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong><br><escape></escape></p><table>  <tbody><tr>    <td><img width="100" src="https://sunhwee.com/medias/reward/alipay.bmp"></td>    <td><img width="100" src="https://sunhwee.com/medias/reward/wechat.bmp"></td>    <td><img width="100" src="https://sunhwee.com/medias/reward/zan.png"></td>     </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 初来乍到 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
