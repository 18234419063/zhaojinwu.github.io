<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>走进JS</title>
      <link href="/2019/10/25/zhengze/"/>
      <url>/2019/10/25/zhengze/</url>
      
        <content type="html"><![CDATA[<h2 id="字面量创建正则表达式"><a href="#字面量创建正则表达式" class="headerlink" title="字面量创建正则表达式"></a>字面量创建正则表达式</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token punctuation">;</span><span class="token regex">/a/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 检查字符串中时是否包含a</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'f'</span><span class="token punctuation">;</span><span class="token regex">/a/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 检查字符串中是否包含a,并不是检查a的变量</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token function">使用eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 大部分情况不会在正则表达式中放变量，如果放就是用eval，计算字符串中的js语法的<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcd'</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'f'</span><span class="token punctuation">;</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token regex">/${a}/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 检查字符串中时分包含f,是检查a的变量,不是检查a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用对象创建正则表达式"><a href="#2-使用对象创建正则表达式" class="headerlink" title="2. 使用对象创建正则表达式"></a>2. 使用对象创建正则表达式</h2><pre class="line-numbers language-js"><code class="language-js">第一个参数为正则表达式的语句，但是不需要写 <span class="token comment" spellcheck="true">//</span>相当于<span class="token operator">/</span>a<span class="token operator">/</span>中的a，第二个参数是模式，后面会讲到<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">)</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false str中是否包含a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-或选择符的使用"><a href="#3-或选择符的使用" class="headerlink" title="3. 或选择符的使用"></a>3. 或选择符的使用</h2><pre class="line-numbers language-js"><code class="language-js">【<span class="token operator">|</span>】 或者 与逻辑或 相同 只不过是一个<span class="token operator">|</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span><span class="token regex">/a|b/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 检测str中是否包含a或b </span><span class="token regex">/b|z/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 检查str中是否包含z或b </span><span class="token regex">/b|az/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 检车str是否包含b或az且az相邻</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-原子表与原子组中的选择符"><a href="#4-原子表与原子组中的选择符" class="headerlink" title="4. 原子表与原子组中的选择符"></a>4. 原子表与原子组中的选择符</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span> 原子表 代表或的意思，<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span>与 <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span>是一个意思<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span><span class="token regex">/[abc]/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>等同于<span class="token regex">/a|b|c/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span>代表原子组 就是组在一起的意思<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token punctuation">;</span><span class="token regex">/(abc)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 是否包含abc且顺序一致</span><span class="token regex">/(abc)/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>等同于<span class="token regex">/abc/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'&lt;h1>abcdefghijk,1234&lt;/h1>'</span><span class="token punctuation">;</span><span class="token regex">/^&lt;(h[1-6])>.*&lt;\/\1>$/i</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 原子组(h[1-6]) 而后面的\1是代表和第几个原子组一样</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^&lt;(h[1-6])>.*&lt;\/\1>$/i</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["&lt;h1>abcdefghijk,1234&lt;/h1>", "h1"]</span>为什么会有两个？ 因为（h1）就是原子组str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^&lt;(h[1-6])>.*&lt;\/\1>$/ig</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["&lt;h1>abcdefghijk,1234&lt;/h1>"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-正则表达式的转义"><a href="#5-正则表达式的转义" class="headerlink" title="5. 正则表达式的转义"></a>5. 正则表达式的转义</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>未转义的<span class="token punctuation">.</span>代表除换行外任何字符 未转义就是直接写点<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12.34</span><span class="token punctuation">;</span><span class="token regex">/\d+.\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这样写看着没什么问题</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token string">'12#34'</span><span class="token punctuation">;</span><span class="token regex">/\d+.\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 这样就有问题</span><span class="token number">2</span><span class="token punctuation">.</span>转义的点 \<span class="token punctuation">.</span> 加个斜杠 代表只能匹配<span class="token punctuation">.</span> 普通的点<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12.34</span><span class="token punctuation">;</span><span class="token regex">/\d+\.\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token string">'12#34'</span><span class="token punctuation">;</span><span class="token regex">/\d+\.\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false </span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12.34</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\d+\.\d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 放到对象里就不行</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token regex">/\d+\.\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 在字面量里可以</span>其实我们可以打印下<span class="token string">'d'</span> <span class="token operator">===</span> <span class="token string">'d'</span><span class="token string">'d'</span> <span class="token operator">===</span> <span class="token string">'\d'</span>这两个都是<span class="token boolean">true</span>说明\d和d没啥区别所以其实在对象中<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\d+\.\d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>上面的写法相当于下面的<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'d+.d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表一个或多个d然后.代表任意字符在连接上多个d</span>我们测试下对不对<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'dddd@ddd'</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>所以我们的猜想是正确的我们打印下console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'\d+\.\d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'd+.d'</span>我们在打印下console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'\\d+\\.\\d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// \d+\.\d</span>这样就符合使用对象创建正则表达式的结构了<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\\d+\\.\\d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">12.34</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>但是上面我们写的不严谨没有做边界处理，后续我们会说<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token string">'aaa12.34'</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 如果想匹配【/】那么也需要转义，因为/作为开始和结束的符合</span><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'https?://www.baidu.com'</span><span class="token punctuation">;</span><span class="token regex">/http:\/\/\w+\.\w+\.\w+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-字符边界约束"><a href="#6-字符边界约束" class="headerlink" title="6. 字符边界约束"></a>6. 字符边界约束</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcdefg8hijk'</span><span class="token punctuation">;</span><span class="token regex">/\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 代表从头查找找到数字就行 \d是匹配数字</span><span class="token operator">^</span>代表开头边界<span class="token regex">/^\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 代表字符串是以数字开头</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token string">'3abasa'</span><span class="token punctuation">;</span><span class="token regex">/^\d/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>$代表结束边界<span class="token regex">/^\d$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 代表开头位数字 结束也为数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-数值-d与空白-s元字符"><a href="#7-数值-d与空白-s元字符" class="headerlink" title="7. 数值\d与空白\s元字符"></a>7. 数值\d与空白\s元字符</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> \d  代表数值<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'1a2b3c4d'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['1']</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["1", "2", "3", "4"]</span>不加g的时候匹配完一个就不继续匹配了，加上g之后匹配完还继续匹配<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'123abc456'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["123", "456"] + 匹配一个或多个 这时候就匹配4个数字 </span><span class="token number">2</span><span class="token punctuation">.</span> \D  代表除了数字任何字符<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'1a2b3c4d'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\D+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ["a", "b", "c", "d"]</span><span class="token number">3</span><span class="token punctuation">.</span> \s 代表匹配空白 换行 制表tab<span class="token regex">/\s/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token regex">/\s/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a\nb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// \n 代表换行符 true</span><span class="token number">4</span><span class="token punctuation">.</span> \S 代表 匹配除了空白以外的字符str <span class="token operator">=</span> <span class="token string">'1a2b'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表匹配数字  ["1", "2"]</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[\d]/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[\D]/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["a", "b"]</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[^\d]/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表匹配非数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-w与W元字符"><a href="#8-w与W元字符" class="headerlink" title="8. w与W元字符"></a>8. w与W元字符</h2><pre class="line-numbers language-js"><code class="language-js">\w 代表匹配字母数字下划线<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'abcd12345efg678'</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["12345", "678"]</span>a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\w+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["abcd12345efg678"]</span>\W 匹配除了字母数字下划线<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'abcd12$345efg678%'</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\W+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["$", "%"]</span>自定义匹配密码，字母开头后跟字母数组下划线<span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token string">'a1233789_'</span><span class="token punctuation">;</span><span class="token regex">/^[a-z]\w{6,8}$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-点元字符的使用"><a href="#9-点元字符的使用" class="headerlink" title="9. 点元字符的使用"></a>9. 点元字符的使用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 【<span class="token punctuation">.</span>】 匹配除了换行符外的任何字符<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'aA1#_'</span><span class="token punctuation">;</span><span class="token regex">/.+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/.+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["aA1#_", index: 0, input: "aA1#_", groups: undefined]</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'aA1#_'</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> \<span class="token punctuation">.</span> 匹配点<span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^https?:\/\/\w+\.\w+\.\w+$/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["https://www.baidu.com"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-匹配所有字符"><a href="#10-匹配所有字符" class="headerlink" title="10. 匹配所有字符"></a>10. 匹配所有字符</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`a1@#$%^&amp;*()_+.A`</span></span><span class="token punctuation">;</span><span class="token regex">/[\d\D]+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token regex">/[\s\S]+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token regex">/[\w\W]+/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-i与g模式"><a href="#11-i与g模式" class="headerlink" title="11.  i与g模式"></a>11.  i与g模式</h2><pre class="line-numbers language-js"><code class="language-js">i 不区分大小写<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'WwW.BAI.du.com'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/w/ig</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["w", "W", "W"] 既想匹配不区分大小写，又不限制数量</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/w/ig</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-m多行匹配修正符实例"><a href="#12-m多行匹配修正符实例" class="headerlink" title="12. m多行匹配修正符实例"></a>12. m多行匹配修正符实例</h2><pre class="line-numbers language-js"><code class="language-js">对于有很多行的字符串，我们要想每一行单独对待使用 m 模式<span class="token keyword">let</span> lesson <span class="token operator">=</span> <span class="token template-string"><span class="token string">`#1 css: 100元 ##2 html: 200元 ##3 js: 300元 # 300元#4 vue: 400元 #`</span></span>lesson<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^\s*#\d+\s+.*\s+#$/mg</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> item<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s*#\d+\s+/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+#/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>lesson<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/^\s*#\d+\s+.*\s+#$/mg</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> price<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s*#\d+\s+/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+#/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> price <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-汉字与字符属性"><a href="#13-汉字与字符属性" class="headerlink" title="13. 汉字与字符属性"></a>13. 汉字与字符属性</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> \p<span class="token punctuation">{</span>L<span class="token punctuation">}</span> 检测每一个字符的属性是否有字母  \p<span class="token punctuation">{</span>L<span class="token punctuation">}</span>对于Unicode字母<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'I Love You'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\p{L}/gu</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["I", "L", "o", "v", "e", "Y", "o", "u"]</span><span class="token number">2</span><span class="token punctuation">.</span> \p<span class="token punctuation">{</span>N<span class="token punctuation">}</span>检测每一个字符的属性是否有字母 \p<span class="token punctuation">{</span>N<span class="token punctuation">}</span>对于Unicode数字<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'I 1 Love 2 You3'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\p{N}/gu</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 来返回一个数组  ["1", "2", "3"]</span><span class="token number">3</span><span class="token punctuation">.</span> \p<span class="token punctuation">{</span>P<span class="token punctuation">}</span> 只匹配标点符号<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"I don't know!"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\p{P}/gu</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ["'", "!"]</span><span class="token number">4</span><span class="token punctuation">.</span> \p<span class="token punctuation">{</span>sc<span class="token operator">=</span>Han<span class="token punctuation">}</span>  \p<span class="token punctuation">{</span>sc<span class="token operator">=</span>Han<span class="token punctuation">}</span> 只匹配匹配中文sc就是script简写 语言 Han代表汉语<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'我喜欢你!'</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\p{sc=Han}/gu</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["我", "喜", "欢", "你"]</span><span class="token regex">/\p{sc=Han}/gu</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true 检测是否有汉字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-正则的lastIndex属性的作用"><a href="#14-正则的lastIndex属性的作用" class="headerlink" title="14. 正则的lastIndex属性的作用"></a>14. 正则的lastIndex属性的作用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'suming'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\w/g</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">let</span> res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以获取每次一执行的序号，也可以获取其属性</span><span class="token comment" spellcheck="true">// 使用g全局模式的时候lastIndex会变化，lastIndex是从上次查找的位置的下标，下次查找是从上次查找的位置下继续查找 如果不使用g那么会一直在同一个位置，会卡死</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-有效率的y模式"><a href="#15-有效率的y模式" class="headerlink" title="15. 有效率的y模式"></a>15. 有效率的y模式</h2><pre class="line-numbers language-js"><code class="language-js">叫做“粘连”（sticky）修饰<span class="token punctuation">,</span> y修饰符的作用与g修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。<span class="token number">1</span><span class="token punctuation">.</span> g首先找到与之匹配的，然后在往后继续找是否还有与之匹配的，直到找不到与之匹配的为止<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcda'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/a/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// g首先找到a然后在往后继续找是否有啊</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 找不到的时候下标为0</span><span class="token number">2</span><span class="token punctuation">.</span> y会一直匹配符合条件，如果不符合就停止<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcda'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/a/y</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'aaaaa'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/a/y</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>总结：其实就是g会忽略不符合正则表达式要求的字符，再继续寻找下一个符合要求的，而y就是不忽略每一个字节都要去满足正则表达式<span class="token number">4</span><span class="token punctuation">.</span> 利用y模式提取有用的数字<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'爱丁堡上课时，1760135477，2457518079，1756760988,abcdefg，'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d+，?/y</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-区间匹配"><a href="#16-区间匹配" class="headerlink" title="16. 区间匹配"></a>16. 区间匹配</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token string">'2020'</span><span class="token punctuation">;</span>year<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/\d+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["2020", index: 0, input: "2020", groups: undefined]</span>year<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[0-9]+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["2020", index: 0, input: "2020", groups: undefined]</span>这两种是一样的<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>name<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]+/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["zcy"] [a-z]就是匹配26个字母，但是只是一个，因为使用+所以是贪婪模式</span>name<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["z", "c", "y"]</span><span class="token operator">+</span> 就是贪婪，匹配到符合要求之后，就一直往下匹配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-排除匹配"><a href="#17-排除匹配" class="headerlink" title="17. 排除匹配"></a>17. 排除匹配</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token operator">^</span><span class="token punctuation">]</span> 除了  都匹配<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'sm and zcy'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[^a, ]/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 除了a 和 空格都匹配 在原子表里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="18-原子表里的字符不解析"><a href="#18-原子表里的字符不解析" class="headerlink" title="18. 原子表里的字符不解析"></a>18. 原子表里的字符不解析</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'(1234)-5678'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[()]/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ()放到[]里面就是代表括号的意思，放到外面代表原子组</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/()/g</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["", "", "", "", "", "", "", "", "", "", "", ""]</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[.+]/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在原子表里就代表. 和 + 号 不在原子表里. + 代表元字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-嵌套分组与不记录组"><a href="#19-嵌套分组与不记录组" class="headerlink" title="19. 嵌套分组与不记录组"></a>19. 嵌套分组与不记录组</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/^https:\/\/\w{3}\.\w+\.(com|cn|net)$/</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>    <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">"https://www.baidu.com"</span>    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"com"</span>    groups<span class="token punctuation">:</span> undefined    index<span class="token punctuation">:</span> <span class="token number">0</span>    input<span class="token punctuation">:</span> <span class="token string">"https://www.baidu.com"</span>    length<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 数组的第一个元素代表匹配的成功的元素，第二个代表第一个原子表中的匹配的元素，如有多个原子表则依次类推</span><span class="token number">2</span><span class="token punctuation">.</span> 如果我们想要 【www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com】 不想要【<span class="token punctuation">.</span>com】我们需要把想要的用原子组括起来<span class="token punctuation">,</span>不想要的原子组使用【<span class="token operator">?</span><span class="token punctuation">:</span><span class="token function">】括起来也就是不记录分组，但是需要在原子组里面写</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">:</span><span class="token punctuation">)</span>在外面写就不一样了<span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/^https:\/\/(\w{3}\.\w+\.(com|cn|net))$/</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [ "https://www.baidu.com", "www.baidu.com", "com" ]</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/^https:\/\/(\w{3}\.\w+\.(?:com|cn|net))$/</span>console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ["https://www.baidu.com","www.baidu.com"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结一波：</p><p>?：匹配0个到一个，贪婪的，如果同时满足0和1就匹配1</p><p>*：匹配0个到任意，贪婪的，如果同时满足0和任意个就匹配任意个</p><p>+：匹配1个到任意，贪婪的，如果同时满足1和任意个就匹配任意个</p><p>同时以上都对一个字符起作用，如果需要对多个字符起作用，需要用原子组</p><h2 id="20-批量使用正则完成密码验证"><a href="#20-批量使用正则完成密码验证" class="headerlink" title="20. 批量使用正则完成密码验证"></a>20. 批量使用正则完成密码验证</h2><pre class="line-numbers language-js"><code class="language-js">有时候我们会遇到各种情况，比如最少一个大写字母，包括字母数字等，这时候一个正则无法满足，我们需要写多个正则<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'ab123Ddna'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token regex">/[A-Z]+/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 至少一个大写字母</span>    <span class="token regex">/\d+/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 至少一个数字</span>    <span class="token regex">/^[a-z\d]{6,9}$/i</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// </span><span class="token punctuation">]</span><span class="token punctuation">;</span>reg<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>等等还有至少包括下划线和数字，字母等都很简单的，可以自己练习哈<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-禁止贪婪"><a href="#21-禁止贪婪" class="headerlink" title="21. 禁止贪婪"></a>21. 禁止贪婪</h2><pre class="line-numbers language-js"><code class="language-js">我们在<span class="token operator">*</span>，<span class="token operator">+</span>，<span class="token operator">?</span>号的后面加上<span class="token operator">?</span>就代表禁止贪婪，其实很好理解<span class="token operator">?</span>本身代表<span class="token number">0</span>和<span class="token number">1</span><span class="token punctuation">,</span>而<span class="token operator">*</span>代表<span class="token number">0</span>和多，那肯定就取<span class="token number">0</span>个，而<span class="token operator">+</span>号代表<span class="token number">1</span>和多，那就取<span class="token number">1</span>，我们看例子<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'ddddd'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]??/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 禁止?贪婪就取0个 ['']</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]+/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["ddddd"]</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]+?/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['d']</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['adddd']</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]*?/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['']</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]{2,5}?/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 禁止贪婪就取少的2 ['ad']</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/[a-z]{2,}?/</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 原本意思是2到无限大个 现在禁止贪婪就取两个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-标签替换"><a href="#22-标签替换" class="headerlink" title="22. 标签替换"></a>22. 标签替换</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>1111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>2222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>3333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> divList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/&lt;div>([\s\S]+?)&lt;\/div>/gi</span><span class="token punctuation">;</span>divList<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> divList<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`&lt;h2 style="color: cyan"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h2>`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="23-符在正则替换中的使用"><a href="#23-符在正则替换中的使用" class="headerlink" title="23.  $符在正则替换中的使用"></a>23.  $符在正则替换中的使用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>不使用$符合<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'2020/12/3'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\//g</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2020-12-3"</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'(010)-123456 (010)-789012'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\((\d{3,4})\)-(\d{5,10})/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>使用$<span class="token number">1</span>，$<span class="token number">2</span>等符号<span class="token comment" spellcheck="true">// 如果使用函数则，里面的第一个参数为匹配到的字符串，第二个参数就是第一个原子表里的内容，第三个参数代表第二个原子表里的内容</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>$<span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>$<span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">'$1-$2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// $1 代表第一个原子表(括号)里的内容，$2代表第二个原子表(括号)里的内容以此类型</span>例子：<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"2020-11-24 09:30:00·2020-11-24 10:00:00;2020-11-24 11:00:00·2020-11-24 11:30:00"</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/(?:\d{4}-(?:\d{2}-(\d{2}))) (\d{2}:\d{2}):\d{2}/g</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 参数str代表原来字符串</span><span class="token keyword">let</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>$<span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "0930[24]·1000[24];1100[24]·1130[24]"</span>newStr<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">'·'</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ["0930[24]-1000[24]", "1100[24]-1130[24]"]</span><span class="token number">3</span><span class="token punctuation">.</span>使用<span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">></span>起原子组别名<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'180abc370&amp;&amp;&amp;9999'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?&lt;rewrite>\d+)/g</span><span class="token punctuation">,</span> <span class="token string">'$&lt;rewrite>~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span> $<span class="token operator">&amp;</span>符号代表符合条件的<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'a banana 123 of tree!'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/[a-z]+ ?/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["a ", "banana ", "of ", "tree"]</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\D/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 提取数字 123</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\D/g</span><span class="token punctuation">,</span> <span class="token string">'-$&amp;-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "-a-- --b--a--n--a--n--a-- -123- --o--f-- --t--r--e--e--!-"</span><span class="token number">5</span><span class="token punctuation">.</span> '$<span class="token template-string"><span class="token string">`'代表匹配的元素的前的那个字符let str = '￥1234';let reg = /\d+/g;str.replace(reg, '$`</span></span>'<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将匹配的元素用匹配前面的那个元素来替换</span><span class="token string">"￥￥"</span>将匹配到的元素替换到 匹配元素的前面<span class="token string">'￥'</span>的字符<span class="token number">6</span><span class="token punctuation">.</span> <span class="token string">"$'"</span>  代表匹配的元素的后面所有不匹配的字符<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'12a'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">"$'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'aa'</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'12ab'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">"$'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "abab"</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'12ab34'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d+/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">"$'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "ab34ab" 将12替换成12后面的'ab34' 将34替换为''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-正则exec方法和字符串match的区别"><a href="#24-正则exec方法和字符串match的区别" class="headerlink" title="24. 正则exec方法和字符串match的区别"></a>24. 正则exec方法和字符串match的区别</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 不使用g两者其实没什么区别<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'12345678'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d/</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["1", index: 0, input: "12345678", groups: undefined]</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["1", index: 0, input: "12345678", groups: undefined]</span><span class="token number">2</span><span class="token punctuation">.</span> 不使用g两者其实没什么区别<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'1234a5678'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/\d/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  ["1", "2", "3", "4", "5", "6", "7", "8"] 没有 index, input， groups的属性了</span><span class="token keyword">while</span><span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个打印的包括 index, input， groups的属性 这是两者的区别</span><span class="token punctuation">}</span>该方法可以统计符合正则要求的内容，在一个字符串中重复出现的次数<span class="token punctuation">,</span> 我们将其封装一个函数<span class="token keyword">function</span> <span class="token function">total</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> reg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-零宽先行断言"><a href="#25-零宽先行断言" class="headerlink" title="25. 零宽先行断言"></a>25. 零宽先行断言</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token function">语法</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span><span class="token punctuation">)</span> 不是一个组 只是一个条件 <span class="token number">0</span>宽就是不占位置 后面是谁 不在返回的结果中 <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'余生再无倾城色，一草一木皆相思！莫为儿孙役，余生能几何。'</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/余生(?=能)/g</span><span class="token punctuation">,</span><span class="token string">'love'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 就是替换【能】字前面的【余生】</span><span class="token comment" spellcheck="true">// 余生再无倾城色，一草一木皆相思！莫为儿孙役，love能几何。"</span><span class="token comment" spellcheck="true">// 将在元前面，没有.00的后面添加.00</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`js, 100元，css, 200.00元，1.002vue, 300元`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/(\d+)(\.00)?(?=元)/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token operator">...</span>arg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>    arg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">'.00'</span><span class="token operator">+</span>    <span class="token keyword">return</span> arg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> arg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// "js, 100.00元，css, 200.00元，1.002vue, 300.00元"</span>注意：先行断言的执行步骤是这样的先从要匹配的字符串中的最左边找到第一个元 <span class="token punctuation">(</span>也就是先行断言中的表达式<span class="token punctuation">)</span>然后 再匹配其前面的表达式，若无法匹配则继续查找第二个 元 再匹配第二个 元 前面的字符串，若能匹配则匹配，符合正则的贪婪性，先执行断言，在执行匹配字符串，因为断言总是先于正则匹配先执行，那么就是必须要放在正则后面<span class="token operator">/</span>\<span class="token function">d</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">=</span>a<span class="token punctuation">)</span><span class="token operator">/</span> 也就是先找到a然后在匹配a前面的\d也就是数字返回结果就是a前面为数字的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26-零宽后行断言"><a href="#26-零宽后行断言" class="headerlink" title="26.  零宽后行断言"></a>26.  零宽后行断言</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;=</span><span class="token punctuation">)</span> 后行断言就是先执行匹配字符串，然后在去查看 匹配字符串的断言 那么后行断言就必须要放在正则前面<span class="token operator">/</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;=</span>a<span class="token punctuation">)</span>\d<span class="token operator">/</span> 多了个小于号 我们可以把【<span class="token operator">&lt;=</span>】看成箭头，正常的是 【<span class="token operator">=</span><span class="token operator">></span>】 现在执行顺序是箭头向右的 <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy123zcy456'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/(?&lt;=zcy)\d+/</span><span class="token punctuation">;</span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["123", "456"]</span>注意：后行断言跟先行断言恰恰相反 它的执行步骤是这样的：先从要匹配的字符串中的最左端找到第一个 zcy <span class="token punctuation">(</span>也就是断言中的表达式<span class="token punctuation">)</span>然后 再匹配其后面的表达式，若无法匹配则继续查找第二个 zcy 再匹配第二个 zcy 后面的字符串，若能匹配则匹配。<span class="token keyword">let</span> tel <span class="token operator">=</span> <span class="token string">'18203709912'</span><span class="token punctuation">;</span>tel<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?&lt;=\d{7})\d{4}/</span><span class="token punctuation">,</span> <span class="token string">'****'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "1820370****"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27-零宽负向先行断言"><a href="#27-零宽负向先行断言" class="headerlink" title="27. 零宽负向先行断言"></a>27. 零宽负向先行断言</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">)</span> 后面不是什么我想取后面不是数字的字母<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy18203709912abc'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/[a-z]+(?!\d+)/g</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["zc", "abc"]</span><span class="token comment" spellcheck="true">// 我们想去后面不是数字的字母，且以字母结尾的</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcy18203709912abc'</span><span class="token punctuation">;</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/[a-z]+(?!\d+)$/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个$限制的是前面条件</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["abc"]</span>限制用户名不能输入某些关键字<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'zcyaaaa'</span><span class="token punctuation">;</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/^(?!.*zcy.*)\w+/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从开始往后面内容不能包括'zcy'</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="28-零宽负向后行断言"><a href="#28-零宽负向后行断言" class="headerlink" title="28. 零宽负向后行断言"></a>28. 零宽负向后行断言</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">)</span> 前面不是谁  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'abcdefghigklmn'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/(?&lt;!i)[a-z]/g</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 前面不是i的字母 </span> str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["a", "b", "c", "d", "e", "f", "g", "h", "i", "k", "l", "m", "n"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><p>0宽先行断言就是 后面是谁</p><p>0宽负向先行断言就是 后面不是谁</p><p>0宽后行断言 前面是谁</p><p>0宽负向后行断言 前面不是谁</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JS部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>走进JS</title>
      <link href="/2019/10/15/gotojs/"/>
      <url>/2019/10/15/gotojs/</url>
      
        <content type="html"><![CDATA[<h1 id="走进JS对象"><a href="#走进JS对象" class="headerlink" title="走进JS对象"></a>走进JS对象</h1><h2 id="1-属性的基本操作方法"><a href="#1-属性的基本操作方法" class="headerlink" title="1. 属性的基本操作方法"></a>1. 属性的基本操作方法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>①<span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 使用【.】读取属性，一般推荐使用【.】语法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>②<span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 使用【[]】读取属性,中括号里填字符的形式</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    <span class="token string">"my-age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">"a b"</span><span class="token punctuation">:</span> <span class="token string">'ab'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'sm'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这种特殊字符作为属性，只能用[]来访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token number">.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问不到,报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这种数字作为属性，只能用[]来访问</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>a b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问不到,报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">'a b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这种数字作为属性，只能用[]来访问</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// index是属性名</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这时候取得是user里的index属性</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'user[index]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这时候把index当成变量，获取对象里变量的值</span><span class="token punctuation">}</span><span class="token number">4</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 给对象添加属性</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新增属性</span>user<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 新增属性，值为函数</span><span class="token number">5</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 删除对象属性</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">delete</span> user<span class="token punctuation">.</span>age <span class="token comment" spellcheck="true">// 返回true删除成功</span>user<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断当前对象是否有这个属性 返回false</span><span class="token keyword">delete</span> user <span class="token comment" spellcheck="true">// 不能删除对象 只能删除属性 返回false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-对象的引用传址"><a href="#2-对象的引用传址" class="headerlink" title="2.  对象的引用传址"></a>2.  对象的引用传址</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> user2 <span class="token operator">=</span> user1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是将user1的内存地址传给user2，并不是传值，此时user1和user2共用一个内存地址</span><span class="token comment" spellcheck="true">// 所以 将其中一个改变，另一个也会改变</span>user1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 18</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    n<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会改变a的值么</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 其实是不会的，基本类型是传值</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>   payload<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'xm'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 会改变a的值么</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 其实是会的，引用类型是传址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-展开语法在对象中使用"><a href="#3-展开语法在对象中使用" class="headerlink" title="3. 展开语法在对象中使用"></a>3. 展开语法在对象中使用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 对象合并<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'zzz'</span><span class="token punctuation">}</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>user <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ...obj取得里面的结构</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> 如果两个对象中有同名属性合并之后怎么算呢<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'zzz'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">}</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>user <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {name: "zzz", age: 18}</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 如果我们调换顺序呢</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'zzz'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">26</span><span class="token punctuation">}</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>user<span class="token punctuation">,</span> <span class="token operator">...</span>obj <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {age: 26, name: "zzz"}</span>总结：因为一个对象中如果存在同名属性，那么后面的会覆盖掉前面属性，所以谁在后面显示谁的属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-解构赋值新增特性"><a href="#4-解构赋值新增特性" class="headerlink" title="4. 解构赋值新增特性"></a>4. 解构赋值新增特性</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token function">如果是展开语法是对数组和对象的批量处理，那么解构语法就是对</span><span class="token punctuation">(</span>元素<span class="token punctuation">)</span>数组和对象的结构的分解和处理<span class="token punctuation">,</span> 对结构进行分解<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">.</span>  我们可以把name属性的值赋值给其他变量<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> a<span class="token punctuation">,</span> age<span class="token punctuation">:</span> b <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将name属性的值赋值给a变量，age属性的值赋值给b变量</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'z' 18</span><span class="token number">2</span><span class="token punctuation">.</span>  我们也可以把name属性的值赋值给name，age属性的值赋值给age属性<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> age<span class="token punctuation">:</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'z' 18</span>对象属性，和赋值是一样的，可以简写如下<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span> 只要你是一个对象就可以对其进行解构<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回值是对象可以解构</span><span class="token number">4</span><span class="token punctuation">.</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'z' 18</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">5</span><span class="token punctuation">.</span> 我们可以接收其中几个，不用接收全部，其实就是你用哪个接收哪个<span class="token keyword">let</span> <span class="token punctuation">{</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'z'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>我们只接收name属性，不接收age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-严格模式中解构的差异"><a href="#5-严格模式中解构的差异" class="headerlink" title="5. 严格模式中解构的差异"></a>5. 严格模式中解构的差异</h2><pre class="line-numbers language-js"><code class="language-js">不使用严格模式的情况下<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'z'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token string">'use'</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们不用var，let，const声明会报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token function">我们使用</span><span class="token punctuation">(</span><span class="token punctuation">)</span>包起来<span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> a<span class="token punctuation">,</span> age<span class="token punctuation">:</span> b <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'z' 18 可以打印出来</span><span class="token number">3</span><span class="token punctuation">.</span>我们试试使用严格模式呢<span class="token string">"use strict"</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> a<span class="token punctuation">,</span> age<span class="token punctuation">:</span> b <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 还是会报错</span># 其实在写程序时<span class="token punctuation">,</span>最好都用严格模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-多层对象的解构操作"><a href="#6-多层对象的解构操作" class="headerlink" title="6. 多层对象的解构操作"></a>6. 多层对象的解构操作</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span>    lesson<span class="token punctuation">:</span> <span class="token punctuation">{</span>        content<span class="token punctuation">:</span> <span class="token string">'css'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> lesson <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'xm'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lesson<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { content: 'css' }</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> lesson<span class="token punctuation">:</span> <span class="token punctuation">{</span> content <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lesson赋值给{ content }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'xm'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'css'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-数组解构与对象解构"><a href="#7-数组解构与对象解构" class="headerlink" title="7. 数组解构与对象解构"></a>7. 数组解构与对象解构</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 正常的数组结构<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token operator">></span> <span class="token number">19</span>b<span class="token operator">=</span><span class="token operator">></span> <span class="token number">20</span><span class="token number">2</span><span class="token punctuation">.</span> 取其中某个值<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>a<span class="token operator">=</span><span class="token operator">></span> <span class="token number">10</span><span class="token number">3</span><span class="token punctuation">.</span>取其中某个值<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>b<span class="token operator">=</span><span class="token operator">></span> <span class="token number">11</span><span class="token number">4</span><span class="token punctuation">.</span> 数组个数，少于变量个数<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">></span> <span class="token number">19</span> <span class="token number">20</span> undefined<span class="token number">5</span><span class="token punctuation">.</span> 数组个数，少于变量个数，且赋值默认值<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">></span> <span class="token number">19</span> <span class="token number">20</span> <span class="token number">1</span><span class="token number">6</span><span class="token punctuation">.</span> 对象解构<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    character<span class="token punctuation">:</span> <span class="token string">'气人'</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> character <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> character<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'sm' '气人'</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> character<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> character<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'sm' '气人' undefined</span><span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> character<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> character <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有值的时候取默认值，有值的时候就不取默认值了</span><span class="token comment" spellcheck="true">// 'sm' '气人' 18</span>注意对象解构和数组解构不同的是，数组换位置值会变，对象换位置不会<span class="token keyword">let</span> <span class="token punctuation">{</span> character<span class="token punctuation">,</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> character<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 'sm' '气人'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-解构默认值实现配置项合并"><a href="#8-解构默认值实现配置项合并" class="headerlink" title="8. 解构默认值实现配置项合并"></a>8. 解构默认值实现配置项合并</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">creatElement</span><span class="token punctuation">(</span>option <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> backgroundColor <span class="token operator">=</span> <span class="token string">'cyan'</span> <span class="token punctuation">}</span> <span class="token operator">=</span> option<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> backgroundColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> creatDiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    creatDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> width <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    creatDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> height <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    creatDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> backgroundColor<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>creatDiv<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">creatElement</span><span class="token punctuation">(</span><span class="token punctuation">{</span> width <span class="token punctuation">:</span> <span class="token number">300</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-函数参数的解构特性使用技巧"><a href="#9-函数参数的解构特性使用技巧" class="headerlink" title="9. 函数参数的解构特性使用技巧"></a>9. 函数参数的解构特性使用技巧</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 函数参数为数组<span class="token keyword">function</span> show <span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['sm', 18] = [name, age]</span><span class="token punctuation">}</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sm'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span>函数参数为对象<span class="token keyword">function</span> show <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {name: 'sm', age: 18} = { name, age }</span><span class="token punctuation">}</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">.</span> 部分解构<span class="token keyword">function</span> show <span class="token punctuation">(</span>sex<span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sex<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//sex = '女' {name: 'sm', age: 18} = { name, age }</span><span class="token punctuation">}</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-对象与原型链属性检测实例"><a href="#10-对象与原型链属性检测实例" class="headerlink" title="10. 对象与原型链属性检测实例"></a>10. 对象与原型链属性检测实例</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 使用hasOwnProperty()检测当前对象是否有这个属性(不包括原型)</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// arr中有length属性</span> arr<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span> arr<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'concat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 使用in检测当前对象是否有这个属性(包括原型)</span><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'length'</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'concat'</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token function">改变原型</span><span class="token punctuation">(</span>原型可以理解父亲<span class="token punctuation">)</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span> Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 为obj2设置obj1新的父亲</span> obj1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span> obj1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'age'</span> <span class="token keyword">in</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-Object-assign-对象合并"><a href="#11-Object-assign-对象合并" class="headerlink" title="11. Object.assign()对象合并"></a>11. Object.assign()对象合并</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 合并两个对象，且两个对象没有相同属性的</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 往obj1里合并obj2,会改变obj1，不会改变obj2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "sm", age: 18 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// { age: 18 }</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 合并两个对象，且两个对象有相同属性的</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 往obj1里合并obj2,会改变obj1，不会改变obj2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "sm", age: 18 }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// { age: 18 }</span>也就是说如果对象存在相同属性，后面的对象属性会覆盖前面的对象的属性，这和我们前面说的也是符合的，同名属性后者会覆盖前面的<span class="token number">3</span><span class="token punctuation">.</span>其实Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的参数可以很多的，并不只是局限于合并两个对象，可以合并多个对象<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>    sex<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> obj3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 往obj1里合并obj2,会改变obj1，不会改变obj2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "sm", age: 18, sex: '女' }</span><span class="token number">4</span><span class="token punctuation">.</span>上面我们也可以这样来写<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>    sex<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token punctuation">{</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> sex<span class="token punctuation">:</span> 女 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 往obj1里合并obj2,会改变obj1，不会改变obj2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "sm", age: 18, sex: '女' }</span><span class="token number">5</span><span class="token punctuation">.</span>我们也可以使用【<span class="token operator">...</span>】展开运算符合并对象<span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>    sex<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>obj1<span class="token punctuation">,</span>    <span class="token operator">...</span>obj2<span class="token punctuation">,</span>    <span class="token operator">...</span>obj3<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// {name: "sm", age: 18, sex: "女"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-获取对象的值与属性"><a href="#12-获取对象的值与属性" class="headerlink" title="12. 获取对象的值与属性"></a>12. 获取对象的值与属性</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">.</span> 获取对象的所有键Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>返回来一个对象中所有【键】组成的数组<span class="token keyword">let</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["name", "age"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "xm", age: 18 },不会改变原对象</span><span class="token number">2</span><span class="token punctuation">.</span>获取对象的所有【属性值】，Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>返回来一个对象中所有【属性值】组成的【数组】<span class="token keyword">let</span> values <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["xm", 18]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "xm", age: 18 },不会改变原对象</span><span class="token number">3</span><span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>返回来一个数组，数组元素是由对象中【属性】与【属性值】组成的数组，属于一个二维数组<span class="token keyword">let</span> entries <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [["name", "xm"], ["age", 18]]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>entries<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以自己去控制台打印下</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "xm", age: 18 },不会改变原对象</span>总结：以上三个方法返回来的值都有迭代属性【iterator】，所以可以使用<span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span>来循环，<span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span>可以迭代对象<span class="token number">1</span><span class="token punctuation">.</span> 之前已经介绍过了，<span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span>不能遍历字面量对象<span class="token punctuation">,</span>因为没有迭代属性【iterator】# Uncaught TypeError<span class="token punctuation">:</span> obj is not iterable<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span>遍历对象属性<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// name age</span><span class="token punctuation">}</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span>遍历对象属性值<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'xm' 18</span><span class="token punctuation">}</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span>遍历对象<span class="token punctuation">,</span>属性与属性值<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// name xm,  age 18</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-对象的浅拷贝多种操作方法"><a href="#13-对象的浅拷贝多种操作方法" class="headerlink" title="13. 对象的浅拷贝多种操作方法"></a>13. 对象的浅拷贝多种操作方法</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xm'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {name: "zcy"} {name: "zcy"}</span><span class="token comment" spellcheck="true">// 此时我们改变obj1的name，obj2也会跟着变（第二节讲过了，不懂回看下)</span># 那么我想只改变其中的一个不想改变另一个怎么办呢？看下面例子<span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xm'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj4 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> obj3<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 此时是把obj1的值给复制了</span>那我们改变其中obj3中的name，obj会变么obj3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "zcy"}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "xm" }</span><span class="token comment" spellcheck="true">// 这两个对象看起来值一样，但是确是不同的对象，因为obj4是重新声明的，会在内存中重新开辟一块内存空间</span><span class="token number">2</span><span class="token punctuation">.</span> 上面对象是只有一个属性我们可以直接那样写，但是如果属性值很多我们还要一个一个写显然是不更灵活的，那么我们采用循环<span class="token keyword">let</span> obj5 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'女'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj6 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们先定义一个空对象，会在内存中重新开辟一块空间</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj5<span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj6<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj5<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "xm", age: 18, sex: "女" }</span>那么我们现在改变其中一个对象属性，另一个对象属性还会变么<span class="token punctuation">,</span>并没有变obj5<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "xm", age: 18, sex: "女" }</span><span class="token number">3</span><span class="token punctuation">.</span>我们也可以使用Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> obj7 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'女'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj8 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj7<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj8<span class="token punctuation">)</span><span class="token punctuation">;</span>obj7<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj7被改变了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj8没被改变</span><span class="token number">4</span><span class="token punctuation">.</span>我们也可以使用展开运算符<span class="token keyword">let</span> obj9 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'女'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj10 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj9 <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj10<span class="token punctuation">)</span><span class="token punctuation">;</span>obj9<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj9<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj9被改变了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj10<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj10没被改变</span>总而言之浅拷贝就是复制的值不能有对象，比如说name属性不能是个对象<span class="token keyword">let</span> obj11 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> sex<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">,</span> user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj12 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj11 <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj12<span class="token punctuation">)</span><span class="token punctuation">;</span>obj11<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj11<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj11被改变了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj12<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj12没被改变</span>obj11<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们改变了Obj11的user的name属性，我们看看obj12的name属性会不会变</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj11<span class="token punctuation">,</span> obj12<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: "zcy", age: 18, sex: "女", user: { name: "aaa" } };</span><span class="token function">事实证明是两个对象的值是会变得，那么也就是说，如果使用以上的任何一种方式来，进行复制对象，那么都是浅拷贝，比如对象里的属性值还为对象这种</span><span class="token punctuation">(</span>多层次的对象<span class="token punctuation">)</span>，复制值的时候就是传地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-深拷贝多层次分析"><a href="#14-深拷贝多层次分析" class="headerlink" title="14. 深拷贝多层次分析"></a>14. 深拷贝多层次分析</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span>深拷贝函数<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> tempObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tempObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>  obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tempObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只改变了自己</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没有改变</span><span class="token number">2</span><span class="token punctuation">.</span>但是我们改写一下obj<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> tempObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tempObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>  obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tempObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 克隆之后的a就不是一个数组的，而是一个对象这样就不对了</span>我们需要改进一下<span class="token number">3</span><span class="token punctuation">.</span> 改进区分数组与对象<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> tempObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tempObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>  obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tempObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>现在我们打印结果发现里面的值是一样的<span class="token number">4</span><span class="token punctuation">.</span> 改进保持顺序一致<span class="token punctuation">,</span>使用 <span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span><span class="token comment" spellcheck="true">//因为Object.entries(obj)返回来的顺序是根据原来的对象顺序是一致的，所以我们使用这个保持和原来的对象顺序一致</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>     name<span class="token punctuation">:</span> <span class="token string">'xm'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// let tempObj = Array.isArray(obj) ? [] : {};</span>    <span class="token keyword">let</span> tempObj <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">:</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tempObj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> cloneObj <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-使用构造函数创建数据"><a href="#15-使用构造函数创建数据" class="headerlink" title="15. 使用构造函数创建数据"></a>15. 使用构造函数创建数据</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span> 构造函数创建对象<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>对象的constructor指向它的构造函数为Object，也可以看对象原型上的方法哦<span class="token number">2</span><span class="token punctuation">.</span>构造函数创建数字<span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对象，可以查看number类型上面的所有方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1我们字面量创建的时候就是相当于，使用构造函数创建在使用valueOf获取数值的</span><span class="token number">3</span><span class="token punctuation">.</span>构造函数创建字符串<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'啦啦啦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对象，可以查看string类型上面的所有方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">.</span>构造函数创建boolean值<span class="token keyword">let</span> F <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>F<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false 可以打印查看boolean所有的方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>F<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'false' 字符串false</span>可以看到boolean只有两个方法<span class="token number">5</span><span class="token punctuation">.</span>构造函数创建日期<span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 时间戳</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-获取对象的属性特征"><a href="#16-获取对象的属性特征" class="headerlink" title="16. 获取对象的属性特征"></a>16. 获取对象的属性特征</h2><pre class="line-numbers language-js"><code class="language-js"># <span class="token number">1</span><span class="token punctuation">.</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> attr<span class="token punctuation">)</span>obj为需要获取的特征对象，attr为该对象属性该方法可以获取，对象某一属性特征的描述obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">"sm"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 该属性的值</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 属性是否可以重新配置特征，比如删除,新增属性</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 属性是否可以遍历，或者是可以理解使用Object.keys()能不能读取出来内容</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 是否可写，也就是是否可以修改，为true代表可以修改</span><span class="token punctuation">}</span># <span class="token number">2</span><span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>obj为需要获取的特征对象该方法可以获取，对象所有属性特征的描述obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-灵活的控制属性的特征"><a href="#17-灵活的控制属性的特征" class="headerlink" title="17.  灵活的控制属性的特征"></a>17.  灵活的控制属性的特征</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Object.defineProperty(obj, attr, option)</span>obj为需要设置的对象，attr为该对象的属性，option为设置该属性的特征对象该方法可以改变，对象某一属性的特征obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 修改属性特征【writable: false】属性值不能修改</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    writable<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 设置不可修改</span><span class="token punctuation">}</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>我们设置name属性特征为不可修改，设置完之后，我们在修改name属性<span class="token punctuation">,</span>在打印obj发现没有修改成功<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 修改属性特征【enumerable: false】属性值不能被遍历</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 设置不可被遍历</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ["age"]</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [18]</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ [ "age", 18 ] ]</span><span class="token number">3</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 修改属性特征【configurable: false】属性值不能被删除</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 设置不能被删除</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>我们发现，并没有删除成功当我们把configurable设置为<span class="token boolean">false</span>，我们不能在重新配置也就是重新使用，下面方法，否则会报错<span class="token punctuation">,</span>如下图Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 设置不能重新配置</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​                                     <a href="https://imgbed.cn" target="_blank" rel="noopener"><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/638671f5-b5d7-49f7-b3c3-5ed8e3e4da35.png" alt="imgbed.cn图床"></a></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Object.defineProperties(obj,option);</span>obj为需要设置属性特征的对象，option为各个属性组成的配置，该方法为对多个属性进行设置特征Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> <span class="token string">'ll'</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        writable<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-阻止向对象中添加属性"><a href="#18-阻止向对象中添加属性" class="headerlink" title="18. 阻止向对象中添加属性"></a>18. 阻止向对象中添加属性</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1. Object.preventExtensions(obj);  </span>英文意思：prevent Extensions 阻止扩展使用该方法设置对象后，则该对象不允许添加新的属性<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们企图添加sex属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {name: "sm", age: 18} 没有添加成功，</span><span class="token comment" spellcheck="true">// 2. Object.isExtensible(obj);</span>该方法返回boolean值，判断是否能够添加属性，如果为真则能添加属性，如果为假添加不了属性例如<span class="token punctuation">:</span> 我们可以使用下面这样进行判断<span class="token punctuation">,</span>如果返回<span class="token boolean">true</span>，则说明，对象没有被保护则可扩展（进行添加属性）<span class="token keyword">if</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 我们添加sex属性 </span><span class="token punctuation">}</span># 注意：使用Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法只是不能添加，但是可以修改和删除obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zcy'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>以上方法方法，对象是会改变的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="19-Object-seal"><a href="#19-Object-seal" class="headerlink" title="19. Object.seal()"></a>19. Object.seal()</h2><pre class="line-numbers language-js"><code class="language-js">该方法为封闭对象，所谓封闭对象，就是不允许添加，删除对象属性，也不可以修改对象特征，但可以修改对象值<span class="token keyword">let</span> user<span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用此操作相当于改变了对象的特征【configurable】为【false】不信的话可打印对象特征查</span>obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'女'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>当我么使用Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>之后，我们添加和删除对象对象属性，对象是不会改变的<span class="token punctuation">,</span>相当于把【configurable】变为<span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-Object-isSealed"><a href="#20-Object-isSealed" class="headerlink" title="20. Object.isSealed()"></a>20. Object.isSealed()</h2><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">isSealed</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 判断对象是否是封闭对象</span>该方法返回boolean值，如果为<span class="token boolean">true</span>则说明该对象已经被封闭，为<span class="token boolean">false</span>则说明该对象没有被封闭<span class="token keyword">let</span> user<span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">isSealed</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 如果对象没封闭我们添加属性</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Object<span class="token punctuation">.</span><span class="token function">isSealed</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    user<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'女'</span>；<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-Object-freeze"><a href="#21-Object-freeze" class="headerlink" title="21. Object.freeze()"></a>21. Object.freeze()</h2><pre class="line-numbers language-js"><code class="language-js">冻结对象<span class="token keyword">let</span> user<span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token punctuation">.</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印下未冻结前的对象特征</span><span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token punctuation">{</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        writable<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token punctuation">{</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> <span class="token string">"sm"</span><span class="token punctuation">,</span>        writable<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span><span class="token punctuation">.</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptors</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打印下冻结后的对象特征</span><span class="token punctuation">{</span>    age<span class="token punctuation">:</span> <span class="token punctuation">{</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token punctuation">{</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        value<span class="token punctuation">:</span> <span class="token string">"sm"</span><span class="token punctuation">,</span>        writable<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>其实就是改变了【configurable】，【writable】属性，所以冻结之后就是不能修改属性值，和不能删除属性，不能重新配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-Object-isFrozen"><a href="#22-Object-isFrozen" class="headerlink" title="22. Object.isFrozen()"></a>22. Object.isFrozen()</h2><pre class="line-numbers language-js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>返回boolean，<span class="token boolean">true</span> 说明该对象被冻结了 <span class="token boolean">false</span>说明该对象没被冻结<span class="token keyword">let</span> user<span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="23-使用访问器保护数据set-get"><a href="#23-使用访问器保护数据set-get" class="headerlink" title="23. 使用访问器保护数据set get"></a>23. 使用访问器保护数据set get</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">let</span> user<span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">!==</span> number <span class="token operator">||</span> number <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> number <span class="token operator">></span> <span class="token number">110</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age    <span class="token punctuation">}</span><span class="token punctuation">}</span>user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token number">2</span><span class="token punctuation">.</span> 访问器与普通赋值方式的的优先级比较<span class="token keyword">let</span> user<span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { name: 'sm' } 最终发现返回user丢失了age属性，说明访问器比普通赋值方式的的优先级高</span><span class="token number">3</span><span class="token punctuation">.</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>给属性定义<span class="token keyword">get</span>， <span class="token keyword">set</span>obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'sm'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-使用Proxy代理控制对象"><a href="#24-使用Proxy代理控制对象" class="headerlink" title="24. 使用Proxy代理控制对象"></a>24. 使用Proxy代理控制对象</h2><pre class="line-numbers language-js"><code class="language-js">代理相当于中介<span class="token punctuation">,</span><span class="token number">1</span>其实还是访问原对象，只不过多了中介，比属性访问器多了两个参数<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> game<span class="token punctuation">:</span> <span class="token string">'LOL'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>property<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>property<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>property<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        object<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> valuue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proxy<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="25-使用代理Proxy控制函数"><a href="#25-使用代理Proxy控制函数" class="headerlink" title="25. 使用代理Proxy控制函数"></a>25. 使用代理Proxy控制函数</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> num <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>factorial<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> argus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> argus<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>factorial<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">bind</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> argus<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> argus<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// func 代表原函数 argus， obj 代表上下文对象就是this， 代表传过来的参数不过是以数组形式存在,因为apply是数组传参所以就是数组形式</span><span class="token function">proxy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proxy<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果这样使用这时的obj就是window了，不传默认undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="26-数组使用代理拦截操作"><a href="#26-数组使用代理拦截操作" class="headerlink" title="26. 数组使用代理拦截操作"></a>26. 数组使用代理拦截操作</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> array<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">'你所获取得值暂时没有定义哦！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>proxy<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>proxy<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="27-JSON数据"><a href="#27-JSON数据" class="headerlink" title="27. JSON数据"></a>27. JSON数据</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token function">转为JSON格式语法：任何格式</span><span class="token punctuation">(</span>数组，对象，字符串等<span class="token punctuation">)</span>都可以变为JSON格式JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> movie<span class="token punctuation">:</span> <span class="token string">'调音师'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "{"movie":"调音师"}"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// string 字符串类型</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 解析JSON对象</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转为对象</span><span class="token comment" spellcheck="true">// 第二个参数可以为回调函数</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="28-JSON序列化"><a href="#28-JSON序列化" class="headerlink" title="28. JSON序列化"></a>28. JSON序列化</h2><pre class="line-numbers language-js"><code class="language-js">序列化 <span class="token punctuation">(</span>Serialization<span class="token punctuation">)</span>是将对象的状态信息转换为可以存储或传输的形式的过程<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> job<span class="token punctuation">:</span> <span class="token string">'teacher'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> movie<span class="token punctuation">:</span> <span class="token string">'调音师'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'job'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示只留一个job属性</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'job'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第三个参数表示Tab字表位，格式</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第二个参数为null或者不写就是保留全部</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JS部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grid布局</title>
      <link href="/2019/09/28/flex/"/>
      <url>/2019/09/28/flex/</url>
      
        <content type="html"><![CDATA[<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><h1 id="一、flex-container的属性"><a href="#一、flex-container的属性" class="headerlink" title="一、flex container的属性"></a>一、flex container的属性</h1><h2 id="1-flex-items"><a href="#1-flex-items" class="headerlink" title="1. flex items"></a>1. flex items</h2><ul><li>默认沿着主轴方向从 main start 到main end方向 依次排列</li></ul><h2 id="2-justify-content"><a href="#2-justify-content" class="headerlink" title="2. justify-content"></a>2. justify-content</h2><ul><li>决定了flex item在main axis上的对齐方式</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> // 默认值 与main start对齐<span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> // 与main end对齐<span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> // 居中对齐<span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span> // space空间的意思 flex item 靠main start 和main end两边 剩下的<span class="token number">0</span>或多个平均在中间显示<span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span> // flex item 距离main start， main end两边的间隔 等于 flex item之间的间隔的一半<span class="token property">justify-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span> // flex item均匀的间隔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-flex-direction"><a href="#3-flex-direction" class="headerlink" title="3. flex-direction"></a>3. flex-direction</h2><ul><li>决定了主轴的方向</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span> // 默认值row 水平方向从左到右<span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span> // 垂直方向从上到下<span class="token property">flex-direction</span><span class="token punctuation">:</span> row-reverse<span class="token punctuation">;</span> // 水平方向从右到左<span class="token property">flex-direction</span><span class="token punctuation">:</span> column-reverse<span class="token punctuation">;</span> // 垂直方向从下到上 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-align-items"><a href="#4-align-items" class="headerlink" title="4. align-items"></a>4. align-items</h2><ul><li>决定了flex items在cross axis上的对齐方式</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">align-items</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span> // 默认值 在弹性布局在和stretch（拉紧）效果一样 <span class="token property">aligin-items</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span> // 当flex items在cross axis方向的size为auto时，会自动拉伸至填充flexcontainer类似一柱擎天效果。其实就是不设置flex item的高度会引起这个效果<span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> // 与cross start对齐<span class="token property">align-items</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> // 与cross end对齐<span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> // cross中心点对齐<span class="token property">align-items</span><span class="token punctuation">:</span> baseline<span class="token punctuation">;</span> // 与基准线对齐<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-flex-wrap"><a href="#5-flex-wrap" class="headerlink" title="5. flex-wrap"></a>5. flex-wrap</h2><ul><li>决定了flex container是单行还是多行</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 默认情况下，所有的flex items都会在同一行显示 */</span><span class="token property">flex-wrap</span><span class="token punctuation">:</span> no-wrap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 默认值no-wrap 单行 */</span><span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 多行 */</span><span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap-reverse<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 多行 对比 wrap,cross start 与cross end相反 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-flex-flow"><a href="#6-flex-flow" class="headerlink" title="6. flex-flow"></a>6. flex-flow</h2><ul><li>flex-direction || flex-wrap的缩写</li></ul><pre class="line-numbers language-css"><code class="language-css">可以省略，顺序任意<span class="token property">flex-flow</span><span class="token punctuation">:</span> flex-end wrap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-align-content"><a href="#7-align-content" class="headerlink" title="7. align-content"></a>7. align-content</h2><ul><li>决定多行flex items在cross axis 上的对齐方式用法与justifiy-content类似</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">align-content</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span> // <span class="token punctuation">(</span>默认值<span class="token punctuation">)</span> 与align-items的stretch类似<span class="token property">align-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span> // 与cross start对齐<span class="token property">align-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span> // 与cross end对齐 相当于沿着cross axis轴 平移到cross start<span class="token property">align-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> // 居中对齐<span class="token property">align-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span> // space空间的意思 flex item 靠cross start 和cross end两边 剩下的<span class="token number">0</span>或多个平均在中间显示<span class="token property">align-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span> // flex item cross start， cross end两边的间隔 等于 flex item之间的间隔的一半<span class="token property">align-content</span><span class="token punctuation">:</span> space-evenly<span class="token punctuation">;</span> // flex item均匀的间隔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-开启flex布局"><a href="#8-开启flex布局" class="headerlink" title="8. 开启flex布局"></a>8. 开启flex布局</h2><pre class="line-numbers language-css"><code class="language-css"><span class="token number">1.</span> <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> // 开启之后是块级元素<span class="token number">2.</span> <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span> // 开启之后是行内元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="二、flex-item的属性"><a href="#二、flex-item的属性" class="headerlink" title="二、flex item的属性"></a>二、flex item的属性</h1><h2 id="1-order"><a href="#1-order" class="headerlink" title="1. order"></a>1. order</h2><ul><li>order 决定了 flex items 的排布顺序</li><li>默认值是 0 </li><li>可以设置任意整数（正整数、负整数、0），值越小就越排在前面</li></ul><h2 id="2-align-self"><a href="#2-align-self" class="headerlink" title="2. align-self"></a>2. align-self</h2><ul><li>可以通过 <strong>aligin-self</strong> 覆盖 <strong>flex container</strong>设置的align-items属性</li><li>auto(默认值) 遵循 <strong>flex container</strong>设置的align-items属性</li><li>stretch、flex-start、flex-end、center、baseline、效果跟align-items一致，只不够是单独设置某一个item的排列方式</li></ul><h2 id="3-flex-grow"><a href="#3-flex-grow" class="headerlink" title="3. flex-grow"></a>3. flex-grow</h2><ul><li>grow 生长、成长的意思</li><li>flex-grow决定了<strong>flex items</strong>如何扩展</li><li>可以设置任意非负数字（正小数、正整数、0），默认值是0</li><li>当flex container在main axis方向上有剩余size时后，flex-grow属性才会生效</li><li>如果所有flex items的flex-grow总和sum 超过 1，每个flex item扩展 size 为 *<em>flex container *</em> 剩余的size / sum * flex-grow 其实就是平分暂几份</li><li>如果所有flex items的flex-grow总和sum 小于 1，每个flex item扩展 size 为  *<em>flex container *</em> 剩余的size * flex-grow</li><li>flex items 扩展后的最终size不能超过 max-width \ max-height</li></ul><h2 id="4-flex-shrink"><a href="#4-flex-shrink" class="headerlink" title="4. flex-shrink"></a>4. flex-shrink</h2><ul><li>shrink 收缩的意思</li><li>flex-shrink决定了flex items 如何收缩</li><li>可以设置任意非负数字（正小数、正整数、0），默认值是1</li><li>当flex items 在main axis方向上超过了flexcontainer的size， flex-shrink属性才会生效</li><li>如果所有flex items 的flex-shrink总和超过1，每个 flex item 收缩的size为 flex items超出flex container的 <strong>(size / sum)* flex-shrink</strong></li><li>如果所有flex items 的flex-shrink总和小与1， 每个 flex item 收缩的size为 flex items超出flex container的size * flex-shrink会收缩不完</li><li>flex items 收缩后的最终size 不能小于 min-width / min-height</li></ul><h2 id="5-flex-basis"><a href="#5-flex-basis" class="headerlink" title="5. flex-basis"></a>5. flex-basis</h2><ul><li>设置flex items在main axis方向上的base size</li><li>auto (默认值) 、具体的宽度数值 原来的宽度是多少就是多少<ul><li>flex-basis: auto;</li></ul></li><li>同时设置 width 和flex-basis flex-basis起作用<ul><li>flex-basis: 200px;</li><li>width: 100px;</li><li>最终flex-items宽度为200px</li></ul></li><li>决定flex items最终size（大小）因素的优先级<ul><li>max-width / max-height / min-width/ min-height</li><li>flex-basis</li><li>width / height</li><li>内容撑起的宽度，高度</li></ul></li></ul><h2 id="6-flex"><a href="#6-flex" class="headerlink" title="6. flex"></a>6. flex</h2><ul><li>flex是一个缩写属性，flex-grow || flex-shrink || flex-basis的简写，flex属性可以指定1个，2个，或3个值</li><li>单值语法：值必须为以下其中一个：<ul><li>一个无单位数（number类型）会被当成<strong>flex-grow</strong>的值</li><li>一个有效的宽度（width）值 带单位的例如px 会被当成<strong>flex-basis</strong>的值</li><li>关键字none，auto或initial</li></ul></li><li>双值语法：<ul><li>第一个值必须为无单位的值，并且第一个值会被当作<strong>flex-grow</strong>属性的值</li><li>第二个值必须为以下之一：<ul><li>一个无单位数会被当作<strong>flex-shrink</strong>的值</li><li>一个有效宽度值，带单位的，当作<strong>flex-basis</strong>的值</li></ul></li></ul></li><li>三值语法：<ul><li>第一个值必须是无单位的，当作<strong>flex-grow</strong>属性的值</li><li>第二个值必须是无单位的，当作<strong>flex-shrink</strong>属性的值</li><li>第三个之必须是有单位的有效值，当作<strong>flex-basis</strong>属性的值</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CSS部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grid布局</title>
      <link href="/2019/09/25/grid/"/>
      <url>/2019/09/25/grid/</url>
      
        <content type="html"><![CDATA[<h1 id="grid布局-网格布局"><a href="#grid布局-网格布局" class="headerlink" title="grid布局(网格布局)"></a>grid布局(网格布局)</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="1-grid布局作用"><a href="#1-grid布局作用" class="headerlink" title="1. grid布局作用"></a>1. grid布局作用</h3><ul><li><strong>grid</strong>布局将容器划分为行和列，产生单元格</li><li>指定 item 所在的单元格（二位布局）</li></ul><h3 id="2-grid布局基本概念"><a href="#2-grid布局基本概念" class="headerlink" title="2. grid布局基本概念"></a>2. grid布局基本概念</h3><ul><li>采用网格布局的元素成为容器，容器内部采用网格定位的直接子元素 称为<strong>item</strong><ul><li>开启grid布局</li><li>display: grid；</li><li>display: inline-grid;</li><li>作用与 flex、inline-flex一样</li><li>设为网格布局以后，容器子元素（项目）的<code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code>和<code>column-*</code>等设置都将失效。</li></ul></li></ul><h2 id="二、容器（container）属性"><a href="#二、容器（container）属性" class="headerlink" title="二、容器（container）属性"></a>二、容器（container）属性</h2><h3 id="1-gird-template-columns、grid-template-rows"><a href="#1-gird-template-columns、grid-template-rows" class="headerlink" title="1. gird-template-columns、grid-template-rows"></a>1. gird-template-columns、grid-template-rows</h3><p>容器指定了网格布局以后，接着就要划分行和列。<code>grid-template-columns</code>属性定义每一列的列宽，<code>grid-template-rows</code>属性定义每一行的行高。</p><h4 id="1-gird-template-columns"><a href="#1-gird-template-columns" class="headerlink" title="1. gird-template-columns"></a>1. gird-template-columns</h4><ul><li>定义每一列的宽</li></ul><h4 id="2-grid-template-rows"><a href="#2-grid-template-rows" class="headerlink" title="2. grid-template-rows"></a>2. grid-template-rows</h4><ul><li>定义每一行的行高</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** 除了使用绝对单位，也可以使用百分比。**/</span><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">33.33%</span> <span class="token number">33.33%</span> <span class="token number">33.33%</span><span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">33.33%</span> <span class="token number">33.33%</span> <span class="token number">33.33%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-repeat-函数"><a href="#3-repeat-函数" class="headerlink" title="3. repeat()函数"></a>3. repeat()函数</h4><ol><li>有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用repeat()函数，简化重复的值。上面的代码用repeat()改写如下。</li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">33.33%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span>, <span class="token number">33.33%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>repeat()接受两个参数:</li></ol><ul><li>第一个参数是重复的次数（上例是3）</li><li>第二个参数是所要重复的值。</li></ul><ol start="3"><li><p>repeat()重复某种模式也是可以的。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">100</span>px <span class="token number">20</span>px <span class="token number">80</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>上面代码定义了<span class="token number">6</span>列，第一列和第四列的宽度为<span class="token number">100</span>px，第二列和第五列为<span class="token number">20</span>px，第三列和第六列为<span class="token number">80</span>px。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="4-auto-fill-关键字"><a href="#4-auto-fill-关键字" class="headerlink" title="4. auto-fill 关键字"></a>4. <strong>auto-fill 关键字</strong></h4><p>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用<code>auto-fill</code>关键字表示自动填充。</p><ul><li><p>auto 自动</p></li><li><p>fill 填充</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill, <span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>表示每列宽度<span class="token number">100</span>px，然后自动填充，直到容器不能放置更多的列。<span class="token punctuation">(</span>比flex智能点<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5-fr-关键字"><a href="#5-fr-关键字" class="headerlink" title="5. fr 关键字"></a>5. <strong>fr 关键字</strong></h4><ol><li>为了方便表示比例关系，网格布局提供了<code>fr</code>关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为<code>1fr</code>和<code>2fr</code>，就表示后者是前者的两倍</li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">1</span>fr <span class="token number">1</span>fr<span class="token punctuation">;</span><span class="token punctuation">}</span>上面代码表示两个相同宽度的列。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><code>fr</code>可以与绝对长度的单位结合使用，这时会非常方便。</li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">150</span>px <span class="token number">1</span>fr <span class="token number">2</span>fr<span class="token punctuation">;</span><span class="token punctuation">}</span>上面代码表示，第一列的宽度为<span class="token number">150</span>像素，第二列的宽度是第三列的一半。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-minmax"><a href="#6-minmax" class="headerlink" title="6. minmax()"></a>6. <strong>minmax()</strong></h4><p><code>minmax()</code>函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">grid-template-columns: 1fr 1fr minmax(100px, 1fr);我的理解：1.我们假设容器的宽度 900px先算1fr 等于多少px 900px / 3fr = 300px  1fr = 300px所以分三列 300px 300px 300px2. 我们假设容器宽度270px先算 1fr 等于 多少 270px / 3fr = 90px 1fr = 90px然后 90px 小于最小的100px 我们选100px270px - 100px = 170px 我们重新计算1fr = 170px / 2fr= 85px所以列的宽度85px 85px 100px带着这个猜想我去验证了下 果然没错 将width 改为270 和900 分别验证下 代码如下&lt;style>        <span class="token class">.grid</span> </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#aaaaaa</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">270</span>px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>            <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">1</span>fr <span class="token number">1</span>fr <span class="token function">minmax</span><span class="token punctuation">(</span><span class="token number">100</span>px, <span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid-item</span> </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid-item-1</span> </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> cadetblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid-item-2</span> </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.grid-item-3</span> </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    &lt;/style>&lt;div class=<span class="token string">"grid"</span>>    &lt;div class=<span class="token string">"grid-item grid-item-1"</span>><span class="token number">1</span>&lt;/div>    &lt;div class=<span class="token string">"grid-item grid-item-2"</span>><span class="token number">2</span>&lt;/div>    &lt;div class=<span class="token string">"grid-item grid-item-3"</span>><span class="token number">3</span>&lt;/div>&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-auto"><a href="#7-auto" class="headerlink" title="7. auto"></a>7. auto</h4><ul><li><code>auto</code>关键字表示由浏览器自己决定长度。</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto <span class="token number">100</span>px<span class="token punctuation">;</span>上面代码中，第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了min-width，且这个值大于最大宽度。一般可以用于两头固定 中间自适应<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto auto <span class="token number">100</span>px<span class="token punctuation">;</span>也可以设置多个auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-网格线的名称"><a href="#8-网格线的名称" class="headerlink" title="8. 网格线的名称"></a>8. <strong>网格线的名称</strong></h4><p><code>grid-template-columns</code>属性和<code>grid-template-rows</code>属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> [c<span class="token number">1</span>] <span class="token number">100</span>px [c<span class="token number">2</span>] <span class="token number">100</span>px [c<span class="token number">3</span>] auto [c<span class="token number">4</span>]<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> [r<span class="token number">1</span>] <span class="token number">100</span>px [r<span class="token number">2</span>] <span class="token number">100</span>px [r<span class="token number">3</span>] auto [r<span class="token number">4</span>]<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">上面代码指定网格布局为3行 x 3列，因此有4根垂直网格线和4根水平网格线。方括号里面依次是这八根线的名字。网格布局允许同一根线有多个名字，比如<span class="token attribute">[c1 r1]</span>。<span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> [c<span class="token number">1</span> r<span class="token number">1</span>] <span class="token number">100</span>px [c<span class="token number">2</span>] <span class="token number">100</span>px [c<span class="token number">3</span>] auto [c<span class="token number">4</span>]<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> [r<span class="token number">1</span>] <span class="token number">100</span>px [r<span class="token number">2</span>] <span class="token number">100</span>px [r<span class="token number">3</span>] auto [r<span class="token number">4</span>]<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-布局实例"><a href="#9-布局实例" class="headerlink" title="9. 布局实例"></a>9. <strong>布局实例</strong></h4><p><code>grid-template-columns</code>属性对于网页布局非常有用。两栏式布局只需要一行代码。</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrapper</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">70%</span> <span class="token number">30%</span><span class="token punctuation">;</span><span class="token punctuation">}</span>上面代码将左边栏设为<span class="token number">70%</span>，右边栏设为<span class="token number">30%</span>。传统的十二网格布局，写起来也很容易<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">12</span>, <span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-grid-row-gap和grid-column-gap"><a href="#2-grid-row-gap和grid-column-gap" class="headerlink" title="2. grid-row-gap和grid-column-gap"></a>2. grid-row-gap和grid-column-gap</h3><ul><li><p>gap: 开口; 豁口; 缺口</p></li><li><p><code>grid-row-gap</code>属性设置行与行的间隔（行间距），<code>grid-column-gap</code>属性设置列与列的间隔（列间距）。</p></li><li><p>最新标准，属性名的grid-前缀已经删除，写为row-gap、  column-gap</p></li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-row-gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">grid-column-gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>grid-row-gap</code>用于设置行间距，<code>grid-column-gap</code>用于设置列间距。</p><h3 id="3-grid-gap"><a href="#3-grid-gap" class="headerlink" title="3. grid-gap"></a>3. grid-gap</h3><ul><li><p><code>grid-gap</code>属性是<code>grid-column-gap</code>和<code>grid-row-gap</code>的合并简写形式，语法如下。</p></li><li><p>最新标准，属性名的grid-前缀已经删除，写为gap</p></li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">grid-gap: &lt;grid-row-gap> &lt;grid-column-gap>;因此，上面一段 CSS 代码等同于下面的代码。<span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">如果grid-gap省略了第二个值，浏览器认为第二个值等于第一个值。<span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-gap</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-grid-template-areas"><a href="#4-grid-template-areas" class="headerlink" title="4. grid-template-areas"></a>4. grid-template-areas</h3><ul><li>网格布局允许指定<strong>区域</strong>（area），一个区域由单个或多个单元格组成。<code>grid-template-areas</code>属性用于定义区域。</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">1.<span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">'a b c'</span>                       <span class="token string">'d e f'</span>                       <span class="token string">'g h i'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>上面代码先划分出<span class="token number">9</span>个单元格，然后将其定名为a到i的九个区域，分别对应这九个单元格。多个单元格合并成一个区域的写法如下。<span class="token number">2.</span><span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">'a a a'</span>                     <span class="token string">'b b b'</span>                     <span class="token string">'c c c'</span><span class="token punctuation">;</span>上面代码将<span class="token number">9</span>个单元格分成a、b、c三个区域。<span class="token number">3.</span>下面是一个布局实例。<span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">"header header header"</span>                     <span class="token string">"main main sidebar"</span>                     <span class="token string">"footer footer footer"</span><span class="token punctuation">;</span>上面代码中，顶部是页眉区域header，底部是页脚区域footer，中间部分则为main和sidebar。<span class="token number">4.</span>如果某些区域不需要利用，则使用<span class="token string">"点"</span>（<span class="token number">.</span>）表示。<span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">'a . c'</span>                     <span class="token string">'d . f'</span>                     <span class="token string">'g . i'</span><span class="token punctuation">;</span>上面代码中，中间一列为点，表示没有用到该单元格，或者该单元格不属于任何区域。<span class="token number">5.</span>注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为区域名-start，终止网格线自动命名为区域名-end。比如，区域名为header，则起始位置的水平网格线和垂直网格线叫做header-start，终止位置的水平网格线和垂直网格线叫做header-end。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-grid-auto-flow"><a href="#5-grid-auto-flow" class="headerlink" title="5. grid-auto-flow"></a>5. grid-auto-flow</h3><ul><li><p>主要用于排序方式</p></li><li><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。</p></li><li><p>默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行。</p></li><li><p>这个顺序由<code>grid-auto-flow</code>属性决定，默认值是<code>row</code>，即”先行后列”。</p></li><li><p>也可以将它设成<code>column</code>，变成”先列后行”。</p></li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>grid-auto-flow</code>属性除了设置成<code>row</code>和<code>column</code>，还可以设成<code>row dense</code>和<code>column dense</code>。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。    </p></li><li><p><code>row</code> 默认值 先行后列</p></li><li><p><code>column</code> 先列后行</p></li><li><p><code>row dense</code>，表示”先行后列”，并且尽可能紧密填满，尽量填满空格。 dense 密集的</p></li><li><p><code>column dense</code>, 表示”先列后行”，并且尽可能紧密填满，尽量填满空格。</p></li></ul><h3 id="6-justify-items-，-align-items-，-place-items"><a href="#6-justify-items-，-align-items-，-place-items" class="headerlink" title="6. justify-items ， align-items ， place-items"></a>6. justify-items ， align-items ， place-items</h3><ul><li><p><code>justify-items</code>属性设置单元格内容的水平位置（左中右）。</p></li><li><p><code>align-items</code>属性设置单元格内容的垂直位置（上中下）。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这两个属性的写法完全相同，都可以取下面这些值。</p><ul><li><p>start：对齐单元格的起始边缘。</p></li><li><p>end：对齐单元格的结束边缘。</p></li><li><p>center：单元格内部居中。</p></li><li><p>stretch：拉伸，占满单元格的整个宽度（默认值）。（参照flex里的）</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">justify-items</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>place-items</code>属性是<code>align-items</code>属性和<code>justify-items</code>属性的合并简写形式。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token property">place-items</span><span class="token punctuation">:</span> &lt;align-items> &lt;justify-items><span class="token punctuation">;</span>例如：<span class="token property">place-items</span><span class="token punctuation">:</span> start end<span class="token punctuation">;</span>如果省略第二个值，则浏览器认为与第一个值相等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="7-justify-content，-align-content，-place-content"><a href="#7-justify-content，-align-content，-place-content" class="headerlink" title="7. justify-content， align-content， place-content"></a>7. justify-content， align-content， place-content</h3><ul><li><code>justify-content</code>属性是整个内容区域在容器里面的水平位置（左中右）。</li><li><code>align-content</code>属性是整个内容区域的垂直位置（上中下）。</li></ul><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> start | end | center | stretch | space-around | space-between | space-evenly<span class="token punctuation">;</span>  <span class="token property">align-content</span><span class="token punctuation">:</span> start | end | center | stretch | space-around | space-between | space-evenly<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>这两个属性的写法完全相同，都可以取下面这些值。</p></li><li><p>start - 对齐容器的起始边框。</p></li><li><p>end - 对齐容器的结束边框。</p></li><li><p>center - 容器内部居中。</p></li><li><p>stretch - 项目大小没有指定时，拉伸占据整个网格容器。(默认值)</p></li><li><p>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</p></li><li><p>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。</p></li><li><p>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</p></li><li><p><code>place-content</code>属性是<code>align-content</code>属性和<code>justify-content</code>属性的合并简写形式。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token property">place-content</span><span class="token punctuation">:</span> &lt;align-content> &lt;justify-content><span class="token property">place-content</span><span class="token punctuation">:</span> space-around space-evenly<span class="token punctuation">;</span>如果省略第二个值，浏览器就会假定第二个值等于第一个值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="8-grid-auto-columns，-grid-auto-rows"><a href="#8-grid-auto-columns，-grid-auto-rows" class="headerlink" title="8. grid-auto-columns， grid-auto-rows"></a>8. grid-auto-columns， grid-auto-rows</h3><p>有时候，一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目</p><ul><li><p><code>grid-auto-columns</code>属性和<code>grid-auto-rows</code>属性用来设置，浏览器自动创建的多余网格的列宽和行高。</p></li><li><p>它们的写法与<code>grid-template-columns</code>和<code>grid-template-rows</code>完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-auto-rows</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token punctuation">}</span>指定新增的行高统一为<span class="token number">50</span>px（原始的行高为<span class="token number">100</span>px）划分好的网格是<span class="token number">3</span>行 x <span class="token number">3</span>列，但是，<span class="token number">8</span>号项目指定在第<span class="token number">4</span>行，<span class="token number">9</span>号项目指定在第<span class="token number">5</span>行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意 行超出了 设置行才有用，列超出了设置列才有用</p></li></ul><h3 id="9-grid-template"><a href="#9-grid-template" class="headerlink" title="9. grid-template"></a>9. grid-template</h3><p><code>grid-template</code>属性是<code>grid-template-columns</code>、<code>grid-template-rows</code>和<code>grid-template-areas</code>这三个属性的合并简写形式。</p><h3 id="10-grid-属性"><a href="#10-grid-属性" class="headerlink" title="10. grid 属性"></a>10. grid 属性</h3><ul><li><code>grid</code>属性是<code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、 <code>grid-auto-rows</code>、<code>grid-auto-columns</code>、<code>grid-auto-flow</code>这六个属性的合并简写形式。</li><li>从易读易写的角度考虑，还是建议不要合并属性。</li></ul><h2 id="三、项目（item）属性"><a href="#三、项目（item）属性" class="headerlink" title="三、项目（item）属性"></a>三、项目（item）属性</h2><h3 id="1-grid-column-start、grid-column-end、grid-row-start-、-grid-row-end"><a href="#1-grid-column-start、grid-column-end、grid-row-start-、-grid-row-end" class="headerlink" title="1. grid-column-start、grid-column-end、grid-row-start 、 grid-row-end"></a>1. grid-column-start、grid-column-end、grid-row-start 、 grid-row-end</h3><ul><li><p>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p></li><li><pre class="line-numbers language-css"><code class="language-css">grid-column-start属性：左边框所在的垂直网格线grid-column-end属性：右边框所在的垂直网格线grid-row-start属性：上边框所在的水平网格线grid-row-end属性：下边框所在的水平网格线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">1</span>号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线上面代码 只指定了<span class="token number">1</span>号项目的左右边框，没有指定上下边框，所以会采用默认位置，即上边框是第一根水平网格线，下边框是第二根水平网格线。除了<span class="token number">1</span>号项目以外，其他项目都没有指定位置，由浏览器自动布局，这时它们的位置由容器的grid-auto-flow属性决定，这个属性的默认值是row，因此会<span class="token string">"先行后列"</span>进行排列。大家可以把这个属性的值分别改成column、row dense和column dense，看看其他项目的位置发生了怎样的变化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">"header header header"</span>                         <span class="token string">"main main sidebar"</span>                         <span class="token string">"footer footer footer"</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>    <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> [c<span class="token number">1</span>] <span class="token number">100</span>px [c<span class="token number">2</span>] <span class="token number">100</span>px [c<span class="token number">3</span>] auto [c<span class="token number">4</span>]<span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> header-start<span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> header-end<span class="token punctuation">;</span><span class="token punctuation">}</span>左边框和右边框的位置，都指定为网格线的名字。 配合grid-template-areas 或者 grid-template-columns 来给网格命名一起来使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这四个属性的值还可以使用<code>span</code>关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> span <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">1号项目的左边框距离右边框跨越2个网格这与下面的代码效果完全一样。<span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> span <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用这四个属性，如果产生了项目的重叠，则使用<code>z-index</code>属性指定项目的重叠顺序。</p></li></ul><h3 id="2-grid-column-grid-row"><a href="#2-grid-column-grid-row" class="headerlink" title="2. grid-column  grid-row"></a>2. grid-column  grid-row</h3><ul><li><p><code>grid-column</code>属性是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式。</p></li><li><p><code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> &lt;start-line> / &lt;end-line><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> &lt;start-line> / &lt;end-line><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">上面代码中，项目item-1占据第一行，从第一根列线到第三根列线。这两个属性之中，也可以使用span关键字，表示跨越多少个网格。<span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#b03532</span><span class="token punctuation">;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 等同于 */</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#b03532</span><span class="token punctuation">;</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span> / span <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>斜杠以及后面的部分可以省略，默认跨越一个网格。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-grid-area"><a href="#3-grid-area" class="headerlink" title="3. grid-area"></a>3. grid-area</h3><ul><li><p><code>grid-area</code>属性指定项目放在哪一个区域。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span>指定<span class="token number">1</span>号项目位于e区域<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>grid-area</code>属性还可用作<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code>的合并简写形式，直接指定项目的位置。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> &lt;row-start> / &lt;column-start> / &lt;row-end> / &lt;column-end><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.item-1</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> <span class="token number">1</span> / <span class="token number">1</span> / <span class="token number">3</span> / <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-justify-self、-align-self、place-self"><a href="#4-justify-self、-align-self、place-self" class="headerlink" title="4. justify-self、 align-self、place-self"></a>4. justify-self、 align-self、place-self</h3><ul><li><p><code>justify-self</code>属性设置单元格内容的水平位置（左中右），跟<code>justify-items</code>属性的用法完全一致，但只作用于单个项目。</p></li><li><p><code>align-self</code>属性设置单元格内容的垂直位置（上中下），跟<code>align-items</code>属性的用法完全一致，也是只作用于单个项目。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span>  <span class="token property">align-self</span><span class="token punctuation">:</span> start | end | center | stretch<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>start：对齐单元格的起始边缘。</p></li><li><p>end：对齐单元格的结束边缘。</p></li><li><p>center：单元格内部居中。</p></li><li><p>stretch：拉伸，占满单元格的整个宽度（默认值）。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item-1</span>  </span><span class="token punctuation">{</span>  <span class="token property">justify-self</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>place-self</code>属性是<code>align-self</code>属性和<code>justify-self</code>属性的合并简写形式。</p></li><li><pre class="line-numbers language-css"><code class="language-css"><span class="token property">place-self</span><span class="token punctuation">:</span> &lt;align-self> &lt;justify-self><span class="token punctuation">;</span><span class="token property">place-self</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span>如果省略第二个值，place-self属性会认为这两个值相等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="四、相关资料引用"><a href="#四、相关资料引用" class="headerlink" title="四、相关资料引用"></a>四、相关资料引用</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CSS部分 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘选好文</title>
      <link href="/2019/09/15/wenzhang/"/>
      <url>/2019/09/15/wenzhang/</url>
      
        <content type="html"><![CDATA[<pre><code>                    人生越是艰难处，越要往前多走几步</code></pre><p>表弟大鹏刚工作那段时间，总是吐槽自己的实习工作太没意思。每天都是处理一堆乱七八糟的小事和杂事，工资不高、加班不少，这让他感觉看不到未来。</p><p>我安慰他说，与其浪费时间抱怨，不如好好总结一下自己的工作如何能更有效率，好好想想你在现在的工作中能够得到什么样的经验。又或者，你考虑考虑这份工作是否真的适合自己。一味地吐槽，于自身成长而言并无益处。只有迈开脚步往前多走几步，你才会发现，那些你以为过不去的难关都会过去。</p><p>在那之后，表弟不再那么纠结了，而是认真努力地完成所有交予他的工作。半年后，他顺利转正，因为成绩突出，他申请转岗，去了自己喜欢的部门。</p><p>很多时候，出现不顺心的事情时，我们容易困在不好的情绪里。带着不爽的心情工作，自然什么都做不好。其实真的静下心来面对，很多事情也没那么难了。如果碰到一点挫折就陷入负面情绪中止步不前，那才是得不偿失。</p><p>遇到困难，千万别停滞不前，要勇敢迈出脚步，一步不行，就多走几步。人生就如开花结果，努力生长，丰盈自我，就不会白忙一场。</p><p>我在乡下支教时曾经遇到一位大姐。大姐姓张，早些年她丈夫外出打工后便杳无音讯，家里上有婆婆，下有两个小娃，一家老小全指着她赚钱养家。于是，她去了县里的一家服装厂打工。但因为一次意外，她的右手被卷入裁断机，失去了3根手指。</p><p>很多人都为她的遭遇难过，张大姐自己却是那个最快接受现实的人。打不了工，她就回了老家，开始每天去集上卖山货。后来，村里的大学生村官教她做直播卖货，她认真研究其他主播的直播技巧，学习销售方法，还苦练普通话。</p><p>张大姐说，自己有时候也会难过，但人这一生只能抬头看、往前走，没有过不去的坎，不能因为难走就不走了啊，路照走、活照干、日子照过。</p><p>大姐的话虽然朴实，却让我动容：对啊，人生艰难处，为什么不多走几步试试呢？世上本没有那么多圆满，各种艰难曲折的考验都真实存在着，这就是人生。俗话说，车到山前必有路。前提是，你要走到山前，才能发现路。如果远眺山峰就被吓住而退缩，那么一辈子都不可能登顶。</p><p>朋友梓风是个宝妈，去年参加了考研。走出校园已七年的她，重拾书本考研，这一路的艰辛不言而喻。</p><p>她说那段时间，除了吃饭睡觉就是看书刷题，枯燥又重复、孤独且煎熬。每当学习遇上瓶颈，尤其是专业术语背了又忘，那种挫败感更是铺天盖地而来。</p><p>可无论上一刻是多么焦虑，冷水洗把脸后，她又开始投入到学习中。最终，顶着质疑与压力，她成功上岸，收到了目标院校的录取通知书。<br>人生在世，谁都会有艰难的时候。人生不易，得过且过太容易。但我想说的是，如果身处沙漠，更不要放弃寻找绿洲。朴素的执着往往能解开人生困境，越是难走的时候，越要坚持往前多走几步。</p><p>在经历中成长，在困境中前行，人生自会渐入佳境，最终收获更好的自己。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 深度好文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘选好文</title>
      <link href="/2019/08/30/index/"/>
      <url>/2019/08/30/index/</url>
      
        <content type="html"><![CDATA[<pre><code>                    人可以平凡，但不可以平庸</code></pre><p>很喜欢这样一句话，“人可以平凡，但不可以平庸。”平凡是努力过后的坦然，平庸是随意过后的必然。平凡的人知道自己平凡但依旧热爱生活、脚踏实地，平庸的人则容易随波逐流、得过且过。</p><p>　　袁枚的诗中有这样一句：“苔花如米小，也学牡丹开。”如米粒般微小的苔花依然像牡丹一样热烈绽放，所以人更该积极向上地活着。想要告别平庸，获得有意义的人生，需要做好3件事。</p><p>　　第一，善于规划是前提。</p><p>　　规划就是人生的指向标，有了这个指向标，我们才能知道自己要去哪里，人生才不会迷失方向。很多时候，人与人之间的差距就在于是否对未来有规划。</p><p>　　上大学时，我们宿舍的乐乐每天都过得很“潇洒”，晚上不是熬夜打游戏就是刷剧、刷短视频，凌晨三点还不睡，白天上课听一会儿就趴桌子上睡觉了。只有快期末考试那几天，我们才能看到她熬夜突击学习。可想而知，她每学期都挂科补考。</p><p>　　跟乐乐不一样，同学小君从大一开始就立志要靠优异成绩拿到保研名额。除了上课外，她喜欢泡在图书馆看书，还积极参加科研项目。毕业时，乐乐海投简历却总是石沉大海，小君则如愿以偿、成功保研。</p><p>　　有人说，“没规划的人生叫拼图，有规划的人生才叫蓝图；没目标的人生叫流浪，有目标的人生叫航行。”深以为然。没规划的人漫无目的地生活，有规划的人从容坚定地前行。有无规划，人生大不一样。规划决定你的人生走向，你的未来就藏在你的人生规划里。</p><p>　　第二，勇于行动是基础。</p><p>　　有了规划，接下来要做的就是行动起来。如果不行动，再好的规划也是纸上谈兵。</p><p>　　我叔叔是一所学校的保安，薪水不高，每月还要上半个月夜班。我经常听他念叨对这份工作不满意，不想长干，想换个工作。他曾经是驾驶员，听周围人说开网约车能挣钱，他也想试试。但成为网约车司机需要考取资格证，如果平时多做做题，考试是能过关的。可他总说自己小学文化，肯定考不下来。直到今天，他做保安已经好几年了，尽管不满意，却还在做着。</p><p>　　生活中，像我叔叔这样的人不在少数。有的人一边喊着减肥，一边又抵抗不了美味的诱惑；有的人一边说要自律，一边睡到日上三竿；有的人一边踌躇满志，一边沉迷手机。</p><p>　　没有行动，理想再美也只是远方的风景。很多时候打败你的不是能力问题，而是犹豫不决。如果想要成长，就一定要勇于行动。</p><p>　　第三，敢于坚持是关键。</p><p>　　朋友小丽最近和我抱怨：“为什么我报了这么多培训班，依旧一无所长？”小丽是个好学上进的人，为了提高自己的英语口语，她早上6点起床晨读，白天一有空闲时间就听音频，一句一句地模仿。</p><p>　　过了一段时间，她听别人说学钢琴能提升气质，果断报了钢琴培训班。没几天，培训室旁边的瑜伽馆做活动，她又报了瑜伽培训。钢琴和口语都不练了，她说自己喜欢上了瑜伽。然而，瑜伽练了不到三个月，她又不喜欢了……</p><p>　　凡事贵在坚持，即使你能力再强，如果做事一曝十寒、半途而废，那同样什么也做不成。</p><p>　　有人说，“生活不能等待别人来安排，要自己去争取和奋斗；而不论其结果是喜是悲，但可以慰藉的是，你总不枉在这世界上活了一场。”</p><p>　　一个人的生活可以平凡，但不可以平庸。不甘平庸的人生，始于规划，成于行动，终于坚持。余生，愿你眼眸有星辰，心中有山海；愿你韶华不负，未来可期。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 深度好文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>也罢</title>
      <link href="/2019/08/27/blog-open-source/"/>
      <url>/2019/08/27/blog-open-source/</url>
      
        <content type="html"><![CDATA[<ul><li>修改了原主题的一些很多<code>bug</code>   2019.08.05</li><li>加入图片懒加载功能，在根目录配置文件开启和关闭    2019.08.09</li><li>增加<code>留言板</code>功能          2019.08.05</li><li>在关于板块,加入<code>简历</code>功能页   2019.08.05</li><li>增加视听[视觉听觉影音]板块       2019.08.10</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。  2019.08.10</li><li>增加网站运行时间显示  2019.08.10</li><li>增加<code>动漫模型</code>     2019.08.10</li><li>整体替换Banner图片和文章特色图片   2019.08.10</li><li>增加分类<code>相册</code>功能         2019.08.29</li><li>去掉标签页,将其合并至<code>分类</code>页中                2019.09.01</li><li>修改了一些控件的参数   2019.09.01</li><li>修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观          2019.09.01</li><li>解决首页文章列表卡片上方 <code>border-radius</code>圆角失效的bug  2019.09.01</li><li>添加页面樱花飘落动效            2019.09.09</li><li>添加鼠标点击烟花爆炸动效   2019.09.09</li><li>加入天气接口控件   2019.09.09</li><li>加入鼠标点击文字特效   2019.09.10</li><li>添加页面雪花飘落动效            2019.09.10</li><li>添加在线聊天插件            2019.09.12</li><li>持续更新…</li><li>运行命令<code>hexo  clean</code>（清除生成文件），<code>hexo g</code>（生成网页）， <code>hexo  s</code>（本地预览），<code>hexo d</code>（部署）</li></ul><hr><blockquote><p><strong>最后，如果项目和教程对你有所帮助或者你看见了还算比较喜欢，欢迎给我<code>star</code>，谢谢您！</strong></p></blockquote><p><strong>持续更新中…，如果遇到问题欢迎联系我，在文章最后评论区【留言和讨论】，当然，欢迎点击文章最后的打赏按键，请博主一杯冰阔乐，笑～</strong></p><table>  <tbody><tr>    <td><img width="100" src="https://sunhwee.com/medias/reward/alipay.bmp"></td>    <td><img width="100" src="https://sunhwee.com/medias/reward/wechat.bmp"></td>    <td><img width="100" src="https://sunhwee.com/medias/reward/zan.png"></td>     </tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 初来乍到 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
